openapi: 3.1.0
x-stoplight:
  id: a6bc09236fd46
info:
  title: idk
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
    description: server one one
  - description: server two
  - url: ''
    description: server three
paths:
  /users:
    parameters: []
    get:
      summary: Get User Info by User IDs!
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: string
                  next:
                    type: string
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                        count:
                          type: string
                        Validator:
                          anyOf:
                            - $ref: '#/components/schemas/Validator'
                            - type: 'null'
                              properties: {}
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: |-
        Retrieve the information of the user with the matching user ID.

        ![picture](51341367373_69acb49457_c.jpg)
        ![pic](../docs/assets/images/51835552929_396b75ac7d_o.jpg)
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - enum:
                    - stuff
              type: string
        description: ''
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name - make a long title - even more long - how about this  - is this long enough:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
    post:
      summary: ''
      operationId: post-users-userId
      responses:
        '200':
          description: OK
      tags:
        - one
  /user:
    post:
      summary: Create New Userssssss
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
                test:
                  type: string
                  x-stoplight:
                    id: j9mu6s3j7zuq4
                  description: this is the description the snippy person t
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
      tags:
        - one
  /bm/catalog/product-validations/history:
    get:
      summary: List statistics of validation operations per operator and day in the given market.
      description: List statistics of validation operations per operator and day in the given market.
      x-tier: 3
      operationId: get-bm-catalog-product-validations-history
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    example: 'https://www.backmarket.fr/bm/catalog/products-validation/history?marketCode=FR&page=2'
                    nullable: true
                  previous:
                    type: string
                    example: null
                    nullable: true
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          $ref: '#/components/schemas/FullDate'
                        countValidatedInMarket:
                          type: number
                          example: 3
                        countRematched:
                          type: number
                          example: 10
                        validator:
                          anyOf:
                            - $ref: '#/components/schemas/Validator'
                            - nullable: true
                              type: 'null'
                      required:
                        - date
                        - countValidatedInMarket
                        - countRematched
                        - validator
                required:
                  - count
                  - next
                  - previous
                  - results
        '401':
          description: Unauthenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseV2'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseV2'
        '422':
          description: Unprocessable entity. Filters or pages are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseV2'
      tags:
        - two
  /path:
    get:
      summary: Your GET endpoint
      tags:
        - two
      responses: {}
      operationId: get-path
  /formdataTest:
    get:
      summary: Form Data Test
      tags:
        - three
      responses: {}
      operationId: get-formdataTest
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                adsf:
                  type: string
                  x-stoplight:
                    id: 580tjz88bxv00
                fdas:
                  type: string
                  x-stoplight:
                    id: x6sas9n703x94
                lkjl:
                  type: string
                  x-stoplight:
                    id: so5e2uuncfbdq
            examples:
              Example 1:
                value:
                  adsf: string
                  fdas: string
                  lkjl: string
              Example 2:
                value:
                  adsf: string
                  fdas: string
                  lkjl: string
        description: stuff
  /jsonbodytest:
    get:
      summary: JSON Body Test
      tags:
        - three
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  asdf:
                    type: string
                    x-stoplight:
                      id: ntdkb83vb2wsy
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  asdfasdf:
                    type: string
                    x-stoplight:
                      id: wg73te6id2l6o
                  asdf:
                    type: string
                    x-stoplight:
                      id: 9z5sbpqjiabsn
      operationId: get-jsonbodytest
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                asdf:
                  type: string
                  x-stoplight:
                    id: dpco3iux65dt0
            examples:
              Example 1:
                value:
                  asdf: string
                  '': string
              Example 2:
                value:
                  asdf: string
  /sevenOneThreeEight:
    get:
      summary: '7138'
      tags: []
      responses: {}
      operationId: get-sevenOneThreeEight
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                number:
                  type: string
                  x-stoplight:
                    id: tkg3uph076b8t
                  default: 12321312
                anotherNumber:
                  type: string
                  x-stoplight:
                    id: tgwwbyctcfl2m
                  default: adsfdasf
  /stuff:
    get:
      summary: Component Library
      tags: []
      operationId: get-stuff
components:
  schemas:
    User:
      title: User
      description: ''
      examples:
        - id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      anyOf:
        - type: object
          properties:
            id:
              type: integer
              description: Unique identifier for the given user.
            firstName:
              type: string
            lastName:
              type: string
            email:
              type: string
              format: email
            dateOfBirth:
              type: string
              format: date
              example: '1997-10-31'
            emailVerified:
              type: boolean
              description: Set to true if the user's email has been verified.
            createDate:
              type: string
              format: date
              description: The date that the user was created.
          required:
            - id
            - firstName
            - lastName
            - email
            - emailVerified
        - type: string
          properties: {}
    Validator:
      type: object
      required:
        - username
        - id
      properties:
        username:
          type: string
          example: john.doe.ext
        id:
          type: number
          example: 6634224
  examples:
    Example:
      value:
        description: Example shared example
        type: object
        properties:
          id:
            type: string
        required:
          - id
  requestBodies:
    testRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              'j,hjkl':
                type: string
                x-stoplight:
                  id: h93vpm2vs0k1j
      description: ''
tags:
  - name: one
  - name: three
  - name: two
