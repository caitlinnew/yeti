{
  "name": "Yeti",
  "description": "",
  "spectralExtends": [],
  "extends": [],
  "formats": [
    "oas2",
    "oas3",
    "oas3.0",
    "oas3.1"
  ],
  "aliases": {
    "DCSA_NonObjects": {
      "id": "CcTyJ9QunjdVIxs3Y8oZ2",
      "description": "Matching all `DCSA` recognized simpleTypes",
      "name": "DCSA_NonObjects",
      "targets": [
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.schemas.*"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.schemas..properties.*"
        }
      ]
    },
    "API_Document": {
      "id": "eCyP_zhVPpx_xpKJQEVML",
      "description": "The complete API specification document. This can be used to target any part of the OpenAPI document using **field**.\n\n*Use this if you don't find specific targets that cater to your usecase.* ",
      "name": "API_Document",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$"
        }
      ]
    },
    "API_Description": {
      "id": "TUef4OXfFfp8mNR11QyD7",
      "description": "The top level description in an API document",
      "name": "API_Description",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$.info.description"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.info.description"
        }
      ]
    },
    "Operation_Object": {
      "id": "l9E06ecfLYw32uRq7Q8yJ",
      "description": "The complete operation object. Use it in combo with field object.",
      "name": "Operation_Object",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "#Path_Item[get,put,post,delete,options,head,patch,trace]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "#Path_Item[get,put,post,delete,options,head,patch,trace]"
        }
      ]
    },
    "Operation_Responses": {
      "id": "zcXcUorr_J3nVzVAjkfNX",
      "description": "Responses for all operations including get, put, post, delete, options, head, patch, trace.",
      "name": "Operation_Responses",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "#Operation_Object.responses"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "#Operation_Object.responses"
        }
      ]
    },
    "Path_Item": {
      "id": "yAIlP1H64grnNgXQGFt-Y",
      "name": "Path_Item",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$.paths[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.paths[*]"
        }
      ]
    },
    "API_Contact": {
      "id": "kxE6B0Rxm34OF1xAkW2Bf",
      "description": "The top level description in an API document",
      "name": "API_Contact",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$.info.contact"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.info.contact"
        }
      ]
    },
    "API_License": {
      "id": "-FzzMHNYr5Y40XZCqR7Bp",
      "description": "The top level description in an API document",
      "name": "API_License",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$.info.license"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.info.license"
        }
      ]
    },
    "All_Markdown": {
      "id": "CyQWg4i3gexl5NPl9Jsve",
      "description": "All markdown descriptions across the document.",
      "name": "All_Markdown",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..[description,title]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..[description,title]"
        }
      ]
    },
    "API_Tags": {
      "id": "NYpYB3Ea4b1rRVHZqetql",
      "description": "Tags on an API object",
      "name": "API_Tags",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "#Operation_Object.tags"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "#Operation_Object.tags"
        }
      ]
    },
    "All_Servers": {
      "id": "BKzQPqkt1C46gm_lgEVJn",
      "description": "API hosts defined in the API specification",
      "name": "All_Servers",
      "targets": [
        {
          "formats": [
            "oas3"
          ],
          "given": "$.servers[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "#Path_Item.servers[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "#Operation_Object.servers[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "#Link_Object.server"
        },
        {
          "formats": [
            "oas2"
          ],
          "given": "$.host"
        }
      ]
    },
    "Response_All_Object": {
      "id": "ChN9cDhwsNvpkqWtzNULd",
      "description": "All responses (object) in an API",
      "name": "Response_All_Object",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$.responses"
        },
        {
          "formats": [
            "oas2"
          ],
          "given": "#Operation_Responses"
        },
        {
          "formats": [
            "oas2"
          ],
          "given": "$..responses"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.responses"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "#Operation_Responses"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..responses"
        }
      ]
    },
    "API_Server_URL": {
      "id": "KsiHAuPEXMIpamlWqZZoc",
      "description": "API host urls defined in the API specification",
      "name": "API_Server_URL",
      "targets": [
        {
          "formats": [
            "oas3"
          ],
          "given": "$.servers[*].url"
        },
        {
          "formats": [
            "oas2"
          ],
          "given": "$.host"
        }
      ]
    },
    "All_Ref": {
      "id": "x3CT4EG5WoIB4CcSNhhik",
      "description": "All references throughout the API",
      "name": "All_Ref",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..[?(@property === '$ref')]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..[?(@property === '$ref')]"
        }
      ]
    },
    "All_Enum_Object": {
      "id": "XUqo3xJqp1UbTr17fa-Cf",
      "description": "All references throughout the API",
      "name": "All_Enum_Object",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..[?(@ && @.enum)]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..[?(@ && @.enum)]"
        }
      ]
    },
    "Request_Parameter_All": {
      "id": "qpvAVn_Bb10EiaKZFKhMk",
      "description": "All request parameters",
      "name": "Request_Parameter_All",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..parameters[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..parameters[*]"
        }
      ]
    },
    "Request_Parameter_Query": {
      "id": "TSLCLXBJRP4-I5skbfWah",
      "description": "All request query parameters",
      "name": "Request_Parameter_Query",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..parameters[?(@ && @.in==\"query\")]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..parameters[?(@ && @.in==\"query\")]"
        }
      ]
    },
    "Request_Parameter_Header": {
      "id": "sAO4H2lo0dHSgizBy7wva",
      "description": "All request header parameters",
      "name": "Request_Parameter_Header",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..parameters[?(@ && @.in==\"header\")]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..parameters[?(@ && @.in==\"header\")]"
        }
      ]
    },
    "Request_Parameter_Cookie": {
      "id": "wMRPzESSjU-NgEXsIW1H5",
      "description": "All request cookie parameters",
      "name": "Request_Parameter_Cookie",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..parameters[?(@ && @.in==\"cookie\")]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..parameters[?(@ && @.in==\"cookie\")]"
        }
      ]
    },
    "Request_Parameter_Path": {
      "id": "NPVqKcUnw4S30EJ-NTDJY",
      "description": "All request path parameters",
      "name": "Request_Parameter_Path",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..parameters[?(@ && @.in==\"path\")]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..parameters[?(@ && @.in==\"path\")]"
        }
      ]
    },
    "Path_Object": {
      "id": "L4uMg3IMb-7Ejyb_UQ4z2",
      "description": "Path object. Usually used to target the Path key e.g. `/users/{userId}`",
      "name": "Path_Object",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$.paths"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.paths"
        }
      ]
    },
    "All_Example_Schema": {
      "id": "aapLR8zEn1fVeJvheB7vQ",
      "description": "All examples for schemas",
      "name": "All_Example_Schema",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..definitions..[?(@property !== 'properties' && @ && (@.example !== void 0 || @['x-example'] !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
        },
        {
          "formats": [
            "oas2"
          ],
          "given": "$..parameters..[?(@property !== 'properties' && @ && (@.example !== void 0 || @['x-example'] !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
        },
        {
          "formats": [
            "oas2"
          ],
          "given": "$..responses..[?(@property !== 'properties' && @ && (@.example !== void 0 || @['x-example'] !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.schemas..[?(@property !== 'properties' && @ && (@ && @.example !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..content..[?(@property !== 'properties' && @ && (@ && @.example !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..headers..[?(@property !== 'properties' && @ && (@ && @.example !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..parameters..[?(@property !== 'properties' && @ && (@ && @.example !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
        }
      ]
    },
    "API_Document_RecursiveSearch": {
      "id": "5gsVuIF_RjFOTqTJPoHhI",
      "description": "The complete API specification document. This can be used to target any part of the OpenAPI document using **field**.\n\n*Use this if you don't find specific targets that cater to your usecase.* ",
      "name": "API_Document_RecursiveSearch",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$.."
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.."
        }
      ]
    },
    "All_Example": {
      "id": "lBKUYWxgeYv3gXunwxRQY",
      "description": "All examples across the API document",
      "name": "All_Example",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..examples[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.examples[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.paths[*][*]..content[*].examples[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.paths[*][*]..parameters[*].examples[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.parameters[*].examples[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.paths[*][*]..headers[*].examples[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.headers[*].examples[*]"
        }
      ]
    },
    "All_Example_Media": {
      "id": "dTT__eNr_Jrj5XhOGIxnS",
      "description": "All examples for schemas",
      "name": "All_Example_Media",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..responses..[?(@ && @.schema && @.examples)]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..content..[?(@ && @.schema && (@.example !== void 0 || @.examples))]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..headers..[?(@ && @.schema && (@.example !== void 0 || @.examples))]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..parameters..[?(@ && @.schema && (@.example !== void 0 || @.examples))]"
        }
      ]
    },
    "API_Tags_Item": {
      "id": "sutW174ZcUWJANSBcHskV",
      "description": "Tags on an API object",
      "name": "API_Tags_Item",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$.tags[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.tags[*]"
        }
      ]
    },
    "All_Enum_Value": {
      "id": "_QRKSZ4Aad9ll4MQwruqN",
      "description": "All enum values throughout the API",
      "name": "All_Enum_Value",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..[?(@ && @.enum)].enum[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..[?(@ && @.enum)].enum[*]"
        }
      ]
    },
    "Link_Object": {
      "id": "eqTIJ76PZyMO9Yv1_QU_T",
      "name": "Link_Object",
      "targets": [
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.links[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "#Response_All_Object.links[*]"
        }
      ]
    },
    "API_Server": {
      "id": "Iw6zKk-1YBUNvNTv9Dsk4",
      "description": "API hosts defined in the API specification",
      "name": "API_Server",
      "targets": [
        {
          "formats": [
            "oas3"
          ],
          "given": "$.servers"
        },
        {
          "formats": [
            "oas2"
          ],
          "given": "$.host"
        }
      ]
    }
  },
  "rules": {
    "simpleType-validation-check-DCSA-compatibility": {
      "id": "lbwA_RpbH3rlvo3G2Md4h",
      "given": [
        "#DCSA_NonObjects"
      ],
      "severity": "error",
      "then": {
        "function": "checkRequirements"
      },
      "name": "simpleType-validation-check-DCSA-compatibility",
      "description": "Check DCSA allowed properties",
      "message": "{{error}}",
      "resolved": false
    },
    "contact-url": {
      "id": "HRqaPWR--7vM6f-i6ZlRe",
      "given": [
        "#API_Contact"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "url"
      },
      "name": "contact-url",
      "description": "The `contact` object should have a valid organization URL. \r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{\r\n  \"contact\": {\r\n     ... ,\r\n     \"url\": \"https://acme.com\",\r\n     ... \r\n},\r\n```",
      "message": "Contact object should have \"url\"."
    },
    "contact-email": {
      "id": "6GF5L1XfxbI1TSR30jK0X",
      "given": [
        "#API_Contact"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "email"
      },
      "name": "contact-email",
      "description": "The `contact` object should have a valid email. \r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{\r\n  \"contact\": {\r\n     ... ,\r\n     ... ,\r\n     \"email\": \"support.contact@acme.com\"\r\n},\r\n```",
      "message": "Contact object should have \"email\""
    },
    "info-contact": {
      "id": "BcKHWds86YDcxaV47phN0",
      "given": [
        "#API_Document"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "info.contact"
      },
      "name": "info-contact",
      "description": "The `info' object should include a `contact` object.\r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{\r\n  \"info\": {\r\n    ... ,\r\n    ... ,\r\n    \"contact\": {\r\n      \"name\": \"ACME Corporation\",\r\n      \"url\": \"https://acme.com\",\r\n      \"email\": \"support.contact@acme.com\"\r\n    }\r\n  } \r\n}\r\n```",
      "message": "Info object should have \"contact\" object."
    },
    "info-description": {
      "id": "Z1tebl8I4L_3Smv4n1VrF",
      "given": [
        "#API_Document"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "info.description"
      },
      "name": "info-description",
      "description": "The `info` object should have a `description` object.\r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{\r\n  \"info\": {\r\n    ... ,\r\n    ... ,\r\n    \"description\": \"This describes my API.\",\r\n    ... \r\n    }\r\n  } \r\n}\r\n```",
      "message": "Info object should have \"description\" object."
    },
    "info-license": {
      "id": "W-gBXgv7JCQ7F09cx2TGo",
      "given": [
        "#API_Document"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "info.license"
      },
      "name": "info-license",
      "description": "The `info` object should have a `license` object. \r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{\r\n  \"info\": {\r\n    ... ,\r\n    ... ,\r\n    \"license\": {\r\n      \"name\": \"Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)\",\r\n      \"url\": \"https://creativecommons.org/licenses/by-sa/4.0/\"\r\n    }\r\n  } \r\n}\r\n```",
      "message": "Info object should have \"license\" object."
    },
    "license-url": {
      "id": "YQHtsVxYVqdiVnV2eBVHi",
      "given": [
        "#API_License"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "url"
      },
      "name": "license-url",
      "description": "The `license` object should include a valid url.\r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{\r\n  \"license\": {\r\n    \"name\": \"Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)\",\r\n    \"url\": \"https://creativecommons.org/licenses/by-sa/4.0/\"\r\n  }\r\n}\r\n```",
      "message": "License object should include \"url\"."
    },
    "no-eval-in-markdown": {
      "id": "SYp7JixjTOmbqoMG5vB9h",
      "given": [
        "#All_Markdown"
      ],
      "severity": "warn",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "eval\\("
        }
      },
      "name": "no-eval-in-markdown",
      "description": "Markdown descriptions should not contain [`eval()` functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval), which pose a security risk. \r\n\r\n**Invalid Example**\r\n\r\n```json lineNumbers\r\n{  \r\n  \"info\": {\r\n    ... ,\r\n    ... , \r\n    \"description\": \"API for users. eval()\"",
      "message": "Markdown descriptions must not have \"eval(\"."
    },
    "no-script-tags-in-markdown": {
      "id": "a8Bk9iW5yoNLg_eESu36U",
      "given": [
        "#All_Markdown"
      ],
      "severity": "warn",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "<script"
        }
      },
      "name": "no-script-tags-in-markdown",
      "description": "Markdown descriptions should not contain `script` tags, which pose a security risk. \r\n\r\n**Invalid Example**\r\n\r\n```json lineNumbers\r\n{  \r\n  \"info\": {\r\n    ... ,\r\n    ... , \r\n    \"description\": \"API for users. <script>alert(\"You are Hacked\");</script>',\"\r\n```",
      "message": "Markdown descriptions must not have \"<script>\" tags."
    },
    "openapi-tags-alphabetical": {
      "id": "9vYSSNwEfWmFPlcb88ZYE",
      "given": [
        "#API_Document"
      ],
      "severity": "warn",
      "then": {
        "function": "alphabetical",
        "functionOptions": {
          "keyedBy": "name"
        },
        "field": "tags"
      },
      "name": "openapi-tags-alphabetical",
      "description": "Global tags specified at the root OpenAPI Document level should be in alphabetical order based on the `name` property.\r\n\r\n**Invalid Example**\r\n\r\n```json lineNumbers\r\n{\r\n   \"tags\":[\r\n      {\r\n         \"name\":\"Z Global Tag\"\r\n      },\r\n      {\r\n         \"name\":\"A Global Tag\"\r\n      }\r\n   ]\r\n}\r\n```\r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{\r\n   \"tags\":[\r\n      {\r\n         \"name\":\"A Global Tag\"\r\n      },\r\n      {\r\n         \"name\":\"Z Global Tag\"\r\n      }\r\n   ]\r\n}\r\n```",
      "message": "OpenAPI object should have alphabetical \"tags\"."
    },
    "openapi-tags": {
      "id": "fbGmtF7YPMxcoKsC_YGBP",
      "given": [
        "#API_Document"
      ],
      "severity": "warn",
      "then": {
        "function": "schema",
        "functionOptions": {
          "schema": {
            "type": "array",
            "minItems": 1
          }
        },
        "field": "tags"
      },
      "name": "openapi-tags",
      "description": "At least one global tag should be specified at the root OpenAPI Document level.\r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{\r\n   \"tags\":[\r\n      {\r\n         \"name\":\"Global Tag #1\"\r\n      },\r\n      {\r\n         \"name\":\"Global Tag #2\"\r\n      }\r\n   ]\r\n}\r\n```",
      "message": "OpenAPI object should have non-empty \"tags\" array."
    },
    "operation-description": {
      "id": "MI7zaG-00QuQCOyCyu_UU",
      "given": [
        "#Operation_Object"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "description"
      },
      "name": "operation-description",
      "description": "Each operation should have a description. \r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{\r\n  \"get\": {\r\n    ... ,\r\n    \"description\": \"Get a list of users.\",\r\n    ... ,\r\n    ... ,\r\n  }\r\n}\r\n```",
      "message": "Operation \"description\" should be present and non-empty string."
    },
    "operation-operationId": {
      "id": "mUwu7XV0Q1MeyotXI2r6v",
      "given": [
        "#Operation_Object"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "operationId"
      },
      "name": "operation-operationId",
      "description": "All operations should have an `operationId`.\r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{\r\n  \"get\": {\r\n        \"summary\": \"Get users\",\r\n        ... ,\r\n        \"operationId\": \"get-users\"\r\n      }\r\n}\r\n```",
      "message": "Operation should have \"operationId\"."
    },
    "operation-operationId-valid-in-url": {
      "id": "SpnKPz3WJqrKZTIQ8BhET",
      "given": [
        "#Operation_Object"
      ],
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "^[A-Za-z0-9-._~:/?#\\[\\]@!\\$&'()*+,;=]*$"
        },
        "field": "operationId"
      },
      "name": "operation-operationId-valid-in-url",
      "description": "Operation IDs must not contain characters that are invalid for URLs. \r\n\r\n**Invalid Example**\r\n\r\nThe `operationId` in this example includes a pipe and space, which are invalid for URLs.\r\n\r\n```json lineNumbers\r\n{\r\n    \"/users\": {\r\n      \"get\": {\r\n        ... ,\r\n         \"operationId\": \"invalid|operationID \",\r\n         ... ,\r\n      }\r\n    }\r\n}\r\n```\r\n\r\n**Valid Example**\r\n\r\nThis `operationId` is valid for URLs.\r\n\r\n```json lineNumbers\r\n{\r\n    \"/users\": {\r\n      \"get\": {\r\n        ... ,\r\n         \"operationId\": \"this-must-be-unique\",\r\n         ... ,\r\n      }\r\n    }\r\n}\r\n```",
      "message": "OperationId should not have characters that are invalid when used in URL."
    },
    "operation-singular-tag": {
      "id": "5zSiI55WY0o5i0z7WNA34",
      "given": [
        "#API_Tags"
      ],
      "severity": "off",
      "then": {
        "function": "length",
        "functionOptions": {
          "max": 1
        }
      },
      "name": "operation-singular-tag",
      "description": "Operation should not have more than a single tag.",
      "message": "Operation should not have more than a single tag."
    },
    "operation-tags": {
      "id": "wOzGy2sRIYIdmRuw8TEil",
      "given": [
        "#Operation_Object"
      ],
      "severity": "warn",
      "then": {
        "function": "length",
        "functionOptions": {
          "max": 999,
          "min": 1
        },
        "field": "tags"
      },
      "name": "operation-tags",
      "description": "At least one tag should be defined for each operation.\r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{\r\n  \"get\": {\r\n     ... ,\r\n     ... ,\r\n     \"tags\": [\r\n        \"Users\"\r\n     ],\r\n  }\r\n}",
      "message": "Operation should have non-empty \"tags\" array."
    },
    "path-declarations-must-exist": {
      "id": "ChNp8bFTaNKePT515Z86_",
      "given": [
        "#Path_Item"
      ],
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "{}"
        },
        "field": "@key"
      },
      "name": "path-declarations-must-exist",
      "description": "Path parameter declarations must not be empty.\r\n\r\n**Invalid Example**\r\n\r\n`/users/{}`\r\n\r\n**Valid Example**\r\n\r\n`/users/{userId}`",
      "message": "Path parameter declarations must not be empty, ex.\"/given/{}\" is invalid."
    },
    "contact-name": {
      "id": "G6dAZqEKhTZp8xlsBSahZ",
      "given": [
        "#API_Contact"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "name"
      },
      "name": "contact-name",
      "description": "The `contact` object should have an organization name. \r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{\r\n  \"contact\": {\r\n    \"name\": \"ACME Corporation\",\r\n     ... ,\r\n     ... \r\n},\r\n```\r\n",
      "message": "Contact object should have \"name\""
    },
    "path-keys-no-trailing-slash": {
      "id": "ZhCnetVRtZPCvwZMgLObQ",
      "given": [
        "#Path_Object"
      ],
      "severity": "warn",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": ".+\\/$"
        },
        "field": "@key"
      },
      "name": "path-keys-no-trailing-slash",
      "description": "Path keys should not end in forward slashes. This is a best practice for working with web tooling, such as mock servers, code generators, application frameworks, and more).\r\n\r\n**Invalid Example**\r\n\r\n```json\r\n{\r\n \"/users/\": {\r\n```\r\n\r\n**Valid Example**\r\n\r\n```json\r\n{\r\n \"/users\": {\r\n```",
      "message": "Path should not end with slash."
    },
    "path-not-include-query": {
      "id": "H-0RqM4cyMZzuolro7nO0",
      "given": [
        "#Path_Object"
      ],
      "severity": "warn",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\?"
        },
        "field": "@key"
      },
      "name": "path-not-include-query",
      "description": "Paths should not include `query` string items. Instead, add them as parameters with `in: query`.\r\n\r\n**Invalid Example**\r\n\r\n```json\r\n{\r\n \"/users/{?id}\": {\r\n\r\n```\r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{\r\n  \"parameters\": [\r\n    {\r\n      \"schema\": {\r\n        \"type\": \"string\"\r\n      },\r\n      \"name\": \"id\",\r\n      \"in\": \"path\",\r\n      \"required\": true,\r\n      \"description\": \"User's ID\"\r\n    }\r\n  ]\r\n}\r\n\r\n```",
      "message": "Path should not include query string."
    },
    "tag-description": {
      "id": "GB8ao6Spb3jWLGKqE6ThZ",
      "given": [
        "#API_Tags_Item"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "description"
      },
      "name": "tag-description",
      "description": "Tags defined at the global level should have a description.\r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{\r\n   \"tags\": [\r\n      {\r\n         \"name\":\"Users\",\r\n         \"description\":\"End-user information\"\r\n      }\r\n   ]\r\n}\r\n```",
      "message": "Tag object should have \"description\"."
    },
    "api-servers": {
      "id": "TQeXXTCmGDLqomPEHuCX_",
      "given": [
        "#API_Server"
      ],
      "severity": "warn",
      "then": {
        "function": "schema",
        "functionOptions": {
          "schema": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object"
            }
          },
          "dialect": "draft7"
        }
      },
      "name": "api-servers",
      "description": "A server should be defined at the root document level. This can be localhost, a development server, or a production server. \n\n**Valid OpenAPI V3 Example**\n\n```json\n{\n  \"servers\": [\n    {\n      \"url\": \"https://staging.myprodserver.com/v1\",\n      \"description\": \"Staging server\"\n    },\n    {\n      \"url\": \"https://myprodserver.com/v1\",\n      \"description\": \"Production server\"\n    }\n  ]\n}\n```\n\n**Valid OpenAPI V2 Example**\n\n```json\n{\n  \"host\": \"myprodserver.com\",\n  \"basePath\": \"/v2\",\n  \"schemes\": [\n    \"https\"\n  ]\n}\n```\n\n",
      "message": "Server should be present."
    },
    "server-trailing-slash": {
      "id": "m-QzfrsnL43XldOces0ak",
      "given": [
        "#API_Server_URL"
      ],
      "severity": "warn",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "/$"
        }
      },
      "name": "server-trailing-slash",
      "description": "Server URLs should not end in forward slashes. This is a best practice for working with web tooling, such as mock servers, code generators, application frameworks, and more).\r\n\r\n**Invalid Example**\r\n\r\n```json lineNumbers\r\n{  \r\n  \"servers\": [\r\n    {\r\n      ... ,\r\n      \"url\": \"https://api.openweathermap.org/data/2.5/\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{  \r\n  \"servers\": [\r\n    {\r\n      ... ,\r\n      \"url\": \"https://api.openweathermap.org/data/2.5\"\r\n    }\r\n  ]\r\n}\r\n```",
      "message": "Server URL should not have trailing slash"
    },
    "operation-success-response": {
      "id": "zsdtazgRTHgGwNsQVjKvb",
      "given": [
        "#Operation_Object"
      ],
      "severity": "warn",
      "then": {
        "function": "oasOpSuccessResponse",
        "field": "responses"
      },
      "name": "operation-success-response",
      "description": "Operations should have at least one \"2xx\" or \"3xx\" response defined.\r\n\r\n**Invalid Example**\r\n\r\n```json lineNumbers\r\n{\r\n  \"get\": {\r\n      ... ,\r\n      \"responses\": {},\r\n  }\r\n}\r\n```\r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{\r\n  \"get\": {\r\n      ... ,\r\n      \"responses\": {\r\n        \"200\": {\r\n          \"description\": \"OK\"\r\n        }\r\n      },\r\n  }\r\n}\r\n```",
      "message": "Operation should have at least one \"2xx\" or \"3xx\" response."
    },
    "path-params": {
      "id": "1fnq5DrhV74pKOC5q0tb7",
      "given": [
        "#API_Document"
      ],
      "severity": "error",
      "then": {
        "function": "oasPathParam"
      },
      "name": "path-params",
      "description": "Path parameters must be defined and valid in either the `path-parameters` or the `operation-parameters` object. Likewise, defined `path-parameters` or `operation-parameters` must be used in the `paths` string.\r\n\r\n**Valid Example**\r\n\r\nFor this path:\r\n\r\n`/users/{id}/{location}`\r\n\r\nThe following path parameters must be defined.\r\n\r\n```json lineNumbers\r\n      \"parameters\": [\r\n        {\r\n          \"schema\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"name\": \"id\",\r\n          \"in\": \"path\",\r\n          \"required\": true,\r\n          \"description\": \"This is the user's ID\"\r\n        },\r\n        {\r\n          \"schema\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"name\": \"location\",\r\n          \"in\": \"path\",\r\n          \"required\": true,\r\n          \"description\": \"This is the user's location\"\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  ```",
      "message": "{{error}}"
    },
    "operation-parameters": {
      "id": "LKhAq3eQqGGMAA9hL-LHJ",
      "given": [
        "#Operation_Object"
      ],
      "severity": "warn",
      "then": {
        "function": "oasOpParams",
        "field": "parameters"
      },
      "name": "operation-parameters",
      "description": "Operation parameters should be unique and non-repeating:\r\n\r\n* `name` and `in` must be unique\r\n\r\nFor OAS2:\r\n\r\n* Operations should not have `in: body` and `in: formData` parameters.\r\n* Operations should have only one `in: body` parameter.\r\n\r\n**Invalid Example**\r\n\r\nIn this example, the query paramater `\"name\": \"last name\"` is repeated.\r\n\r\n```json lineNumbers\r\n{\r\n  \"parameters\": [\r\n    {\r\n      \"schema\": {\r\n        \"type\": \"string\"\r\n      },\r\n      \"in\": \"query\",\r\n      \"name\": \"last name\",\r\n      \"description\": \"User's last name\"\r\n    },\r\n    {\r\n      \"schema\": {\r\n        \"type\": \"string\"\r\n      },\r\n      \"in\": \"query\",\r\n      \"name\": \"last name\",\r\n      \"description\": \"User's last name\"\r\n    }\r\n  ],\r\n}\r\n```\r\n\r\n**Valid Example**\r\n\r\nIn this example, query parameters are unique.\r\n\r\n```json lineNumbers\r\n{\r\n  \"parameters\": [\r\n    {\r\n      \"schema\": {\r\n        \"type\": \"string\"\r\n      },\r\n      \"in\": \"query\",\r\n      \"name\": \"first name\",\r\n      \"description\": \"User's first name\"\r\n    },\r\n    {\r\n      \"schema\": {\r\n        \"type\": \"string\"\r\n      },\r\n      \"in\": \"query\",\r\n      \"name\": \"last name\",\r\n      \"description\": \"User's last name\"\r\n    }\r\n  ],\r\n}\r\n```",
      "message": "Operation parameters are unique and non-repeating."
    },
    "typed-enum": {
      "id": "q2X7uwbSMXuGkjKfo16BV",
      "given": [
        "$..[?(@ && @.enum && @.type)]"
      ],
      "severity": "warn",
      "then": {
        "function": "typedEnum"
      },
      "name": "typed-enum",
      "description": "All `enum' values should respect the specified type.\r\n\r\n**Invalid Example**\r\n\r\nIn this example, the `enum` type is `integer`, but the values are strings.\r\n\r\n```json lineNumbers\r\n{\r\n    \"schema\": {\r\n      \"type\": \"integer\",\r\n      \"enum\": [\r\n         \"standard\",\r\n         \"metric\",\r\n         \"imperial\"\r\n       ]\r\n     },\r\n```\r\n\r\n**Valid Example**\r\n\r\nIn this example, the `enum` type is `string` and the values are strings.\r\n\r\n```json lineNumbers\r\n{\r\n    \"schema\": {\r\n      \"type\": \"string\",\r\n      \"enum\": [\r\n         \"standard\",\r\n         \"metric\",\r\n         \"imperial\"\r\n       ]\r\n     },",
      "message": "{{error}}"
    },
    "oas2-schema": {
      "id": "v7vUCafqFP5BeBEA29m0J",
      "given": [
        "#API_Document"
      ],
      "severity": "error",
      "then": {
        "function": "oasDocumentSchema"
      },
      "name": "oas2-schema",
      "description": "This Stoplight core rule validates the structure of OpenAPI v2 specification. This rule should never be disabled.",
      "message": "{{error}}",
      "formats": [
        "oas2"
      ]
    },
    "oas3-schema": {
      "id": "aQu-DM6UeFRWEeE6ZzsBP",
      "given": [
        "#API_Document"
      ],
      "severity": "error",
      "then": {
        "function": "oasDocumentSchema"
      },
      "name": "oas3-schema",
      "description": "This Stoplight core rule validates the structure of OpenAPI v3.x specification. This rule should never be disabled.",
      "message": "{{error}}",
      "formats": [
        "oas3"
      ]
    },
    "oas3-unused-component": {
      "id": "dVkgfaXwEG3nJY9QbOAnq",
      "given": [
        "#API_Document"
      ],
      "severity": "warn",
      "then": {
        "function": "oasUnusedComponent"
      },
      "name": "oas3-unused-component",
      "description": "A potentially shareable component is not being used. This may be expected, but you should review sharable components to avoid duplicate entry.",
      "message": "{{error}}",
      "formats": [
        "oas3"
      ]
    },
    "operation-operationId-unique": {
      "id": "_y2zJuuVhA5k74EGosXHU",
      "given": [
        "#API_Document"
      ],
      "severity": "error",
      "then": {
        "function": "oasOpIdUnique"
      },
      "name": "operation-operationId-unique",
      "description": "Every operation in a single document must have a unique `operationID`.\r\n\r\n**Valid Example**\r\n\r\nIn this example, the `operationId` is `get-users`. This `operationId` must be unique in an API document.\r\n\r\n```json lineNumbers\r\n{\r\n  \"get\": {\r\n        \"summary\": \"Get users\",\r\n        ... ,\r\n        \"operationId\": \"get-users\"\r\n      }\r\n}\r\n```\r\n",
      "message": "Every operation must have unique operationId"
    },
    "oas2-operation-formData-consume-check": {
      "id": "e36FGb9M_POliMT7SJRWP",
      "given": [
        "#Operation_Object"
      ],
      "severity": "error",
      "then": {
        "function": "oasOpFormDataConsumeCheck"
      },
      "name": "oas2-operation-formData-consume-check",
      "description": "Operations with an `in: formData` parameter must include a `consumes` property with one of these values:\r\n\r\n`application/x-www-form-urlencoded`\r\n\r\n`multipart/form-data`\r\n\r\n**Valid Example**\r\n\r\nIn this example, the `consumes` property correctly includes the `multipart/form-data` value.\r\n\r\n```json lineNumbers\r\n{\r\n   \"post\":{\r\n      \"summary\":\"Uploads a file\",\r\n      \"consumes\":[\r\n         \"multipart/form-data\"\r\n      ],\r\n      \"parameters\":[\r\n         {\r\n            \"name\":\"name\",\r\n            \"in\":\"formData\",\r\n            \"description\":\"Upload a file\",\r\n            \"required\":false,\r\n            \"type\":\"string\"\r\n         }\r\n      ]\r\n   }\r\n}",
      "message": "Operations with \"in: formData\" parameter must include \"application/x-www-form-urlencoded\" or \"multipart/form-data\" in their \"consumes\" property.",
      "formats": [
        "oas2"
      ]
    },
    "operation-tag-defined": {
      "id": "1_Z-nN2TvoOFPp3x9mB1p",
      "given": [
        "#API_Document"
      ],
      "severity": "warn",
      "then": {
        "function": "oasTagDefined"
      },
      "name": "operation-tag-defined",
      "description": "Tags defined at the operation level should also be defined at the global level. \r\n\r\n**Operation-level Example**\r\n\r\n```json lineNumbers\r\n{\r\n  \"get\": {\r\n     ... ,\r\n     ... ,\r\n     \"tags\": [\r\n        \"Users\"\r\n     ],\r\n  }\r\n}  \r\n```\r\n\r\n**Global-level Example**\r\n\r\n```json lineNumbers\r\n{\r\n  \"tags\": [\r\n     {\r\n       \"name\": \"Users\",\r\n       ... ,\r\n     }\r\n  ],\r\n}\r\n\r\n```",
      "message": "Operation tags must be defined in global tags"
    },
    "no-$ref-siblings": {
      "id": "Y28Oq0ld59JDPQDscoxiQ",
      "given": [
        "#All_Ref"
      ],
      "severity": "error",
      "then": {
        "function": "refSiblings"
      },
      "name": "no-$ref-siblings",
      "description": "Property must not be placed among $ref.",
      "message": "{{error}}",
      "formats": [
        "oas3.0",
        "oas2"
      ]
    },
    "oas2-operation-security-defined": {
      "id": "e0MTySPdrdYYtMjjpBjGX",
      "given": [
        "#API_Document"
      ],
      "severity": "warn",
      "then": {
        "function": "oasOpSecurityDefined",
        "functionOptions": {
          "schemesPath": [
            "securityDefinitions"
          ]
        }
      },
      "name": "oas2-operation-security-defined",
      "description": "Operation `security` values must match a scheme defined in the global `securityDefinitions` object. Empty `security` values for operations are ignored if authentication is not explicity required or is optional.\r\n\r\n**Valid Example**\r\n\r\nFor this global security scheme:\r\n\r\n```json lineNumbers\r\n{\r\n  \"securityDefinitions\": {\r\n    \"API Key\": {\r\n      \"name\": \"API Key\",\r\n      \"type\": \"apiKey\",\r\n      \"in\": \"query\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis is a valid operation security value:\r\n\r\n```json lineNumbers\r\n{  \"operationId\": \"get-users-userId\",\r\n        \"security\": [\r\n          {\r\n            \"API Key\": []\r\n          }\r\n        ]\r\n}\r\n```\r\n\r\n**Invalid Example**\r\n\r\nFor the same global security scheme, this is an invalid operation security value:\r\n\r\n```json lineNumbers\r\n{  \"operationId\": \"get-users-userId\",\r\n        \"security\": [\r\n          {\r\n            \"oath2\": []\r\n          }\r\n        ]\r\n}\r\n```",
      "message": "{{error}}",
      "formats": [
        "oas2"
      ]
    },
    "oas3-operation-security-defined": {
      "id": "n5AsR_uOoz7gVKbNQTcOW",
      "given": [
        "#API_Document"
      ],
      "severity": "warn",
      "then": {
        "function": "oasOpSecurityDefined",
        "functionOptions": {
          "schemesPath": [
            "components",
            "securitySchemes"
          ]
        }
      },
      "name": "oas3-operation-security-defined",
      "description": "Operation `security` values must match a scheme defined in the global `components.security.Schemes` object. \r\n\r\n**Valid Example**\r\n\r\nFor this global security scheme:\r\n\r\n```json lineNumbers\r\n{\r\n\"components\": {\r\n  \"security\": [\r\n    {\r\n      \"app-id\": []\r\n    }\r\n  ]\r\n }\r\n}\r\n```\r\n\r\n`app-id` is a valid operation `security` value:\r\n\r\n```json lineNumbers\r\n{  \r\n    \"get\": {\r\n        \"security\": [\r\n          {\r\n            \"app-id\": []\r\n          }\r\n      ]\r\n  }\r\n}  \r\n```\r\n\r\n**Invalid Example**\r\n\r\nFor the same global security scheme, `oath2` is an invalid operation `security` value:\r\n\r\n```json lineNumbers\r\n{  \r\n    \"get\": {\r\n        \"security\": [\r\n          {\r\n            \"oath2\": []\r\n          }\r\n      ]\r\n  }\r\n}  \r\n```",
      "message": "{{error}}",
      "formats": [
        "oas3"
      ]
    },
    "duplicated-entry-in-enum": {
      "id": "xsG_3YrMh-PXvr0OHJJCn",
      "given": [
        "#All_Enum_Object"
      ],
      "severity": "warn",
      "then": {
        "function": "oasSchema",
        "functionOptions": {
          "schema": {
            "type": "array",
            "uniqueItems": true
          }
        },
        "field": "enum"
      },
      "name": "duplicated-entry-in-enum",
      "description": "All enum values should be unique.\r\n\r\n**Invalid Example**\r\n\r\nThere are two `json` enum values.\r\n\r\n```json lineNumbers\r\n{\r\n  \"schema\":{\r\n     \"type\":\"string\",\r\n       \"enum\":[\r\n          \"json\",\r\n          \"json\",\r\n          \"html\"\r\n   ]\r\n }\r\n}\r\n```\r\n**Valid Example**\r\n\r\nAll enum values are unique.\r\n\r\n```json lineNumbers\r\n{\r\n  \"schema\":{\r\n     \"type\":\"string\",\r\n       \"enum\":[\r\n          \"json\",\r\n          \"xml\",\r\n          \"html\"\r\n   ]\r\n }\r\n}\r\n```",
      "message": "{{error}}"
    },
    "oas2-api-schemes": {
      "id": "mCfex1aa_m1Q1rOv-h_sy",
      "given": [
        "#API_Document"
      ],
      "severity": "error",
      "then": {
        "function": "schema",
        "functionOptions": {
          "schema": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "dialect": "draft7"
        },
        "field": "schemes"
      },
      "name": "oas2-api-schemes",
      "description": "OpenAPI 2 host `schemes` reflect the transfer protocol of the API. Host schemes must be present and an array with one or more of these values: `http`, `https`, `ws`, or `wss`.\r\n\r\n**Valid Example**\r\n\r\nThis example shows that host schemes are `http` and `https`.\r\n\r\n```json\r\n{\r\n   \"schemes\":[\r\n      \"http\",\r\n      \"https\"\r\n   ]\r\n}\r\n \r\n```",
      "message": "OpenAPI host \"schemes\" must be present and non-empty array",
      "formats": [
        "oas2"
      ]
    },
    "oas2-discriminator": {
      "id": "FUxVUuqsZsBT0eM6d_Bf6",
      "given": [
        "#API_Document"
      ],
      "severity": "error",
      "then": {
        "function": "oasDiscriminator",
        "field": "definitions[?(@.discriminator)]"
      },
      "name": "oas2-discriminator",
      "description": "Discriminator property must be defined and required",
      "message": "Discriminator property must be defined and required",
      "formats": [
        "oas2"
      ]
    },
    "server-not-example": {
      "id": "pnykdfNga-YiNNu6SKXcH",
      "given": [
        "#API_Server_URL"
      ],
      "severity": "warn",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "example.com"
        }
      },
      "name": "server-not-example",
      "description": "Server URLs must not direct to example.com. This helps ensure URLs are valid before you distribute your API document.\r\n\r\n**Invalid Example**\r\n\r\n```json lineNumbers\r\n{  \r\n  \"servers\": [\r\n    {\r\n      ... ,\r\n      \"url\": \"https://example.com\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{  \r\n  \"servers\": [\r\n    {\r\n      ... ,\r\n      \"url\": \"https://api.openweathermap.org/data/2.5\"\r\n    }\r\n  ]\r\n}\r\n```",
      "message": "Server URL must not point at example.com."
    },
    "parameter-description": {
      "id": "wMKeO2MQflHMBW3vG1IPC",
      "given": [
        "#Request_Parameter_All"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "description"
      },
      "name": "parameter-description",
      "description": "All `parameter` objects should have a description.\r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{\r\n  \"parameters\": [\r\n    {\r\n      \"schema\": {\r\n        \"type\": \"integer\"\r\n      },\r\n      ... ,\r\n      ... ,\r\n      \"description\": \"The number of days to include in the response.\"\r\n    }\r\n}\r\n```\r\n",
      "message": "Parameter objects must have \"description\"."
    },
    "oas2-anyOf": {
      "id": "g29n4P-cIH2Y_EXuk-NzI",
      "given": [
        "#API_Document_RecursiveSearch"
      ],
      "severity": "warn",
      "then": {
        "function": "undefined",
        "field": "anyOf"
      },
      "name": "oas2-anyOf",
      "description": "The `anyOf` keyword is not supported in OAS2. Only `allOf` is supported.\r\n\r\n**Invalid Example**\r\n\r\n```json lineNumbers\r\n{\r\n   \"schema\": {\r\n     \"anyOf\": [\r\n       {\r\n         \"properties\": {\r\n           \"firstName\": {\r\n             \"type\": \"string\"\r\n            },\r\n           \"lastName\": {\r\n             \"type\": \"string\"\r\n            }\r\n          }\r\n        },\r\n        {}\r\n      ],\r\n   }\r\n}\r\n```\r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{\r\n  \"schema\": {\r\n              \"type\": \"object\",\r\n              \"properties\": {\r\n                \"firstName\": {\r\n                  \"type\": \"string\"\r\n                },\r\n                \"lastName\": {\r\n                  \"type\": \"string\"\r\n                }\r\n             },\r\n           }\r\n}\r\n```",
      "message": "anyOf is not available in OpenAPI v2, it was added in OpenAPI v3",
      "formats": [
        "oas2"
      ]
    },
    "oas2-oneOf": {
      "id": "N16ty_Xj3RSIX0tNc1ZoB",
      "given": [
        "#API_Document_RecursiveSearch"
      ],
      "severity": "warn",
      "then": {
        "function": "undefined",
        "field": "oneOf"
      },
      "name": "oas2-oneOf",
      "description": "The `oneOf` keyword is not supported in OAS2. Only `allOf` is supported.\r\n\r\n**Invalid Example**\r\n\r\n```json lineNumbers\r\n{\r\n   \"schema\": {\r\n     \"oneOf\": [\r\n       {\r\n         \"properties\": {\r\n           \"firstName\": {\r\n             \"type\": \"string\"\r\n            },\r\n           \"lastName\": {\r\n             \"type\": \"string\"\r\n            }\r\n          }\r\n        },\r\n        {}\r\n      ],\r\n   }\r\n}\r\n```\r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{\r\n  \"schema\": {\r\n              \"type\": \"object\",\r\n              \"properties\": {\r\n                \"firstName\": {\r\n                  \"type\": \"string\"\r\n                },\r\n                \"lastName\": {\r\n                  \"type\": \"string\"\r\n                }\r\n             },\r\n           }\r\n}\r\n```",
      "message": "oneOf is not available in OpenAPI v2, it was added in OpenAPI v3",
      "formats": [
        "oas2"
      ]
    },
    "oas3-examples-value-or-externalValue": {
      "id": "vlUv5vvZl6T_g5dAo2Zl7",
      "given": [
        "#All_Example"
      ],
      "severity": "warn",
      "then": {
        "function": "xor",
        "functionOptions": {
          "properties": [
            "externalValue",
            "value"
          ]
        }
      },
      "name": "oas3-examples-value-or-externalValue",
      "description": "The `examples` object should include a `value` or `externalValue` field, but cannot include both.\r\n\r\n**Invalid Example**\r\n\r\nThis example includes both a `value` field and an `externalValue` field.\r\n\r\n```json lineNumbers\r\n{\r\n    \"examples\": {\r\n      \"example-1\": {\r\n        \"value\": {\r\n          \"id\": \"string\",\r\n          \"name\": \"string\"\r\n       },\r\n        \"externalValue\": {\r\n          \"id\": \"string\",\r\n           \"name\": \"string\"\r\n         }\r\n      }\r\n   }\r\n}\r\n```\r\n\r\n**Valid Example** \r\n\r\nThis example includes only a `value` field.\r\n\r\n```json lineNumbers\r\n{\r\n     \"examples\": {\r\n       \"example-1\": {\r\n         \"value\": {\r\n            \"id\": \"string\",\r\n            \"name\": \"string\"\r\n       }\r\n    }\r\n  }\r\n}",
      "message": "Examples must have either \"value\" or \"externalValue\" field.",
      "formats": [
        "oas3"
      ]
    },
    "oas2-valid-schema-example": {
      "id": "xCKG8P3McfvZ4dKerVUZ2",
      "given": [
        "#All_Example_Schema"
      ],
      "severity": "error",
      "then": {
        "function": "oasExample",
        "functionOptions": {
          "oasVersion": 2,
          "schemaField": "$",
          "type": "schema"
        }
      },
      "name": "oas2-valid-schema-example",
      "description": "Examples must be valid against their defined schema. \r\n\r\n**Valid Example**\r\n\r\nThe following schema includes the `name` and `petType` properties.  \r\n\r\n```json lineNumbers\r\n{\r\n   \"Pet\":{\r\n      \"type\":\"object\",\r\n      \"properties\":{\r\n         \"name\":{\r\n            \"type\":\"string\"\r\n         },\r\n         \"petType\":{\r\n            \"type\":\"string\"\r\n         }\r\n      }\r\n   }\r\n}\r\n```\r\n\r\nWhen referenced in a response example, the property names on line 6 and 7 must match those in the schema (`petName` and `petType`).\r\n\r\n```json lineNumbers\r\n{\r\n   \"responses\":{\r\n      \"200\":{\r\n         \"content\":{\r\n            \"application/json\":{\r\n               \"examples\":{\r\n                  \"Pet Example\":{\r\n                     \"petName\":\"Bubbles\",\r\n                     \"petType\":\"Dog\"\r\n                  }\r\n               },\r\n               \"schema\":{\r\n                  \"$ref\":\"#/definitions/Pet\"\r\n               }\r\n            }\r\n         }\r\n      }\r\n   }\r\n}\r\n```",
      "message": "{{error}}",
      "formats": [
        "oas2"
      ]
    },
    "oas3-valid-schema-example": {
      "id": "FyPSwiykWRtQK_ZsPpKWb",
      "given": [
        "#All_Example_Schema"
      ],
      "severity": "error",
      "then": {
        "function": "oasExample",
        "functionOptions": {
          "oasVersion": 3,
          "schemaField": "$",
          "type": "schema"
        }
      },
      "name": "oas3-valid-schema-example",
      "description": "Examples must be valid against their defined schema. \r\n\r\n**Valid Example**\r\n\r\nThe following schema includes the `name` and `petType` properties.  \r\n\r\n```json lineNumbers\r\n{\r\n   \"Pet\":{\r\n      \"type\":\"object\",\r\n      \"properties\":{\r\n         \"name\":{\r\n            \"type\":\"string\"\r\n         },\r\n         \"petType\":{\r\n            \"type\":\"string\"\r\n         }\r\n      }\r\n   }\r\n}\r\n```\r\n\r\nWhen referenced in a response example, the property names on line 6 and 7 must match those in the schema (`petName` and `petType`).\r\n\r\n```json lineNumbers\r\n{\r\n   \"responses\":{\r\n      \"200\":{\r\n         \"content\":{\r\n            \"application/json\":{\r\n               \"examples\":{\r\n                  \"Pet Example\":{\r\n                     \"petName\":\"Bubbles\",\r\n                     \"petType\":\"Dog\"\r\n                  }\r\n               },\r\n               \"schema\":{\r\n                  \"$ref\":\"#/definitions/Pet\"\r\n               }\r\n            }\r\n         }\r\n      }\r\n   }\r\n}\r\n```",
      "message": "{{error}}",
      "formats": [
        "oas3"
      ]
    },
    "oas2-valid-media-example": {
      "id": "DVVa0VnZELnE-fXepRVOD",
      "given": [
        "#All_Example_Media"
      ],
      "severity": "error",
      "then": {
        "function": "oasExample",
        "functionOptions": {
          "oasVersion": 2,
          "schemaField": "schema",
          "type": "media"
        }
      },
      "name": "oas2-valid-media-example",
      "description": "Examples must be valid against their defined schema. Common reasons you may see errors if:\r\n\r\n* The value used for property examples is not the same type indicated in the schema (string vs. integer, for example).\r\n* Examples contain properties not included in the schema.\r\n\r\n**Valid Example**\r\n\r\nThe following schema indicates that the `id` property is a `string` type.  \r\n\r\n```json lineNumbers\r\n\"User\":{\r\n   \"title\":\"User\",\r\n   \"type\":\"object\",\r\n   \"properties\":{\r\n      \"id\":{\r\n         \"type\":\"string\"\r\n      }\r\n   }\r\n}\r\n```\r\nWhen the example is referenced in a response, the `id` property must be `string`.\r\n\r\n```json lineNumbers\r\n{\r\n   \"responses\":{\r\n      \"200\":{\r\n         \"description\":\"User Found\",\r\n         \"schema\":{\r\n            \"$ref\":\"#/definitions/User\"\r\n         },\r\n         \"examples\":{\r\n            \"Get User Alice Smith\":{\r\n               \"id\": \"smith, alice\",\r\n            }\r\n         }\r\n      },\r\n```",
      "message": "{{error}}",
      "formats": [
        "oas2"
      ]
    },
    "oas3-valid-media-example": {
      "id": "rCtWVIs9L6jnLFf5A6-ry",
      "given": [
        "#All_Example_Media"
      ],
      "severity": "error",
      "then": {
        "function": "oasExample",
        "functionOptions": {
          "oasVersion": 3,
          "schemaField": "schema",
          "type": "media"
        }
      },
      "name": "oas3-valid-media-example",
      "description": "The following schema includes the `name` and `petType` properties.  \r\n\r\n**Valid Example**\r\n\r\n```json lineNumbers\r\n{\r\n   \"Pet\":{\r\n      \"type\":\"object\",\r\n      \"properties\":{\r\n         \"name\":{\r\n            \"type\":\"string\"\r\n         },\r\n         \"petType\":{\r\n            \"type\":\"string\"\r\n         }\r\n      }\r\n   }\r\n}\r\n```\r\n\r\nWhen referenced in a response example, the property names on line 6 and 7 must match those in the schema (`petName` and `petType`).\r\n\r\n```json lineNumbers\r\n{\r\n   \"responses\":{\r\n      \"200\":{\r\n         \"content\":{\r\n            \"application/json\":{\r\n               \"examples\":{\r\n                  \"Pet Example\":{\r\n                     \"petName\":\"Bubbles\",\r\n                     \"petType\":\"Dog\"\r\n                  }\r\n               },\r\n               \"schema\":{\r\n                  \"$ref\":\"#/definitions/Pet\"\r\n               }\r\n            }\r\n         }\r\n      }\r\n   }\r\n}\r\n```",
      "message": "{{error}}",
      "formats": [
        "oas3"
      ]
    },
    "oas3-server-variables": {
      "id": "52Gt-L2SeXelBlWWIp242",
      "given": [
        "#All_Servers"
      ],
      "severity": "error",
      "then": {
        "function": "serverVariables",
        "functionOptions": {
          "checkSubstitutions": true
        }
      },
      "name": "oas3-server-variables",
      "description": "This rule ensures that server variables defined in OpenAPI Specification 3 (OAS3) and 3.1 are valid, not unused, and result in a valid URL. Properly defining and using server variables is crucial for the accurate representation of API endpoints and preventing potential misconfigurations or security issues.\n\n**Recommended**: Yes\n\n**Bad Examples**\n\n1. **Missing definition for a URL variable**:\n\n```yaml\nservers:\n  - url: \"https://api.{region}.example.com/v1\"\n    variables:\n      version:\n        default: \"v1\"\n```\n\nIn this example, the variable **`{region}`** in the URL is not defined within the **`variables`** object.\n\n2. **Unused URL variable:**\n\n```yaml\nservers:\n  - url: \"https://api.example.com/v1\"\n    variables:\n      region:\n        default: \"us-west\"\n```\n\nHere, the variable **`region`** is defined but not used in the server URL.\n\n3. **Invalid default value for an allowed value variable**:\n\n```yaml\nservers:\n  - url: \"https://api.{region}.example.com/v1\"\n    variables:\n      region:\n        default: \"us-south\"\n        enum:\n          - \"us-west\"\n          - \"us-east\"\n```\n\nThe default value 'us-south' isn't one of the allowed values in the **`enum`**.\n\n4. **Invalid resultant URL**:\n\n```yaml\nservers:\n  - url: \"https://api.example.com:{port}/v1\"\n    variables:\n      port:\n        default: \"8o80\"\n```\n\nSubstituting the default value of **`{port}`** results in an invalid URL.\n\n**Good Example**\n\n```yaml\nservers:\n  - url: \"https://api.{region}.example.com/{version}\"\n    variables:\n      region:\n        default: \"us-west\"\n        enum:\n          - \"us-west\"\n          - \"us-east\"\n      version:\n        default: \"v1\"\n```\n\nIn this example, both **`{region}`** and **`{version}`** variables are properly defined and used in the server URL. Also, the default value for **`region`** is within the allowed values.",
      "message": "{{error}}",
      "formats": [
        "oas3"
      ]
    }
  },
  "x-embeddedFunctions": [
    {
      "id": "KhZuDfmWZMQPmlsvXyQY9",
      "extendedFrom": "",
      "name": "checkRequirements",
      "content": "import { createRulesetFunction } from '@stoplight/spectral-core';\n\n// List of attributes to be checked\n// For all attributes in ATTRIBUTES_TO_CHECK, this Spectral rule will make sure:\n// * if attribute is in the Spec - the attribute MUST also be in the requirements\n// * if attribute is in the requirements - then it also need to be in the Spec\nconst ATTRIBUTES_TO_CHECK= ['type', 'maxLength', 'pattern', 'enum', 'format', 'deprecated', 'discriminator', 'exclusiveMaximum',\n  'exclusiveMinimum', 'maximum', 'minimum', 'minItems', 'required', 'nullable', 'items', 'title'];\n\n// List of Objects that must follow the CloudEvent Notification pattern\nconst DCSA_CLOUDEVENT_GROUP = { ShippingInstructionsNotification: {},TransportDocumentNotification: {}, BookingNotification: {}, ArrivalNoticeNotification: {} };\n\n// Spectral will **ONLY** check the standards in this list (in the future all APIs should be covered).\nconst COVERED_STANDARDS = new Set([\n  // Booking Beta 1 Notification\n  'BKG_NTF_v2.0.0-Beta-1.yaml',\n  // Booking Beta 2\n  'BKG_v2.0.0-Beta-2.yaml', 'BKG_NTF_v2.0.0-Beta-2.yaml',\n  // Booking Beta 3\n  'BKG_v2.0.0-Beta-3.yaml', 'BKG_NTF_v2.0.0-Beta-3.yaml',\n  // EBL Beta 1 Notification\n  'ebl_ntf_v3.0.0-Beta-1.yaml',\n  // EBL Beta 2\n  'EBL_v3.0.0-Beta-2.yaml', 'EBL_NTF_v3.0.0-Beta-2.yaml', 'EBL_ISS_v3.0.0-Beta-2.yaml', 'EBL_ISS_RSP_v3.0.0-Beta-2.yaml', 'EBL_SUR_v3.0.0-Beta-2.yaml', 'EBL_SUR_RSP_v3.0.0-Beta-2.yaml',\n  // EBL Beta 3\n  'EBL_v3.0.0-Beta-3.yaml', 'EBL_NTF_v3.0.0-Beta-3.yaml', 'EBL_ISS_v3.0.0-Beta-3.yaml', 'EBL_ISS_RSP_v3.0.0-Beta-3.yaml', 'EBL_SUR_v3.0.0-Beta-3.yaml', 'EBL_SUR_RSP_v3.0.0-Beta-3.yaml'\n]);\n\n// Standard covering EBL Beta 2\nconst EBL_BETA2_GROUP = [\n  'EBL_v2.0.0-Beta-2.yaml', 'EBL_ISS_v2.0.0-Beta-2.yaml', 'EBL_ISS_RSP_v2.0.0-Beta-2.yaml',\n  'EBL_SUR_v2.0.0-Beta-2.yaml', 'EBL_SUR_RSP_v2.0.0-Beta-2.yaml'\n];\n\n// A list of accepted properties that have changed over time or are different for different standards\n// DEFAULT covers all remaining standards\n// \"GROUPS\" - e.g. EBL_BETA2_GROUP: this covers all standards in the EBL Beta 2 release (EBL, ISS, ISS_RSP, SUR, SUR_RSP, EBL_NFT, PINT)\n// - it is possible to define more groups in which the group need to be added next to where EBL_BETA2_GROUP is used\n// If 'parent' is specified - then the spec only allows the property under the list of parents\n// If no 'parent' is specified - the spec applies to all locations in the document\n// parents-specs overrule \"globalSpec\"\n// Enum and required fields (fields specified as lists) MUST be defined in same order\nconst DCSA_PROPERTIES = {\n  ActiveReeferSettings: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Active Reefer Settings', required: ['temperatureSetpoint', 'temperatureUnit']}, parents: {} },\n  },\n  activeReeferSettings: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Active Reefer Settings', required: ['temperatureSetpoint', 'temperatureUnit'], allOf: true}, parents: {RequestedEquipment: {} } },\n  },\n  additionalContainerCargoHandling: {\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 255}, parents: {DangerousGoods: {}}},\n  },\n  address: {\n    'DEFAULT'               : {parents: {AddressLocation: {$ref: '#/components/schemas/Address'}, BookingAgent: {$ref: '#/components/schemas/PartyAddress'}, Shipper: {$ref: '#/components/schemas/PartyAddress'}, Consignee: {$ref: '#/components/schemas/PartyAddress'}, ServiceContractOwner: {$ref: '#/components/schemas/PartyAddress'}, CarrierBookingOffice: {$ref: '#/components/schemas/Address'}, Party: {$ref: '#/components/schemas/PartyAddress'}}},\n  },\n  Address: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Address'}, parents: {}},\n  },\n  AddressLocation: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Address Location', required: ['locationType', 'address']}, parents: {}},\n  },\n  advanceManifestFilings: {\n    'DEFAULT':                {globalSpec: {type: 'array', items: {$ref: '#/components/schemas/AdvanceManifestFiling'}}, parents: {Booking: {} } },\n  },\n  AdvanceManifestFiling: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Advance Manifest Filing', required: ['manifestTypeCode', 'countryCode']}, parents: {}},\n  },\n  airExchangeSetpoint: {\n    'DEFAULT':                {globalSpec: {type: 'number', format: 'float', minimum: 0}, parents: {ActiveReeferSettings: {}} },\n  },\n  airExchangeUnit: {\n    'DEFAULT':                {globalSpec: {type: 'string', enum: ['MQH', 'FQH']}, parents: {ActiveReeferSettings: {}} },\n  },\n  amendedBookingStatus: {\n    'BKG_NTF_v2.0.0-Beta-2.yaml': {globalSpec: { type: 'string', maxLength: 50}, parents: {data: {}}},\n    'DEFAULT'               : {globalSpec: { type: 'string', maxLength: 50}, parents: {Booking: {}, BookingRefStatus: {}, BookingRefCancelledStatus: {}}},\n  },\n  Booking: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Booking', required: ['bookingStatus', 'receiptTypeAtOrigin', 'deliveryTypeAtDestination', 'cargoMovementTypeAtOrigin', 'cargoMovementTypeAtDestination', 'isPartialLoadAllowed', 'isExportDeclarationRequired', 'isImportLicenseRequired', 'communicationChannelCode', 'isEquipmentSubstitutionAllowed', 'shipmentLocations', 'requestedEquipments', 'documentParties']}, parents: {}},\n  },\n  bookingAgent: {\n    'DEFAULT'               : {globalSpec: {$ref: '#/components/schemas/BookingAgent'}, parents: {documentParties: {}}},\n  },\n  BookingAgent: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Booking Agent', required: ['partyName']}, parents: {} },\n  },\n  bookingChannelReference: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 20, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {}} },\n  },\n  BookingRefCancelledStatus: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Cancelled Booking Response', required: ['bookingStatus']}, parents: {}},\n  },\n  BookingRefStatus: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Booking Response', required: ['bookingStatus']}, parents: {}},\n  },\n  BookingNotification: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Booking Notification', required: ['specversion', 'id', 'source', 'type', 'time', 'datacontenttype', 'subscriptionReference', 'data']}, parents: {}},\n  },\n  bookingStatus: {\n    'BKG_NTF_v2.0.0-Beta-2.yaml': {globalSpec: { type: 'string', maxLength: 50}, parents: {data: {}}},\n    DEFAULT:                  {globalSpec: { type: 'string', maxLength: 50}, parents: {Booking: {}, BookingRefStatus: {}, BookingRefCancelledStatus: {}}},\n  },\n  calculationBasis: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 50, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {Charge: {}} },\n  },\n  callSign: {\n    'jit_v1.2.0-Beta-2.yaml' :{globalSpec: {type: 'string', maxLength: 10} }\n  },\n  cargoGrossVolume: {\n    'DEFAULT':                {globalSpec: {type: 'number', format: 'float', minimum: 0, exclusiveMinimum: true}, parents: {Commodity: {}} },\n  },\n  cargoGrossVolumeUnit: {\n    DEFAULT:                  {globalSpec: {type: 'string', enum: ['MTQ', 'FTQ']}, parent: {Commodity: {}}}\n  },\n  cargoGrossWeight: {\n    'DEFAULT':                {globalSpec: {type: 'number', format: 'float', minimum: 0, exclusiveMinimum: true}, parents: {Commodity: {}} },\n  },\n  cargoGrossWeightUnit: {\n    DEFAULT:                  {globalSpec: {type: 'string', enum: ['KGM', 'LBR']}, parent: {Commodity: {}}}\n  },\n  cargoMovementTypeAtOrigin: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 3}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {}} },\n  },\n  cargoMovementTypeAtDestination: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 3}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {}} },\n  },\n  carrierBookingOffice: {\n    'DEFAULT'               : {globalSpec: {$ref: '#/components/schemas/CarrierBookingOffice'}, parents: {documentParties: {}}},\n  },\n  CarrierBookingOffice: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Carrier Booking Office', required: ['partyName', 'UNLocationCode']}, parents: {} },\n  },\n  carrierBookingRequestReference: {\n    'BKG_NTF_v2.0.0-Beta-1.yaml': {globalSpec: {type: 'string', maxLength: 100, pattern: '^\\\\S+(\\\\s+\\\\S+)*$'} }, //BKG NTF 2.0.0 Beta 1\n    'BKG_NTF_v2.0.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 100, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {data: {}} },\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 100, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {UpdateBooking: {}, Booking: {}, BookingRefStatus: {}, BookingRefCancelledStatus: {}} },\n  },\n  carrierBookingReference: {\n    'BKG_NTF_v2.0.0-Beta-1.yaml': {globalSpec: {type: 'string', maxLength: 35, pattern: \"^\\\\S+(\\\\s+\\\\S+)*$\"} }, //BKG NTF 2.0.0 Beta 1\n    'BKG_NTF_v2.0.0-Beta-2.yaml':{globalSpec: {type: 'string', maxLength: 35, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {data: {} } },\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 35, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {UpdateBooking: {}, Booking: {}, BookingRefStatus: {}, BookingRefCancelledStatus: {}} }, //BKG NTF 2.0.0 Beta 1\n  },\n  carrierClauses: {\n    'DEFAULT':                {globalSpec: {type: 'array', items: {type: 'string', maxLength: 20000, pattern: '^\\\\S(?:.*\\\\S)?$'}}, parents: {Booking: {} } },\n  },\n  carrierExportVoyageNumber: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 50}},\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 50, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {}, Transport: {}} },\n  },\n  carrierImportVoyageNumber: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 50}},\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 50, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {Transport: {}} },\n  },\n  carrierServiceCode: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 5}},\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 11, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {}, Transport: {}} },\n  },\n  carrierServiceName: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 50, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {}} },\n  },\n  carrierTransportCallReference: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 100}, parents: {timestamp: {} }},\n  },\n  carrierVoyageNumber: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 50, deprecated: true}},\n  },\n  Charge: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Charge', required: ['chargeName', 'currencyAmount', 'currencyCode', 'paymentTermCode', 'calculationBasis', 'unitPrice', 'quantity']}, parents: {}},\n  },\n  chargeName: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 50, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {Charge: {}} },\n  },\n  charges: {\n    'DEFAULT':                {globalSpec: {type: 'array', items: {$ref: '#/components/schemas/Charge'}}, parents: {Booking: {} } },\n  },\n  city: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 65}, parents: {address: {} } },\n    'DEFAULT'               : {globalSpec: {type: 'string', maxLength: 65, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {address: {}, Address: {}, PartyAddress: {} } },\n  },\n  co2Setpoint: {\n    'DEFAULT':                {globalSpec: {type: 'number', format: 'float', minimum: 0, maximum: 100}, parents: {ActiveReeferSettings: {}} },\n  },\n  CocEquipment: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Carrier owned Equipment', required: ['isShipperOwned']}, parents: {} },\n  },\n  codedVariantList: {\n    'DEFAULT':                {globalSpec: {type: 'string', minLength: 4, maxLength: 4, pattern: '^[0-3][0-9A-Z]{3}$'}, parents: {DangerousGoods: {} } },\n  },\n  codeListName: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 100}, parents: {IdentifyingCode: {}, identifyingCode: {}} },\n  },\n  codeListProvider: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 100}, parents: {IdentifyingCode: {}} },\n  },\n  codeListResponsibleAgencyCode: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', deprecated: true, enum: ['5','6','11','20','54','182','274','296','306','399','zzz'] }, parents: {identifyingCode: {} }},\n  },\n  commodities: {\n    'DEFAULT':                {globalSpec: {type: 'array'}, parents: {RequestedEquipmentCarrier: {items: {$ref: '#/components/schemas/CommodityCarrier'}}, RequestedEquipmentShipper: {items: {$ref: '#/components/schemas/Commodity'}} } },\n  },\n  Commodity: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Commodity', required: ['commodityType', 'cargoGrossWeight', 'cargoGrossWeightUnit']}, parents: {} },\n  },\n  CommodityCarrier: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Commodity (Carrier)', allOf: true}, parents: {} },\n  },\n  commoditySubreference: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 100, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {CommodityCarrier: {}} },\n  },\n  commodityType: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 550, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {Commodity: {}} },\n  },\n  communicationChannelCode: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 2}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {}} },\n  },\n  competentAuthorityApproval: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 70, pattern:'^\\\\S(?:.*\\\\S)?$'}, parents: {DangerousGoods: {}} },\n  },\n  confirmedEquipments: {\n    'DEFAULT':                {globalSpec: {type: 'array', items: {$ref: '#/components/schemas/ConfirmedEquipment'}}, parents: {Booking: {} } },\n  },\n  ConfirmedEquipment: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Confirmed Equipment', required: ['ISOEquipmentCode', 'units']}, parents: {} },\n  },\n  consignee: {\n    'DEFAULT'               : {globalSpec: {$ref: '#/components/schemas/Consignee'}, parents: {documentParties: {}}},\n  },\n  Consignee: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Consignee', required: ['partyName']}, parents: {} },\n  },\n  contact: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 255}, parents: {EmergencyContactDetails: {}} },\n  },\n  contractQuotationReference: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 35, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {}} },\n  },\n  country: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 75}, parents: {address: {} }}\n  },\n  countryCode: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 2, minLength: 2, pattern: '^[A-Z]{2}$'}, parents: {address: {}, Address: {}, PartyAddress: {}, AdvanceManifestFiling: {}, TaxLegalReference: {}} },\n  },\n  CreateBooking: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Create Booking', required: ['receiptTypeAtOrigin', 'deliveryTypeAtDestination', 'cargoMovementTypeAtOrigin', 'cargoMovementTypeAtDestination', 'isPartialLoadAllowed', 'isExportDeclarationRequired', 'isImportLicenseRequired', 'communicationChannelCode', 'isEquipmentSubstitutionAllowed', 'shipmentLocations', 'requestedEquipments', 'documentParties']}, parents: {}},\n  },\n  currencyAmount: {\n    'DEFAULT':                {globalSpec: {type: 'number', format: 'float', minimum: 0}, parents: {Charge: {}} },\n  },\n  currencyCode: {\n    'DEFAULT':                {globalSpec: {type: 'string', pattern: '^[A-Z]{3}$', minLength: 3, maxLength: 3}, parents: {Charge: {}} },\n  },\n  cutOffDateTime: {\n    'DEFAULT':                {globalSpec: {type: 'string', format: 'date-time'}, parents: {ShipmentCutOffTime: {}} },\n  },\n  cutOffDateTimeCode: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 3}, parents: {ShipmentCutOffTime: {}} },\n  },\n  DCSAResponsibleAgencyCode: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', enum: ['ISO', 'UNECE', 'LLOYD', 'BIC', 'IMO', 'SCAC', 'ITIGG', 'ITU', 'SMDG', 'EXIS', 'FMC', 'CBSA', 'ZZZ'] }, parents: {identifyingCode: {} }},\n  },\n  dangerousGoods: {\n    'DEFAULT':                {globalSpec: {type: 'array', items: {$ref: '#/components/schemas/DangerousGoods'}}, parents: {OuterPackaging: {} } },\n  },\n  DangerousGoods: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Dangerous Goods', oneOf: true, required: ['properShippingName', 'imoClass', 'isMarinePollutant', 'isLimitedQuantity', 'isExceptedQuantity', 'isSalvagePackings', 'isEmptyUncleanedResidue', 'isWaste', 'isHot', 'isCompetentAuthorityApprovalProvided', 'isReportableQuantity', 'emergencyContactDetails', 'grossWeight']}, parents: {} },\n  },\n  data: {\n    DEFAULT:                  {globalSpec: {type: 'object'}, parents: {BookingNotification: {required: ['bookingStatus']}, ShippingInstructionsNotification: {required: ['shippingInstructionsStatus']}, TransportDocumentNotification: {required: ['transportDocumentStatus', 'transportDocumentReference']}} },\n  },\n  datacontenttype: {\n    DEFAULT:                  {globalSpec: {type: 'string', enum: ['application/json']}, parents: DCSA_CLOUDEVENT_GROUP },\n  },\n  declaredValue: {\n    'DEFAULT':                {globalSpec: {type: 'number', format: 'float', minimum: 0}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {}} },\n  },\n  declaredValueCurrency: {\n    'DEFAULT':                {globalSpec: {type: 'string', minLength: 3, maxLength: 3, pattern: '^[A-Z]{3}$'}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {}} },\n  },\n  delayReasonCode: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 3}}\n  },\n  deliveryTypeAtDestination: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 3, enum: ['CY', 'SD', 'CFS']}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {}} },\n  },\n  description: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 100}, parents: {OuterPackaging: {}, InnerPackaging: {} } },\n  },\n  destinationChargesPaymentTerm: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Destination Charges Payment Term'}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {} }, $ref: true},\n  },\n  dimensionUnit: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', enum: ['MTR', 'FOT']}, parent: {vessel: {}}}\n  },\n  dischargeLocation: {\n    'DEFAULT':                {parents: {Transport: {$ref:'#/components/schemas/DischargeLocation'} } },\n  },\n  DischargeLocation: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Discharge Location', oneOf: true}, parents: {} },\n  },\n  documentParties: {\n    'BKG_v2.0.0-Beta-2.yaml': {globalSpec: { type: 'object', required: ['bookingAgent']}, parents: {}},\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Document Parties'}, parents: {CreateBooking: {required: ['bookingAgent']}, UpdateBooking: {required: ['bookingAgent']}, Booking: {}}},\n  },\n  draft: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'number', format: 'float'}, parent: {vessel: {}}}\n  },\n  email: {\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 100, pattern: '^.+@\\\\S+$'} },\n  },\n  EmergencyContactDetails: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Emergency Contact Details', required: ['contact', 'phone']}, parents: {} },\n  },\n  emergencyContactDetails: {\n    DEFAULT:                  {globalSpec: {$ref: '#/components/schemas/EmergencyContactDetails'}, parents: {DangerousGoods: {} } },\n  },\n  EMSNumber: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 7}, parents: {DangerousGoods: {}} },\n  },\n  endOfHoldingTime: {\n    DEFAULT:                  {globalSpec: {type: 'string', format: 'date'}, parents: {DangerousGoods: {} }},\n  },\n  equipmentReferences: {\n    DEFAULT:                  {globalSpec: {type: 'array', items: {type: 'string', maxLength: 11, pattern: '^\\\\S(?:.*\\\\S)?$'}}, parents: {RequestedEquipment: {}}},\n  },\n  errorDateTime: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', format: 'date-time'}},\n    'DEFAULT'               : {globalSpec: {type: 'string', format: 'date-time'}, parents: {ErrorResponse: {}}},\n  },\n  errorCode: {\n    'DEFAULT'               : {globalSpec: {type: 'integer', format: 'int32', minimum: 7000, maximum: 9999}, parents: {DetailedError: {}, errors: {}}},\n  },\n  errorCodeMessage: {\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 200}, parents: {DetailedError: {}, errors: {}}},\n  },\n  errorCodeText: {\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 100}, parents: {DetailedError: {}, errors: {}}},\n  },\n  ErrorResponse: {\n    DEFAULT:                  {globalSpec: {type: 'object', title: 'Error Response', required: ['httpMethod', 'requestUri', 'statusCode', 'statusCodeText', 'errorDateTime', 'errors']}, parents: {} },\n  },\n  errors: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'array'}},\n    'BKG_v2.0.0-Beta2.yaml' : {globalSpec: {type: 'array', minItems: 1, items: {}}, parents: {ErrorResponse: {}}},\n    'DEFAULT'               : {globalSpec: {type: 'array', minItems: 1, items: {type: 'object', title: 'Detailed Error', required: ['errorCodeText', 'errorCodeMessage']}}, parents: {ErrorResponse: {}}},\n  },\n  eventClassifierCode: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', enum: ['PLN', 'ACT', 'REQ', 'EST']}},\n  },\n  eventCreatedDateTime: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', format: 'date-time'}}\n  },\n  eventDateTime: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', format: 'date-time'}},\n    DEFAULT:                  {globalSpec: {type: 'string', format: 'date-time'}, parents: {ShipmentLocation: {} } },\n  },\n  eventID: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', format: 'uuid'}}\n  },\n  eventLocation: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'object'}},\n  },\n  eventType: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', enum: ['OPERATIONS']}},\n  },\n  expectedArrivalAtPlaceOfDeliveryStartDate: {\n    DEFAULT:                  {globalSpec: {type: 'string', format: 'date'}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {} }},\n  },\n  expectedArrivalAtPlaceOfDeliveryEndDate: {\n    DEFAULT:                  {globalSpec: {type: 'string', format: 'date'}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {} }},\n  },\n  expectedDepartureDate: {\n    DEFAULT:                  {globalSpec: {type: 'string', format: 'date'}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {} }},\n  },\n  exportDeclarationReference: {\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 35, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {} }},\n  },\n  exportLicenseExpiryDate: {\n    DEFAULT:                  {globalSpec: {type: 'string', format: 'date'}, parents: {Commodity: {} }},\n  },\n  exportLicenseIssueDate: {\n    DEFAULT:                  {globalSpec: {type: 'string', format: 'date'}, parents: {Commodity: {} }},\n  },\n  exportVoyageNumber: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 50, deprecated: true}},\n  },\n  facilityCode: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 6}, parents: {TransportCall: {}, location: {nullable: false}, eventLocation: {nullable: false} }},\n    'BKG_v2.0.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 6, nullable: false, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {FacilityLocation: {} }},\n    DEFAULT                 : {globalSpec: {type: 'string', maxLength: 6, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {FacilityLocation: {} }},\n  },\n  FacilityLocation: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Facility Location', required: ['locationType', 'facilityCode', 'facilityCodeListProvider']}, parents: {}},\n  },\n  facilitySMDGCode: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 6}, parents: {timestamp: {nullable: false, deprecated: true} }}\n  },\n  facilityTypeCode: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string'}, parents: {timestamp: {enum: ['PBPL', 'BRTH'] }, TransportCall: {enum: ['BOCR', 'CLOC', 'COFS', 'COYA', 'OFFD', 'DEPO', 'INTE', 'POTE', 'RAMP']}}},\n  },\n  facilityCodeListProvider: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', enum: ['BIC', 'SMDG']}},\n    DEFAULT                 : {globalSpec: {type: 'string', enum: ['BIC', 'SMDG']}, parents: {FacilityLocation: {} }},\n  },\n  flashPoint: {\n    'DEFAULT':                {globalSpec: {type: 'number', format: 'float'}, parents: {Limits: {}} },\n  },\n  floor: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 50}, parents: {Address: {}, address: {} }},\n    DEFAULT:                  {globalSpec: {type: 'string', pattern: '^\\\\S(?:.*\\\\S)?$', maxLength: 50}, parents: {Address: {}, address: {}, PartyAddress: {} }},\n  },\n  freightPaymentTermCode: {\n    'DEFAULT':                {globalSpec: {type: 'string', enum: ['PRE', 'COL']}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {}} },\n  },\n  fumigationDateTime: {\n    DEFAULT:                  {globalSpec: {type: 'string', format: 'date-time'}, parents: {DangerousGoods: {} } },\n  },\n  grossWeight: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Gross Weight', required: ['value', 'unit']}, parents: {}},\n  },\n  haulageChargesPaymentTermCode: {\n    'DEFAULT':                {globalSpec: {type: 'string', enum: ['PRE', 'COL']}, parents: {originChargesPaymentTerm: {}, destinationChargesPaymentTerm: {}} },\n  },\n  HSCodes: {\n    'DEFAULT':                {globalSpec: {type: 'array', items: {type: 'string', minLength: 6, maxLength: 10, pattern: '^\\\\d{6,10}$'}}, parents: {Commodity: {} } },\n  },\n  httpMethod: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string'}},\n    'DEFAULT':                {globalSpec: {type: 'string', enum: ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'OPTION', 'PATCH']}, parents: {ErrorResponse: {}}},\n  },\n  humiditySetpoint: {\n    'DEFAULT':                {globalSpec: {type: 'number', format: 'float', minimum: 0, maximum: 100}, parents: {ActiveReeferSettings: {}} },\n  },\n  id: {\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 100}, parents: DCSA_CLOUDEVENT_GROUP },\n  },\n  IdentifyingCode: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Identifying Code', required: ['codeListProvider', 'partyCode']}, parents: {} },\n  },\n  identifyingCodes: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'array'}, parents: {publisher: {}}},\n    DEFAULT:                  {globalSpec: {type: 'array', items: {$ref: '#/components/schemas/IdentifyingCode'}}, parents: {BookingAgent: {}, Shipper: {}, Consignee: {}, ServiceContractOwner: {}, CarrierBookingOffice: {}, Party: {} }},\n  },\n  imoClass: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 4}, parents: {DangerousGoods: {} } },\n  },\n  imoPackagingCode: {\n    'DEFAULT':                {globalSpec: {type: 'string', minLength: 1, maxLength: 5, pattern: '^[A-Z0-9]{1,5}$'}, parents: {OuterPackaging: {} } },\n  },\n  importLicenseReference: {\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 35, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {} }},\n  },\n  importVoyageNumber: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 50, deprecated: true}},\n  },\n  incoTerms: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 3}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {}} },\n  },\n  inhalationZone: {\n    'DEFAULT':                {globalSpec: {type: 'string', minLength: 1, maxLength: 1}, parents: { DangerousGoods: {} } },\n  },\n  InnerPackaging: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Inner Packaging', required: ['quantity', 'material', 'description']}, parents: { } },\n  },\n  innerPackagings: {\n    'DEFAULT':                {globalSpec: {type: 'array', items: {$ref: '#/components/schemas/InnerPackaging'}}, parents: {DangerousGoods: {} } },\n  },\n  InvoicePayableAt: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Invoice Payable At', required: ['UNLocationCode']}, parents: {} },\n  },\n  invoicePayableAt: {\n    'BKG_v2.0.0-Beta-2.yaml': {globalSpec: {type: 'object', title: 'Invoice Payable At', required: ['UNLocationCode']}, parents: {} },//<-- Needs to be modified\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Invoice Payable At', required: ['UNLocationCode']}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {} } },\n  },\n  isBulbMode: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {ActiveReeferSettings: {} }},\n  },\n  isColdTreatmentRequired: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {ActiveReeferSettings: {} }},\n  },\n  isCompetentAuthorityApprovalProvided: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {DangerousGoods: {} }},\n  },\n  isControlledAtmosphereRequired: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {ActiveReeferSettings: {} }},\n  },\n  isDrainholesOpen: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {ActiveReeferSettings: {} }},\n  },\n  isEmptyUncleanedResidue: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {DangerousGoods: {} }},\n  },\n  isEquipmentSubstitutionAllowed: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {} }},\n  },\n  isExceptedQuantity: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {DangerousGoods: {} }},\n  },\n  isExportDeclarationRequired: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {} }},\n  },\n  isGeneratorSetRequired: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {ActiveReeferSettings: {} }},\n  },\n  isHot: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {DangerousGoods: {} }},\n  },\n  isImportLicenseRequired: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {} }},\n  },\n  isLimitedQuantity: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {DangerousGoods: {} }},\n  },\n  isMarinePollutant: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {DangerousGoods: {} }},\n  },\n  isNonOperatingReefer: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {RequestedEquipment: {} }},\n  },\n  ISOEquipmentCode: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 4, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {ConfirmedEquipment: {}, RequestedEquipment: {}} },\n  },\n  isPartialLoadAllowed: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {} }},\n  },\n  isPreCoolingRequired: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {ActiveReeferSettings: {} }},\n  },\n  isReportableQuantity: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {DangerousGoods: {} }},\n  },\n  isSalvagePackings: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {DangerousGoods: {} }},\n  },\n  isShipperOwned: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {SocEquipment: {}, CocEquipment: {} }},\n  },\n  isVentilationOpen: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {ActiveReeferSettings: {} }},\n  },\n  isWaste: {\n    DEFAULT:                  {globalSpec: {type: 'boolean'}, parents: {DangerousGoods: {} }},\n  },\n  jsonPath: {\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 500}, parents: {RequestedChange: {}, errors: {}}},\n  },\n  latitude: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 10}}\n  },\n  lengthOverall: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'number', format: 'float'}}\n  },\n  Limits: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Limits', required: ['temperatureUnit']}, parents: {} },\n  },\n  limits: {\n    'DEFAULT':                {globalSpec: {$ref: '#/components/schemas/Limits'}, parents: {DangerousGoods: {} } },\n  },\n  loadLocation: {\n    'DEFAULT':                {parents: {Transport: {$ref:'#/components/schemas/LoadLocation'} } },\n  },\n  LoadLocation: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Load Location', oneOf: true}, parents: {} },\n  },\n  location: {\n    'jit_v1.2.0-Beta-2.yaml': {parents: {TransportCall: {} }},\n    DEFAULT:                  {globalSpec: {type: 'object', title: 'Location', oneOf: true}, parents: {ShipmentLocation: {}} },\n  },\n  locationName: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 100}, parents: {location: {}, eventLocation: {} }},\n    'BKG_v2.0.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 100}, parents: {AddressLocation: {}, FacilityLocation: {pattern: '^\\\\S(?:.*\\\\S)?$'}, UNLocationLocation: {pattern: '^\\\\S(?:.*\\\\S)?$'} }},\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 100, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {AddressLocation: {}, FacilityLocation: {}, UNLocationLocation: {} }},\n  },\n  locationType: {\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 4}, parents: {AddressLocation: {}, FacilityLocation: {}, UNLocationLocation: {} }},\n  },\n  locationTypeCode: {\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 3}, parents: {ShipmentLocation: {} }},\n  },\n  longitude: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 11}}\n  },\n  manifestTypeCode: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 50, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {AdvanceManifestFiling: {} } },\n  },\n  material: {\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 100}, parents: {InnerPackaging: {}}}\n  },\n  message: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string'}, parents: {subError: {}}},\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 500}, parents: {RequestedChange: {}}},\n  },\n  milesToDestinationPort: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'number', format: 'float'}}\n  },\n  modeOfTransport: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', enum: ['VESSEL', 'RAIL', 'TRUCK', 'BARGE']}, parents: {timestamp: {deprecated: true}, TransportCall: {}}},\n    '???':                    {globalSpec: {type: 'string', enum: ['VESSEL', 'RAIL', 'TRUCK', 'BARGE']}},\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 50}, parents: {Transport: {}}}\n  },\n  name: {\n    'DEFAULT':                {globalSpec: {type: 'string', pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {vessel: {maxLength: 50}, Vessel: {maxLength: 50}, PartyContactDetail: {maxLength: 100} } },\n  },\n  naNumber: {\n    'DEFAULT':                {globalSpec: {type: 'string', minLength: 4, maxLength: 4, pattern: '^\\\\d{4}$'}, parents: { } },\n  },\n  netExplosiveContent: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Net Explosive Content', required: ['value', 'unit']}, parents: {}},\n  },\n  netWeight: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Net Weight', required: ['value', 'unit']}, parents: {}},\n  },\n  nmftaCode: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 4, deprecated: true}, parents: {publisher: {} }},\n  },\n  numberOfPackages: {\n    'DEFAULT':                {globalSpec: {type: 'integer', format: 'int32', minimum: 1}, parents: {OuterPackaging: {}} },\n  },\n  o2Setpoint: {\n    'DEFAULT':                {globalSpec: {type: 'number', format: 'float', minimum: 0, maximum: 100}, parents: {ActiveReeferSettings: {}} },\n  },\n  operationsEventTypeCode: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', enum: ['STRT', 'CMPL', 'ARRI', 'DEPA'] }},\n  },\n  originChargesPaymentTerm: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Origin Charges Payment Term'}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {}}, $ref: true},\n  },\n  OuterPackaging: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Outer Packaging'}, parents: {} },\n  },\n  outerPackaging: {\n    'DEFAULT'               : {globalSpec: {$ref: '#/components/schemas/OuterPackaging'}, parents: {Commodity: {}}},\n  },\n  other: {\n    'DEFAULT':                {globalSpec: {type: 'array', items: {$ref: '#/components/schemas/OtherDocumentParty'}}, parents: {documentParties: {} } },\n  },\n  otherChargesPaymentTermCode: {\n    'DEFAULT':                {globalSpec: {type: 'string', enum: ['PRE', 'COL']}, parents: {originChargesPaymentTerm: {}, destinationChargesPaymentTerm: {}} },\n  },\n  OtherDocumentParty: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Other Document Party', required: ['party', 'partyFunction']}, parents: {} },\n  },\n  otherFacility: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 50}, parents: {}},\n  },\n  packageCode: {\n    'DEFAULT':                {globalSpec: {type: 'string', minLength: 2, maxLength: 2, pattern: '^[A-Z0-9]{2}$'}, parents: {OuterPackaging: {} } },\n  },\n  packingGroup: {\n    'DEFAULT':                {globalSpec: {type: 'integer', format: 'int32', minimum: 1, maximum: 3}, parents: {DangerousGoods: {}} },\n  },\n  party: {\n    'DEFAULT'               : {globalSpec: {$ref: '#/components/schemas/Party'}, parents: {OtherDocumentParty: {}}},\n  },\n  Party: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Party', required: ['partyName']}, parents: {} },\n  },\n  PartyAddress: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Party Address'}, parents: {}},\n  },\n  partyCode: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 100}, parents: {IdentifyingCode: {}, identifyingCode: {}} },\n  },\n  partyContactDetails: {\n    'DEFAULT':                {globalSpec: {type: 'array', items: {$ref: '#/components/schemas/PartyContactDetail'}}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {}, BookingAgent: {minItems: 1}, Shipper: {minItems: 1}, Consignee: {minItems: 1}, ServiceContractOwner: {minItems: 1}, CarrierBookingOffice: {minItems: 1}, Party: {minItems: 1} } },\n  },\n  PartyContactDetail: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Party Contact Detail', required: ['name']}, parents: {} },\n  },\n  partyFunction: {\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 3}, parents: {OtherDocumentParty: {}} },\n  },\n  partyName: {\n    'jit_v1.2.0-Beta-2.yaml' :{globalSpec: {type: 'string', maxLength: 100} },\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 100, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {BookingAgent: {}, Shipper: {}, Consignee: {}, ServiceContractOwner: {}, CarrierBookingOffice: {}, Party: {}} },\n  },\n  paymentTermCode: {\n    'DEFAULT':                {globalSpec: {type: 'string', enum: ['PRE', 'COL']}, parents: {Charge: {}} },\n  },\n  phone: {\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 30, pattern: '^\\\\S(?:.*\\\\S)?$'} , parent: {EmergencyContactDetails: {}}},\n  },\n  placeOfBLIssue: {\n    'BKG_v2.0.0-Beta-2.yaml': {globalSpec: {type: 'object', title: 'Place of B/L Issue', required: ['UNLocationCode']}, parents: {} },//<-- Needs to be modified\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Place of B/L Issue', oneOf: true}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {} } },\n  },\n  plannedArrivalDate: {\n    'DEFAULT':                {globalSpec: {type: 'string', format: 'date'}, parents: {Transport: {} } },\n  },\n  plannedDepartureDate: {\n    'DEFAULT':                {globalSpec: {type: 'string', format: 'date'}, parents: {Transport: {} } },\n  },\n  portCallPhaseTypeCode: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', enum: ['INBD', 'ALGS', 'SHIF', 'OUTB']}}\n  },\n  portCallServiceTypeCode: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', enum: ['PILO', 'MOOR', 'CRGO', 'TOWG', 'BUNK', 'WSDP', 'LASH', 'SAFE', 'FAST', 'GWAY']}}\n  },\n  portChargesPaymentTermCode: {\n    'DEFAULT':                {globalSpec: {type: 'string', enum: ['PRE', 'COL']}, parents: {originChargesPaymentTerm: {}, destinationChargesPaymentTerm: {}} },\n  },\n  portVisitReference: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 50}}\n  },\n  postCode: {\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 50}, parents: {Address: {}, address: {}, PartyAddress: {}} },\n  },\n  property: {\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 100}, parents: {ErrorResponse: {}, RequestedChange: {}, errors: {}}},\n  },\n  provider: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 255}, parents: {EmergencyContactDetails: {}} },\n  },\n  properShippingName: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 250}, parents: {DangerousGoods: {} } },\n  },\n  providerCorrelationReference: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 100}, parents: {ErrorResponse: {}} },\n  },\n  publicKey: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 500} },\n  },\n  publisher: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {$ref: true } },\n  },\n  publisherRole: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', enum: ['CA', 'AG', 'VSL', 'ATH', 'PLT', 'TR', 'TWG', 'LSH', 'BUK'] } },\n  },\n  quantity: {\n    'DEFAULT':                {globalSpec: {}, parents: {InnerPackaging: {type: 'integer', format: 'int32'}, Charge: {type: 'number', format: 'float', minimum: 0}} },\n  },\n  reason: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string'}, parents: {subError: {}}},\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 5000}, parents: {Booking: {}, data: {}, BookingRefStatus: {}, BookingRefCancelledStatus: {}}}, //BKG NTF 2.0.0 Beta 1 + EBL NTF 3.0.0 Beta 1\n  },\n  Reference: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Reference', required: ['type', 'value']}, parents: {}},\n  },\n  remark: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 500}},\n  },\n  receiptTypeAtOrigin: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 3, enum: ['CY', 'SD', 'CFS']}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {}} },\n  },\n  referenceNumber: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 255}, parents: {EmergencyContactDetails: {}} },\n  },\n  references: {\n    'DEFAULT':                {globalSpec: {type: 'array', items: {$ref: '#/components/schemas/Reference'}}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {}, RequestedEquipment: {}, Commodity: {} } },\n  },\n  replyToTimestampID: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', format: 'uuid'} },\n  },\n  RequestedChange: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Requested Change', required: ['message']}, parents: {} },\n  },\n  requestedChanges: {\n    'DEFAULT':                {globalSpec: {type: 'array', items: {$ref: '#/components/schemas/RequestedChange'}}, parents: {Booking: {}, BookingRefStatus: {}, BookingRefCancelledStatus: {} } },\n  },\n  RequestedEquipment: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Requested Equipment', required: ['ISOEquipmentCode', 'units'], oneOf: true}, parents: {} },\n  },\n  RequestedEquipmentCarrier: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Requested Equipment (Carrier)', allOf: true}, parents: {} },\n  },\n  RequestedEquipmentShipper: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Requested Equipment (Shipper)', allOf: true}, parents: {} },\n  },\n  requestedEquipments: {\n    'DEFAULT':                {globalSpec: {type: 'array', minItems: 1}, parents: {CreateBooking: {items: {$ref: '#/components/schemas/RequestedEquipmentShipper'}}, UpdateBooking: {items: {$ref: '#/components/schemas/RequestedEquipmentShipper'}}, Booking: {items: {$ref: '#/components/schemas/RequestedEquipmentCarrier'}} } },\n  },\n  requestUri: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string'} },\n    'DEFAULT':                {globalSpec: {type: 'string'}, parents: {ErrorResponse: {}} },\n  },\n  SADT: {\n    'DEFAULT':                {globalSpec: {type: 'number', format: 'float'}, parents: {Limits: {}} },\n  },\n  SAPT: {\n    'DEFAULT':                {globalSpec: {type: 'number', format: 'float'}, parents: {Limits: {}} },\n  },\n  segregationGroups: {\n    DEFAULT:                  {globalSpec: {type: 'array', items: {type: 'string', maxLength: 2}}, parents: {DangerousGoods: {}}},\n  },\n  serviceContractOwner: {\n    'DEFAULT'               : {globalSpec: {$ref: '#/components/schemas/ServiceContractOwner'}, parents: {documentParties: {}}},\n  },\n  ServiceContractOwner: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Service Contract Owner', required: ['partyName']}, parents: {} },\n  },\n  serviceContractReference: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 30}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {}} },\n  },\n  shipmentCutOffTimes: {\n    'DEFAULT':                {globalSpec: {type: 'array', items: {$ref: '#/components/schemas/ShipmentCutOffTime'}}, parents: {Booking: {} } },\n  },\n  ShipmentCutOffTime: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Shipment Cut-Off Time', required: ['cutOffDateTimeCode', 'cutOffDateTime']}, parents: {} },\n  },\n  ShipmentLocation: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Shipment Location', required: ['location', 'locationTypeCode']}, parents: {}},\n  },\n  shipmentLocations: {\n    'DEFAULT':                {globalSpec: {type: 'array', minItems: 1, items: {$ref: '#/components/schemas/ShipmentLocation'}}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {} } },\n  },\n  shipper: {\n    'DEFAULT'               : {globalSpec: {$ref: '#/components/schemas/Shipper'}, parents: {documentParties: {}}},\n  },\n  Shipper: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Shipper', required: ['partyName']}, parents: {} },\n  },\n  ShippingInstructionsNotification: {\n    'ebl_ntf_v3.0.0-Beta-1.yaml': {globalSpec: { type: 'object', title: 'Shipping Instructions Notification', required: ['specversion', 'id', 'source', 'type', 'time', 'datacontenttype', 'data']}, parents: {}},\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Shipping Instructions Notification', required: ['specversion', 'id', 'source', 'type', 'time', 'datacontenttype', 'subscriptionReference', 'data']}, parents: {}},\n  },\n  shippingInstructionsReference: {\n    'ebl_ntf_v3.0.0-Beta-1.yaml': {globalSpec: {type: 'string', maxLength: 100, pattern: \"^\\\\S+(\\\\s+\\\\S+)*$\"}, parents: {data: {} } }, //BKG NTF 2.0.0 Beta 1\n    'EBL_NTF_v3.0.0-Beta-2.yaml':{globalSpec: {type: 'string', maxLength: 100, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {data: {} } },\n    'EBL_NTF_v3.0.0-Beta-3.yaml':{globalSpec: {type: 'string', maxLength: 100, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {data: {} } },\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 100, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {ShippingInstructions: {} } },\n  },\n  shippingInstructionsStatus: {\n    'ebl_ntf_v3.0.0-Beta-1.yaml': {globalSpec: { type: 'string', maxLength: 50}, parents: {data: {}}},\n    'EBL_NTF_v3.0.0-Beta-2.yaml': {globalSpec: { type: 'string', maxLength: 50}, parents: {data: {}}},\n    'EBL_NTF_v3.0.0-Beta-3.yaml': {globalSpec: { type: 'string', maxLength: 50}, parents: {data: {}}},\n    DEFAULT:                  {globalSpec: { type: 'string', maxLength: 50}, parents: {ShippingInstructions: {} }},\n  },\n  SocEquipment: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Shipper owned Equipment', required: ['tareWeight', 'tareWeightUnit', 'isShipperOwned']}, parents: {} },\n  },\n  source: {\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 4096}, parents: DCSA_CLOUDEVENT_GROUP },\n  },\n  specialCertificateNumber: {\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 255}, parents: {DangerousGoods: {}}},\n  },\n  specversion: {\n    DEFAULT:                  {globalSpec: {type: 'string', enum: ['1.0']}, parents: DCSA_CLOUDEVENT_GROUP },\n  },\n  stateRegion: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 65}, parents: {address: {} }},\n    'BKG_v2.0.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 65, nullable: true} },\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 65}, parents: {Address:{}, address: {}, PartyAddress: {}} },\n  },\n  statusCode: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'integer'}},\n    'DEFAULT':                {globalSpec: {type: 'integer', format: 'int32'}, parents: {ErrorResponse: {}} },\n  },\n  statusCodeMessage: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 200}, parents: {ErrorResponse: {}} },\n  },\n  statusCodeText: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string'}},\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 50}, parents: {ErrorResponse: {}} },\n  },\n  street: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 100}, parents: {Address: {}, address: {}, PartyAddress: {}} },\n  },\n  streetNumber: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 50}, parents: {Address: {}, address: {}, PartyAddress: {}} },\n  },\n  subscriptionReference: {\n    DEFAULT:                  {globalSpec: {type: 'string', pattern: '^\\\\S(?:.*\\\\S)?$', maxLength: 100}, parents: DCSA_CLOUDEVENT_GROUP },\n  },\n  subsidiaryRisk1: {\n    'DEFAULT':                {globalSpec: {type: 'string', minLength: 1, maxLength: 3, pattern: '^[0-9](\\\\.[0-9])?$'}, parents: {DangerousGoods: {} } },\n  },\n  subsidiaryRisk2: {\n    'DEFAULT':                {globalSpec: {type: 'string', minLength: 1, maxLength: 3, pattern: '^[0-9](\\\\.[0-9])?$'}, parents: {DangerousGoods: {} } },\n  },\n  tareWeight: {\n    'DEFAULT':                {globalSpec: {type: 'number', format: 'float', minimum: 0, exclusiveMinimum: true}, parents: {SocEquipment: {}} },\n  },\n  tareWeightUnit: {\n    'DEFAULT':                {globalSpec: {type: 'string', enum: ['KGM', 'LBR']}, parents: {SocEquipment: {} } },\n  },\n  TaxLegalReference: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Tax & Legal Reference', required: ['type', 'countryCode', 'value']}, parents: {} },\n  },\n  taxLegalReferences: {\n    DEFAULT:                  {globalSpec: {type: 'array', items: {$ref: '#/components/schemas/TaxLegalReference'}}, parents: {BookingAgent: {}, Shipper: {}, Consignee: {}, ServiceContractOwner: {}, Party: {} }},\n  },\n  taxReference1: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 20} },\n  },\n  taxReference2: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 20} },\n  },\n  technicalName: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 250}, parents: {DangerousGoods: {} } },\n  },\n  temperatureSetpoint: {\n    'DEFAULT':                {globalSpec: {type: 'number', format: 'float'}, parents: {ActiveReeferSettings: {}} },\n  },\n  temperatureUnit: {\n    'DEFAULT':                {globalSpec: {type: 'string', enum: ['CEL', 'FAH']}, parents: {ActiveReeferSettings: {}, Limits: {} } },\n  },\n  termsAndConditions: {\n    'DEFAULT':                {globalSpec: {type: 'string', maxLength: 50000}, parents: {Booking: {}} },\n  },\n  time: {\n    DEFAULT:                  {globalSpec: {type: 'string', format: 'date-time'}, parents: DCSA_CLOUDEVENT_GROUP },\n  },\n  timestampID: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', format: 'uuid'} },\n  },\n  Transport: {\n    'DEFAULT':                {globalSpec: {type: 'object', title: 'Transport', required: ['transportPlanStage', 'transportPlanStageSequenceNumber', 'loadLocation', 'dischargeLocation', 'plannedDepartureDate', 'plannedArrivalDate']}, parents: {} },\n  },\n  transportCallID: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 100}, parents: {TransportCall: {}} },\n  },\n  transportCallReference: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 100} },\n  },\n  transportCallSequenceNumber: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'integer'}},\n    'DEFAULT':                {globalSpec: {type: 'integer', format: 'int32'} },\n  },\n  transportControlTemperature: {\n    'DEFAULT':                {globalSpec: {type: 'number', format: 'float'}, parents: {Limits: {}} },\n  },\n  TransportDocumentNotification: {\n    'ebl_ntf_v3.0.0-Beta-1.yaml': {globalSpec: { type: 'object', title: 'Transport Document Notification', required: ['specversion', 'id', 'source', 'type', 'time', 'datacontenttype', 'data']}, parents: {}},\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Transport Document Notification', required: ['specversion', 'id', 'source', 'type', 'time', 'datacontenttype', 'subscriptionReference', 'data']}, parents: {}},\n  },\n  transportDocumentReference: {\n    'ebl_ntf_v3.0.0-Beta-1.yaml': {globalSpec: {type: 'string', maxLength: 20, pattern: \"^\\\\S+(\\\\s+\\\\S+)*$\"}, parents: {data: {} } }, //BKG NTF 2.0.0 Beta 1\n    'EBL_NTF_v3.0.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 20, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {data: {} }},\n    'EBL_NTF_v3.0.0-Beta-3.yaml': {globalSpec: {type: 'string', maxLength: 20, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {data: {} }},\n    DEFAULT                 : {globalSpec: {type: 'string', maxLength: 20, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {} }},\n  },\n  transportDocumentStatus: {\n    'ebl_ntf_v3.0.0-Beta-1.yaml': {globalSpec: { type: 'string', maxLength: 50}, parents: {data: {}}},\n    'EBL_NTF_v3.0.0-Beta-2.yaml': {globalSpec: { type: 'string', maxLength: 50}, parents: {data: {}}},\n    'EBL_NTF_v3.0.0-Beta-3.yaml': {globalSpec: { type: 'string', maxLength: 50}, parents: {data: {}}},\n    DEFAULT:                  {globalSpec: { type: 'string', maxLength: 50}, parents: {TransportDocument: {} }},\n  },\n  transportDocumentTypeCode: {\n    DEFAULT                 : {globalSpec: {type: 'string', enum: ['BOL', 'SWB']}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {} }},\n  },\n  transportEmergencyTemperature: {\n    'DEFAULT':                {globalSpec: {type: 'number', format: 'float'}, parents: {Limits: {}} },\n  },\n  transportPlan: {\n    'DEFAULT':                {globalSpec: {type: 'array', items: {$ref: '#/components/schemas/Transport'}}, parents: {Booking: {} } },\n  },\n  transportPlanStage: {\n    DEFAULT                 : {globalSpec: {type: 'string', enum: ['PRC', 'MNC', 'ONC']}, parents: {Transport: {} }},\n  },\n  transportPlanStageSequenceNumber: {\n    'DEFAULT':                {globalSpec: {type: 'integer', format: 'int32'}, parents: {Transport: {}} },\n  },\n  type: {\n    DEFAULT:                  {globalSpec: {type: 'string'}, parents: {Reference: {maxLength: 3}, TaxLegalReference: {maxLength: 50, pattern: '^\\\\S(?:.*\\\\S)?$'}, ArrivalNoticeNotification: {enum: ['org.dcsa.arrival-notice-notification.v1']}, BookingNotification: {enum: ['org.dcsa.booking-notification.v2']},TransportDocumentNotification: {enum: ['org.dcsa.transport-document-notification.v3']}, ShippingInstructionsNotification: {enum: ['org.dcsa.shipping-instructions-notification.v3']}, vessel: {enum: ['GCGO', 'CONT', 'RORO', 'CARC', 'PASS', 'FERY', 'BULK', 'TANK', 'LGTK', 'ASSI', 'PILO']} } },\n  },\n  unit: {\n    'DEFAULT'               : {globalSpec: { type: 'string'}, parents: {volume: {enum: ['MTQ', 'FTQ', 'LTR']}, grossWeight: {enum: ['KGM', 'LBR']}, netWeight: {enum: ['KGM', 'LBR']}, netExplosiveContent: {enum: ['KGM', 'GRM']} }},\n  },\n  units: {\n    'DEFAULT':                {globalSpec: {type: 'integer', format: 'int32', minimum: 1}, parents: {ConfirmedEquipment: {}, RequestedEquipment: {}} },\n  },\n  unitPrice: {\n    'DEFAULT':                {globalSpec: {type: 'number', format: 'float', minimum: 0}, parents: {Charge: {}} },\n  },\n  universalExportVoyageReference: {\n    'DEFAULT':                {globalSpec: {type: 'string', minLength: 5, maxLength: 5, pattern: '^\\\\d{2}[0-9A-Z]{2}[NEWSR]$'}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {}, Transport: {}} },\n  },\n  universalImportVoyageReference: {\n    'DEFAULT':                {globalSpec: {type: 'string', minLength: 5, maxLength: 5, pattern: '^\\\\d{2}[0-9A-Z]{2}[NEWSR]$'}, parents: {Transport: {}} },\n  },\n  universalServiceReference: {\n    'DEFAULT':                {globalSpec: {type: 'string', minLength: 8, maxLength: 8, pattern: '^SR\\\\d{5}[A-Z]$'}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {}, Transport: {}} },\n  },\n  UNLocationCode: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 5}},\n    'DEFAULT':                {globalSpec: {type: 'string', minLength: 5, maxLength: 5, pattern: '^[A-Z]{2}[A-Z2-9]{3}$'}, parents: {invoicePayableAt: {}, InvoicePayableAt: {}, FacilityLocation: {}, UNLocationLocation: {}, PartyAddress: {}, CarrierBookingOffice: {} } },\n  },\n  UNLocationLocation: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'UNLocation Location', additionalProperties: false, required: ['locationType', 'UNLocationCode']}, parents: {}},\n  },\n  unNumber: {\n    'DEFAULT':                {globalSpec: {type: 'string', minLength: 4, maxLength: 4, pattern: '^\\\\d{4}$'}, parents: { } },\n  },\n  UpdateBooking: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Update Booking', required: ['receiptTypeAtOrigin', 'deliveryTypeAtDestination', 'cargoMovementTypeAtOrigin', 'cargoMovementTypeAtDestination', 'isPartialLoadAllowed', 'isExportDeclarationRequired', 'isImportLicenseRequired', 'communicationChannelCode', 'isEquipmentSubstitutionAllowed', 'shipmentLocations', 'requestedEquipments', 'documentParties']}, parents: {}},\n  },\n  updatedShippingInstructionsStatus: {\n    'ebl_ntf_v3.0.0-Beta-1.yaml': {globalSpec: { type: 'string', maxLength: 50}, parents: {data: {}}},\n    'EBL_NTF_v3.0.0-Beta-2.yaml': {globalSpec: { type: 'string', maxLength: 50}, parents: {data: {}}},\n    'EBL_NTF_v3.0.0-Beta-3.yaml': {globalSpec: { type: 'string', maxLength: 50}, parents: {data: {}}},\n    DEFAULT:                  {globalSpec: { type: 'string', maxLength: 50}, parents: {ShippingInstructions: {} }},\n  },\n  value: {\n    DEFAULT:                  {globalSpec: {}, parents: {volume: {type: 'number', format: 'float', minimum: 0, exclusiveMinimum: true}, grossWeight: {type: 'number', format: 'float', minimum: 0, exclusiveMinimum: true}, netWeight: {type: 'number', format: 'float', minimum: 0, exclusiveMinimum: true}, netExplosiveContent: {type: 'number', format: 'float', minimum: 0, exclusiveMinimum: true}, DetailedError: {type: 'string', maxLength: 500}, errors: {type: 'string', maxLength: 500}, TaxLegalReference: {type: 'string', maxLength: 100, pattern: '^\\\\S(?:.*\\\\S)?$'}, Reference: {type: 'string', maxLength: 100}} },\n  },\n  vessel: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'object'}, parents: {timestamp: {}, TransportCall: {} }, $ref: true },\n    DEFAULT                 : {globalSpec: {type: 'object', title: 'Vessel', required: ['name']}, parents: {CreateBooking: {}, UpdateBooking: {}, Booking: {} }, $ref: true },\n  },\n  vesselCallSignNumber: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 10}, parents: {vessel: {} } },\n  },\n  vesselDraft: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'number', format: 'float'}, parents: {OperationsEvent: {} } },\n  },\n  vesselDraftUnit: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', enum: ['MTR', 'FOT']}, parents: {OperationsEvent: {} } },\n  },\n  vesselFlag: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 2}, parents: {vessel: {} } },\n  },\n  vesselIMONumber: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 7}, parents: {timestamp: {deprecated: true}, vessel: {} }},\n    'DEFAULT':                {globalSpec: {type: 'string', minLength: 7, maxLength: 8, pattern: '^\\\\d{7,8}$'}, parents: {vessel: {}, Vessel: {}, Transport: {} } },\n  },\n  vesselName: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 35}, parents: {vessel: {} } },\n    DEFAULT:                  {globalSpec: {type: 'string', maxLength: 50, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {Transport: {}}}\n  },\n  vesselOperatorCarrierCode: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', maxLength: 10, nullable: false}, parents: {vessel: {} } },\n  },\n  vesselOperatorCarrierCodeListProvider: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'string', enum: ['SMDG', 'NMFTA'], nullable: false}, parents: {vessel: {} } },\n  },\n  vesselPosition: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {$ref: true } },\n  },\n  volume: {\n    'DEFAULT'               : {globalSpec: { type: 'object', title: 'Volume', required: ['value', 'unit']}, parents: {}},\n  },\n  width: {\n    'jit_v1.2.0-Beta-2.yaml': {globalSpec: {type: 'number', format: 'float'}, parents: {vessel: {} }},\n  },\n};\n\n// Makes sure two arrays are equal if:\n// * they are the same array\n// * they have the same size\n// * items on each position in the list are the same\nfunction arraysEqual(a, b) {\n  if (a === b) return true;\n  if (a == null || b == null) return false;\n  if (a.length !== b.length) return false;\n\n  for (let i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n\n// input:         the property (Node) in the API to validate\n// propertyName:  the name of the property being tested (can be a simpleType or an object)\n// attribute:     the attribute to test (type, minLength, required, etc...) if specified correctly\n// requirements:  the list of attributes that from the Spectral rule that is valid\n// results:       an accumulated list of errors for a particular property\nfunction checkRequirement(input, propertyName, attribute, requirements, results) {\n  // Checking 'enum' attribute\n  if (attribute === 'enum') {\n    // Check that enum values match (= are specified the same way...)\n    const enumValuesRequired = requirements[attribute];\n    const enumValues = input[attribute];\n    if (!arraysEqual(enumValues, enumValuesRequired)) {\n      // The two enum lists do not match - file an error\n      results.push( { message: propertyName + `.` + attribute + ` value must equal: [` + enumValuesRequired + `], value provided: [` + enumValues + `]`, }, );\n    }\n    // Checking 'required' attribute\n  } else if (attribute === 'required') {\n    // Check that required lists match (= are specified the same way...)\n    const requiredValues = requirements[attribute];\n    const inputValues = input[attribute];\n    if (!arraysEqual(inputValues, requiredValues)) {\n      // The two required lists do not match - file an error\n      results.push( { message: propertyName + `.` + attribute + ` value must equal: [` + requiredValues + `], value provided: [` + inputValues + `]`, }, );\n    }\n    // Checking 'items' attribute\n  } else if (attribute === 'items') {\n    if (input['items'] && requirements['items']) {\n      // Check if a $ref MUST be used\n      if (Object.keys(input['items']).length === 1 && input['items']['$ref']) {\n        // the input contains a $ref\n        if (requirements['items']['$ref'] !== input['items']['$ref']) {\n          results.push( { message: propertyName + `.` + attribute + ` is defined as a $ref pointing to '` + input['items']['$ref'] + `' - but must be defined ` + (requirements['items']['$ref'] ? `as a $ref pointing to: ` + requirements['items']['$ref'] : `inline`), }, );\n        }\n      } else if (Object.keys(requirements['items']).length === 1 && requirements['items']['$ref']) {\n        // the spec requires a $ref\n        if (input['items']['$ref'] !== requirements['items']['$ref']) {\n          results.push( { message: propertyName + `.` + attribute + ` is not defined as a $ref and MUST point to: ` + requirements['items']['$ref'], }, );\n        }\n      } else {\n        // Multiple properties defined for an inline defined items\n        for (const attribute2 of ATTRIBUTES_TO_CHECK) {\n          checkRequirement(input.items, propertyName + '.items', attribute2, requirements.items, results)\n        }\n      }\n    } else {\n      if (input['items']) {\n        // input.items is defined - but it is not part of the required properties\n        results.push( { message: propertyName + `.` + attribute + ` value defined but shouldn't be according to the rules`, }, );\n      } else if (requirements['items']) {\n        // requirements.items is defined - but it is not part of the input properties\n        results.push( { message: propertyName + `.` + attribute + ` value is missing - MUST be defined`, }, );\n      }\n    }\n    // Checking a specific attribute\n  } else if (requirements[attribute] !== input[attribute]) {\n    // The value provided and the value required does not match - file an error\n    results.push( { message: propertyName + `.` + attribute + ` value must equal: ` + requirements[attribute] + `, value provided: ` + input[attribute], }, );\n  }\n\n  // Make sure type attributes that are strings have example attribute value set\n  if (attribute === 'type' && requirements[attribute] === \"string\" && (!input['example'] || input['example'].length === 0)) {\n    // Example value missing when type=string - file an error\n    results.push( { message: propertyName + `.example attribute must be set with a value`, }, );\n  }\n}\n\n// globalSpec:    the Spectral spec to validate against in all uses of a property\n// propertyName:  the name of the property being tested (can be a simpleType or an object)\n// input:         the property (Node) in the API to validate\n// parentSpec:    the Spectral spec to validate against when located under a particular parent property (if any)\n// parentPropertyName: name of the parent property (if any). If present - it is always the name of an object (can be defined inline (defined as camelCase) or on root level as an object (defined as PascalCase))\n// results:       an accumulated list of errors for a particular property\nfunction checkAttributeRequirements(globalSpec, propertyName, input, parentSpec, parentPropertyName, results) {\n  // Test valid $ref specifications\n  if (input && Object.keys(input).length === 1 && input['$ref']) {\n    // Make sure correct use of $ref is used\n    if (parentSpec && parentSpec['$ref']) {\n      if (parentSpec['$ref'] !== input['$ref']) {\n        results.push({ message: propertyName + ` - if not defined inline it MUST use a $ref pointing to: ` + parentSpec['$ref'] + ` (currently pointing to: ` + input['$ref'] +`)`, }, );\n      }\n    } else if (globalSpec && globalSpec['$ref']) {\n      if (globalSpec['$ref'] !== input['$ref']) {\n        results.push({ message: propertyName + ` - if not defined inline it MUST use a $ref pointing to: ` + globalSpec['$ref'] + ` (currently pointing to: ` + input['$ref'] +`)`, }, );\n      }\n    } else {\n      // The attribute exists only in the API - NOT as a Spectral rule - file an error\n      results.push( { message: propertyName + `.$ref is specified - but should be removed as it is not a required attribute`, }, );\n    }\n    // Don't validate anything else - if specified using a $ref - it must match and nothing else\n    return [];\n  }\n\n  for (const attribute of ATTRIBUTES_TO_CHECK) {\n    if (input && input[attribute]) {\n      // The attribute exists in the Spec\n\n      if (parentSpec && parentSpec[attribute]) {\n        checkRequirement(input, propertyName, attribute, parentSpec, results);\n      } else if (globalSpec && globalSpec[attribute]) {\n        checkRequirement(input, propertyName, attribute, globalSpec, results);\n      } else {\n        // The attribute exists only in the API - NOT in the current nor parent Spectral rule - file an error\n        results.push( { message: propertyName + `.` + attribute + ` is specified - but should be removed as it is not a required attribute`, }, );\n      }\n    } else if (parentSpec && parentSpec[attribute]) {\n      // The attribute exists in the parent Spectral rule - NOT in the API\n      if (attribute === 'enum' || attribute === 'required') {\n        // Provide better error message for missing enum\n        results.push( { message: propertyName + `.` + attribute + ` must contain the list: [` + parentSpec[attribute] + `] when defined under the parent property: ` + parentPropertyName + ` but nothing was provided`, }, );\n      } else {\n        results.push( { message: propertyName + `.` + attribute + ` value must equal: ` + parentSpec[attribute] + ` when defined under the parent property: ` + parentPropertyName + ` but nothing was provided`, }, );\n      }\n    } else if (globalSpec && globalSpec[attribute]) {\n      // The attribute exists in the global Spectral rule - NOT in the API\n      if (attribute === 'enum' || attribute === 'required') {\n        // Provide better error message for missing enum\n        results.push( { message: propertyName + `.` + attribute + ` must contain the list: [` + globalSpec[attribute] + `] but nothing was provided`, }, );\n      } else {\n        results.push( { message: propertyName + `.` + attribute + ` value must equal: ` + globalSpec[attribute] + ` but nothing was provided`, }, );\n      }\n    } else {\n      // In none of the lists - there is no requirement for this attribute\n    }\n  }\n}\n\n// property:      the Spectral spec to validate against\n// propertyName:  the name of the property being tested (can be a simpleType or an object)\n// input:         the property (Node) in the API to validate\n// context:       a StopLight object containing metadata about the API property being tested\nfunction checkStandard(property, propertyName, input, context) {\n  // Gather all errors in results\n  const results = [];\n\n  // Test if there are any parent attribute requirements\n  let parents = property['parents'];\n  // If parent is defined - the required attributes only apply under a parent\n  if (parents && Object.keys(parents).length > 0) {\n\n    // Get parent to DCSA_property (if parent is called 'items' then check grandParent as the object might be defined \"inline\")\n    const parentPropertyName = (context.path.length > 3 && context.path[context.path.length - 3] === 'items') ? context.path[context.path.length - 4] : context.path[context.path.length - 3];\n\n    if (parents[parentPropertyName]) {\n      // Check parent requirements\n      checkAttributeRequirements(property['globalSpec'], propertyName, input, parents[parentPropertyName], parentPropertyName, results);\n    } else {\n      // The attribute MUST exist below one of the specified parents - if located elsewhere it is an error\n      return [ { message: propertyName + ` is only allowed under one of these parents: [` + Object.keys(parents) + `] - was found under: ` + parentPropertyName, }, ];\n    }\n  } else {\n    // No parent is defined - so the check applies to all locations\n    checkAttributeRequirements(property['globalSpec'], propertyName, input, null, null, results);\n  }\n\n  return results;\n}\n\nfunction isEmpty(obj) {\n  for (const prop in obj) {\n    if (Object.hasOwn(obj, prop)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isEmptyObject(value) {\n  if (value == null) {\n    // null or undefined\n    return false;\n  }\n\n  if (typeof value !== 'object') {\n    // boolean, number, string, function, etc.\n    return false;\n  }\n\n  const proto = Object.getPrototypeOf(value);\n\n  // consider `Object.create(null)`, commonly used as a safe map\n  // before `Map` support, an empty object as well as `{}`\n  if (proto !== null && proto !== Object.prototype) {\n    return false;\n  }\n\n  return isEmpty(value);\n}\n\nexport default createRulesetFunction(\n    {\n      input: null,\n      options: null,\n    },\n    function checkRequirements(input, options, context) {\n      // Get propertyName to check based on the path in the Context\n      const propertyName = context.path[[context.path.length - 1]];\n\n      // Get the Standard being tested (this includes the '.yaml' e.g.: jit_v1.2.0-Beta-2.yaml\n      const standard = context['document']['source'].substring(context['document']['source'].lastIndexOf('/') + 1);\n\n      // Check if the standard is in the list of standards that is currently covered by Spectral\n      if (COVERED_STANDARDS.has(standard)) {\n        // Get the property in the list of DCSA_PROPERTIES\n        let property = DCSA_PROPERTIES[propertyName];\n        if (property) {\n          // Test if the property is defined for a predefined standard\n          if (property[standard]) {\n            // Explicitly check if a property needs to be removed if present in the API (this is the case if the spec specifies it as empty \"{}\")\n            if (!isEmptyObject(property[standard])) {\n              // Check against the matched standard\n              const results = checkStandard(property[standard], propertyName, input, context);\n\n              // Only return a list if it contains something - StopLight requirement!!\n              if (results.length > 0) {\n                return results;\n              }\n            } else {\n              return [ { message: propertyName + ` is not defined for the current standard: ` + standard + ` it MUST be removed`, }, ];\n            }\n          } else if (property['DT_BETA2_GROUP'] && EBL_BETA2_GROUP[standard]) {\n            // Check against a group in order not to specify the same spec for a large number of APIs\n            const results = checkStandard(property['DT_BETA2_GROUP'], propertyName, input, context);\n            //   // Only return a list if it contains something - StopLight requirement!!\n            if (results.length > 0) {\n              return results;\n            }\n          } else if (property['DEFAULT']) {\n            // Check against the DEFAULT standard\n            const results = checkStandard(property['DEFAULT'], propertyName, input, context);\n\n            // Only return a list if it contains something - StopLight requirement!!\n            if (results.length > 0) {\n              return results;\n            }\n          } else {\n            return [ { message: propertyName + ` is not defined for the current standard: ` + standard + ` nor does a DEFAULT standard exist. Current standard is: ` + standard, }, ];\n          }\n        } else {\n          // the property name not part of DCSA_PROPERTIES\n          return [ { message: propertyName + ` is not in the list of DCSA approved property names`, }, ];\n        }\n      }\n    }\n);\n"
    },
    {
      "id": "TPL4p6UMl7qWGdiFDMPLg",
      "extendedFrom": "",
      "name": "equals",
      "content": "import { createRulesetFunction } from '@stoplight/spectral-core';\n\nexport default createRulesetFunction(\n  {\n    input: null,\n    options: {\n      type: \"object\",\n      additionalProperties: false,\n      required: [\"value\"],\n\n      properties: {\n        value: {\n          type: [\"string\", \"integer\"]\n        }\n      }\n    },\n  },\n  // https://github.com/stoplightio/spectral/blob/develop/docs/guides/5-custom-functions.md#writing-functions\n  function equals(input, options, context) {\n    const { value } = options;\n\n    const propertyName = context.path[[context.path.length - 2]];\n    const propertyProperty = context.path[[context.path.length - 1]];\n    if (input !== undefined) {\n      if (input !== value) {\n      return [\n        {\n          message: propertyName + `.` + propertyProperty + `: value must equal \"${value}\", value provided: \"${input}\".`,\n        },\n      ];\n      }\n    } else {\n      return [\n        {\n          message: propertyName + `.` + propertyProperty + `: value must equal \"${value}\" no value provided!`,\n        },\n      ];\n    }\n  },\n);"
    },
    {
      "id": "uQPw3pOQzp58CZm4lhg4E",
      "extendedFrom": "",
      "name": "noRefInSimpleType",
      "content": "import { createRulesetFunction } from '@stoplight/spectral-core';\n\nexport default createRulesetFunction(\n  {\n    input: null,\n    options: null,\n  },\n  // https://github.com/stoplightio/spectral/blob/develop/docs/guides/5-custom-functions.md#writing-functions\n  function noRefInSimpleType(input, options, context) {\n    if (Object.keys(input).length === 1 && input['$ref']) {\n      const propertyName = context.path[[context.path.length - 1]];\n      return [\n        {\n          message: propertyName + `: MUST not be defined using a $ref.`,\n        },\n      ];\n    }\n  }\n);"
    },
    {
      "id": "I9UN6GPSIDthWdN3j93KC",
      "extendedFrom": "",
      "name": "oasDiscriminator",
      "content": "function isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nexport const oasDiscriminator = (schema, _opts, { path }) => {\n  /**\n   * This function verifies:\n   *\n   * 1. The discriminator property name is defined at this schema.\n   * 2. The discriminator property is in the required property list.\n   */\n\n  if (!isObject(schema)) return;\n\n  if (typeof schema.discriminator !== 'string') return;\n\n  const discriminatorName = schema.discriminator;\n\n  const results = [];\n\n  if (!isObject(schema.properties) || !Object.keys(schema.properties).some(k => k === discriminatorName)) {\n    results.push({\n      message: `The discriminator property must be defined in this schema.`,\n      path: [...path, 'properties'],\n    });\n  }\n\n  if (!Array.isArray(schema.required) || !schema.required.some(n => n === discriminatorName)) {\n    results.push({\n      message: `The discriminator property must be in the required property list.`,\n      path: [...path, 'required'],\n    });\n  }\n\n  return results;\n};\n\nexport default oasDiscriminator;\n"
    },
    {
      "id": "Dq_wlp9WTki3TT7mAOLr8",
      "extendedFrom": "",
      "name": "oasDocumentSchema",
      "content": "import { createRulesetFunction } from '@stoplight/spectral-core';\nimport { schema as schemaFn } from '@stoplight/spectral-functions';\nimport { oas2, oas3_1 } from '@stoplight/spectral-formats';\n\nconst OAS_2 = {\n  title: 'A JSON Schema for Swagger 2.0 API.',\n  $id: 'http://swagger.io/v2/schema.json#',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  type: 'object',\n  required: ['swagger', 'info', 'paths'],\n  additionalProperties: false,\n  patternProperties: {\n    '^x-': {\n      $ref: '#/definitions/vendorExtension',\n    },\n  },\n  properties: {\n    swagger: {\n      type: 'string',\n      enum: ['2.0'],\n      description: 'The Swagger version of this document.',\n    },\n    info: {\n      $ref: '#/definitions/info',\n    },\n    host: {\n      type: 'string',\n      pattern: '^[^{}/ :\\\\\\\\]+(?::\\\\d+)?$',\n      description: \"The host (name or ip) of the API. Example: 'swagger.io'\",\n    },\n    basePath: {\n      type: 'string',\n      pattern: '^/',\n      description: \"The base path to the API. Example: '/api'.\",\n    },\n    schemes: {\n      $ref: '#/definitions/schemesList',\n    },\n    consumes: {\n      description: 'A list of MIME types accepted by the API.',\n      allOf: [\n        {\n          $ref: '#/definitions/mediaTypeList',\n        },\n      ],\n    },\n    produces: {\n      description: 'A list of MIME types the API can produce.',\n      allOf: [\n        {\n          $ref: '#/definitions/mediaTypeList',\n        },\n      ],\n    },\n    paths: {\n      $ref: '#/definitions/paths',\n    },\n    definitions: {\n      $ref: '#/definitions/definitions',\n    },\n    parameters: {\n      $ref: '#/definitions/parameterDefinitions',\n    },\n    responses: {\n      $ref: '#/definitions/responseDefinitions',\n    },\n    security: {\n      $ref: '#/definitions/security',\n    },\n    securityDefinitions: {\n      $ref: '#/definitions/securityDefinitions',\n    },\n    tags: {\n      type: 'array',\n      items: {\n        $ref: '#/definitions/tag',\n      },\n      uniqueItems: true,\n    },\n    externalDocs: {\n      $ref: '#/definitions/externalDocs',\n    },\n  },\n  definitions: {\n    info: {\n      type: 'object',\n      description: 'General information about the API.',\n      required: ['version', 'title'],\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        title: {\n          type: 'string',\n          description: 'A unique and precise title of the API.',\n        },\n        version: {\n          type: 'string',\n          description: 'A semantic version number of the API.',\n        },\n        description: {\n          type: 'string',\n          description:\n            'A longer description of the API. Should be different from the title.  GitHub Flavored Markdown is allowed.',\n        },\n        termsOfService: {\n          type: 'string',\n          description: 'The terms of service for the API.',\n        },\n        contact: {\n          $ref: '#/definitions/contact',\n        },\n        license: {\n          $ref: '#/definitions/license',\n        },\n      },\n    },\n    contact: {\n      type: 'object',\n      description: 'Contact information for the owners of the API.',\n      additionalProperties: false,\n      properties: {\n        name: {\n          type: 'string',\n          description: 'The identifying name of the contact person/organization.',\n        },\n        url: {\n          type: 'string',\n          description: 'The URL pointing to the contact information.',\n          format: 'uri',\n        },\n        email: {\n          type: 'string',\n          description: 'The email address of the contact person/organization.',\n          format: 'email',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    license: {\n      type: 'object',\n      required: ['name'],\n      additionalProperties: false,\n      properties: {\n        name: {\n          type: 'string',\n          description: \"The name of the license type. It's encouraged to use an OSI compatible license.\",\n        },\n        url: {\n          type: 'string',\n          description: 'The URL pointing to the license.',\n          format: 'uri',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    paths: {\n      type: 'object',\n      description: \"Relative paths to the individual endpoints. They must be relative to the 'basePath'.\",\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n        '^/': {\n          $ref: '#/definitions/pathItem',\n        },\n      },\n      additionalProperties: false,\n    },\n    definitions: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/definitions/schema',\n      },\n      description: 'One or more JSON objects describing the schemas being consumed and produced by the API.',\n    },\n    parameterDefinitions: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/definitions/parameter',\n      },\n      description: 'One or more JSON representations for parameters',\n    },\n    responseDefinitions: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/definitions/response',\n      },\n      description: 'One or more JSON representations for responses',\n    },\n    externalDocs: {\n      type: 'object',\n      additionalProperties: false,\n      description: 'information about external documentation',\n      required: ['url'],\n      properties: {\n        description: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n          format: 'uri',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    examples: {\n      type: 'object',\n      additionalProperties: true,\n    },\n    mimeType: {\n      type: 'string',\n      description: 'The MIME type of the HTTP message.',\n    },\n    operation: {\n      type: 'object',\n      required: ['responses'],\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        tags: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n          uniqueItems: true,\n        },\n        summary: {\n          type: 'string',\n          description: 'A brief summary of the operation.',\n        },\n        description: {\n          type: 'string',\n          description: 'A longer description of the operation, GitHub Flavored Markdown is allowed.',\n        },\n        externalDocs: {\n          $ref: '#/definitions/externalDocs',\n        },\n        operationId: {\n          type: 'string',\n          description: 'A unique identifier of the operation.',\n        },\n        produces: {\n          description: 'A list of MIME types the API can produce.',\n          allOf: [\n            {\n              $ref: '#/definitions/mediaTypeList',\n            },\n          ],\n        },\n        consumes: {\n          description: 'A list of MIME types the API can consume.',\n          allOf: [\n            {\n              $ref: '#/definitions/mediaTypeList',\n            },\n          ],\n        },\n        parameters: {\n          $ref: '#/definitions/parametersList',\n        },\n        responses: {\n          $ref: '#/definitions/responses',\n        },\n        schemes: {\n          $ref: '#/definitions/schemesList',\n        },\n        deprecated: {\n          type: 'boolean',\n          default: false,\n        },\n        security: {\n          $ref: '#/definitions/security',\n        },\n      },\n    },\n    pathItem: {\n      type: 'object',\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        $ref: {\n          type: 'string',\n        },\n        get: {\n          $ref: '#/definitions/operation',\n        },\n        put: {\n          $ref: '#/definitions/operation',\n        },\n        post: {\n          $ref: '#/definitions/operation',\n        },\n        delete: {\n          $ref: '#/definitions/operation',\n        },\n        options: {\n          $ref: '#/definitions/operation',\n        },\n        head: {\n          $ref: '#/definitions/operation',\n        },\n        patch: {\n          $ref: '#/definitions/operation',\n        },\n        parameters: {\n          $ref: '#/definitions/parametersList',\n        },\n      },\n    },\n    responses: {\n      type: 'object',\n      description: \"Response objects names can either be any valid HTTP status code or 'default'.\",\n      minProperties: 1,\n      additionalProperties: false,\n      patternProperties: {\n        '^([0-9]{3})$|^(default)$': {\n          $ref: '#/definitions/responseValue',\n        },\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      not: {\n        type: 'object',\n        additionalProperties: false,\n        patternProperties: {\n          '^x-': {\n            $ref: '#/definitions/vendorExtension',\n          },\n        },\n      },\n    },\n    responseValue: {\n      oneOf: [\n        {\n          $ref: '#/definitions/response',\n        },\n        {\n          $ref: '#/definitions/jsonReference',\n        },\n      ],\n    },\n    response: {\n      type: 'object',\n      required: ['description'],\n      properties: {\n        description: {\n          type: 'string',\n        },\n        schema: {\n          oneOf: [\n            {\n              $ref: '#/definitions/schema',\n            },\n            {\n              $ref: '#/definitions/fileSchema',\n            },\n          ],\n        },\n        headers: {\n          $ref: '#/definitions/headers',\n        },\n        examples: {\n          $ref: '#/definitions/examples',\n        },\n      },\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    headers: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/definitions/header',\n      },\n    },\n    header: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['string', 'number', 'integer', 'boolean', 'array'],\n        },\n        format: {\n          type: 'string',\n        },\n        items: {\n          $ref: '#/definitions/primitivesItems',\n        },\n        collectionFormat: {\n          $ref: '#/definitions/collectionFormat',\n        },\n        default: {\n          $ref: '#/definitions/default',\n        },\n        maximum: {\n          $ref: '#/definitions/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: '#/definitions/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: '#/definitions/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: '#/definitions/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: '#/definitions/maxLength',\n        },\n        minLength: {\n          $ref: '#/definitions/minLength',\n        },\n        pattern: {\n          $ref: '#/definitions/pattern',\n        },\n        maxItems: {\n          $ref: '#/definitions/maxItems',\n        },\n        minItems: {\n          $ref: '#/definitions/minItems',\n        },\n        uniqueItems: {\n          $ref: '#/definitions/uniqueItems',\n        },\n        enum: {\n          $ref: '#/definitions/enum',\n        },\n        multipleOf: {\n          $ref: '#/definitions/multipleOf',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    vendorExtension: {\n      description: 'Any property starting with x- is valid.',\n      additionalProperties: true,\n      additionalItems: true,\n    },\n    bodyParameter: {\n      type: 'object',\n      required: ['name', 'in', 'schema'],\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        description: {\n          type: 'string',\n          description:\n            'A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.',\n        },\n        name: {\n          type: 'string',\n          description: 'The name of the parameter.',\n        },\n        in: {\n          type: 'string',\n          description: 'Determines the location of the parameter.',\n          enum: ['body'],\n        },\n        required: {\n          type: 'boolean',\n          description: 'Determines whether or not this parameter is required or optional.',\n          default: false,\n        },\n        schema: {\n          $ref: '#/definitions/schema',\n        },\n      },\n      additionalProperties: false,\n    },\n    headerParameterSubSchema: {\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        required: {\n          type: 'boolean',\n          description: 'Determines whether or not this parameter is required or optional.',\n          default: false,\n        },\n        in: {\n          type: 'string',\n          description: 'Determines the location of the parameter.',\n          enum: ['header'],\n        },\n        description: {\n          type: 'string',\n          description:\n            'A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.',\n        },\n        name: {\n          type: 'string',\n          description: 'The name of the parameter.',\n        },\n        type: {\n          type: 'string',\n          enum: ['string', 'number', 'boolean', 'integer', 'array'],\n        },\n        format: {\n          type: 'string',\n        },\n        items: {\n          $ref: '#/definitions/primitivesItems',\n        },\n        collectionFormat: {\n          $ref: '#/definitions/collectionFormat',\n        },\n        default: {\n          $ref: '#/definitions/default',\n        },\n        maximum: {\n          $ref: '#/definitions/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: '#/definitions/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: '#/definitions/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: '#/definitions/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: '#/definitions/maxLength',\n        },\n        minLength: {\n          $ref: '#/definitions/minLength',\n        },\n        pattern: {\n          $ref: '#/definitions/pattern',\n        },\n        maxItems: {\n          $ref: '#/definitions/maxItems',\n        },\n        minItems: {\n          $ref: '#/definitions/minItems',\n        },\n        uniqueItems: {\n          $ref: '#/definitions/uniqueItems',\n        },\n        enum: {\n          $ref: '#/definitions/enum',\n        },\n        multipleOf: {\n          $ref: '#/definitions/multipleOf',\n        },\n      },\n    },\n    queryParameterSubSchema: {\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        required: {\n          type: 'boolean',\n          description: 'Determines whether or not this parameter is required or optional.',\n          default: false,\n        },\n        in: {\n          type: 'string',\n          description: 'Determines the location of the parameter.',\n          enum: ['query'],\n        },\n        description: {\n          type: 'string',\n          description:\n            'A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.',\n        },\n        name: {\n          type: 'string',\n          description: 'The name of the parameter.',\n        },\n        allowEmptyValue: {\n          type: 'boolean',\n          default: false,\n          description: 'allows sending a parameter by name only or with an empty value.',\n        },\n        type: {\n          type: 'string',\n          enum: ['string', 'number', 'boolean', 'integer', 'array'],\n        },\n        format: {\n          type: 'string',\n        },\n        items: {\n          $ref: '#/definitions/primitivesItems',\n        },\n        collectionFormat: {\n          $ref: '#/definitions/collectionFormatWithMulti',\n        },\n        default: {\n          $ref: '#/definitions/default',\n        },\n        maximum: {\n          $ref: '#/definitions/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: '#/definitions/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: '#/definitions/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: '#/definitions/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: '#/definitions/maxLength',\n        },\n        minLength: {\n          $ref: '#/definitions/minLength',\n        },\n        pattern: {\n          $ref: '#/definitions/pattern',\n        },\n        maxItems: {\n          $ref: '#/definitions/maxItems',\n        },\n        minItems: {\n          $ref: '#/definitions/minItems',\n        },\n        uniqueItems: {\n          $ref: '#/definitions/uniqueItems',\n        },\n        enum: {\n          $ref: '#/definitions/enum',\n        },\n        multipleOf: {\n          $ref: '#/definitions/multipleOf',\n        },\n      },\n    },\n    formDataParameterSubSchema: {\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        required: {\n          type: 'boolean',\n          description: 'Determines whether or not this parameter is required or optional.',\n          default: false,\n        },\n        in: {\n          type: 'string',\n          description: 'Determines the location of the parameter.',\n          enum: ['formData'],\n        },\n        description: {\n          type: 'string',\n          description:\n            'A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.',\n        },\n        name: {\n          type: 'string',\n          description: 'The name of the parameter.',\n        },\n        allowEmptyValue: {\n          type: 'boolean',\n          default: false,\n          description: 'allows sending a parameter by name only or with an empty value.',\n        },\n        type: {\n          type: 'string',\n          enum: ['string', 'number', 'boolean', 'integer', 'array', 'file'],\n        },\n        format: {\n          type: 'string',\n        },\n        items: {\n          $ref: '#/definitions/primitivesItems',\n        },\n        collectionFormat: {\n          $ref: '#/definitions/collectionFormatWithMulti',\n        },\n        default: {\n          $ref: '#/definitions/default',\n        },\n        maximum: {\n          $ref: '#/definitions/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: '#/definitions/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: '#/definitions/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: '#/definitions/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: '#/definitions/maxLength',\n        },\n        minLength: {\n          $ref: '#/definitions/minLength',\n        },\n        pattern: {\n          $ref: '#/definitions/pattern',\n        },\n        maxItems: {\n          $ref: '#/definitions/maxItems',\n        },\n        minItems: {\n          $ref: '#/definitions/minItems',\n        },\n        uniqueItems: {\n          $ref: '#/definitions/uniqueItems',\n        },\n        enum: {\n          $ref: '#/definitions/enum',\n        },\n        multipleOf: {\n          $ref: '#/definitions/multipleOf',\n        },\n      },\n    },\n    pathParameterSubSchema: {\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      required: ['required'],\n      properties: {\n        required: {\n          type: 'boolean',\n          enum: [true],\n          description: 'Determines whether or not this parameter is required or optional.',\n        },\n        in: {\n          type: 'string',\n          description: 'Determines the location of the parameter.',\n          enum: ['path'],\n        },\n        description: {\n          type: 'string',\n          description:\n            'A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.',\n        },\n        name: {\n          type: 'string',\n          description: 'The name of the parameter.',\n        },\n        type: {\n          type: 'string',\n          enum: ['string', 'number', 'boolean', 'integer', 'array'],\n        },\n        format: {\n          type: 'string',\n        },\n        items: {\n          $ref: '#/definitions/primitivesItems',\n        },\n        collectionFormat: {\n          $ref: '#/definitions/collectionFormat',\n        },\n        default: {\n          $ref: '#/definitions/default',\n        },\n        maximum: {\n          $ref: '#/definitions/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: '#/definitions/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: '#/definitions/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: '#/definitions/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: '#/definitions/maxLength',\n        },\n        minLength: {\n          $ref: '#/definitions/minLength',\n        },\n        pattern: {\n          $ref: '#/definitions/pattern',\n        },\n        maxItems: {\n          $ref: '#/definitions/maxItems',\n        },\n        minItems: {\n          $ref: '#/definitions/minItems',\n        },\n        uniqueItems: {\n          $ref: '#/definitions/uniqueItems',\n        },\n        enum: {\n          $ref: '#/definitions/enum',\n        },\n        multipleOf: {\n          $ref: '#/definitions/multipleOf',\n        },\n      },\n    },\n    nonBodyParameter: {\n      type: 'object',\n      required: ['name', 'in', 'type'],\n      oneOf: [\n        {\n          $ref: '#/definitions/headerParameterSubSchema',\n        },\n        {\n          $ref: '#/definitions/formDataParameterSubSchema',\n        },\n        {\n          $ref: '#/definitions/queryParameterSubSchema',\n        },\n        {\n          $ref: '#/definitions/pathParameterSubSchema',\n        },\n      ],\n    },\n    parameter: {\n      oneOf: [\n        {\n          $ref: '#/definitions/bodyParameter',\n        },\n        {\n          $ref: '#/definitions/nonBodyParameter',\n        },\n      ],\n    },\n    schema: {\n      type: 'object',\n      description: 'A deterministic version of a JSON Schema object.',\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        $ref: {\n          type: 'string',\n        },\n        format: {\n          type: 'string',\n        },\n        title: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/title',\n        },\n        description: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/description',\n        },\n        default: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/default',\n        },\n        multipleOf: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/multipleOf',\n        },\n        maximum: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveInteger',\n        },\n        minLength: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0',\n        },\n        pattern: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/pattern',\n        },\n        maxItems: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveInteger',\n        },\n        minItems: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0',\n        },\n        uniqueItems: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/uniqueItems',\n        },\n        maxProperties: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveInteger',\n        },\n        minProperties: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0',\n        },\n        required: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/stringArray',\n        },\n        enum: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/enum',\n        },\n        additionalProperties: {\n          anyOf: [\n            {\n              $ref: '#/definitions/schema',\n            },\n            {\n              type: 'boolean',\n            },\n          ],\n          default: {},\n        },\n        type: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/type',\n        },\n        items: {\n          anyOf: [\n            {\n              $ref: '#/definitions/schema',\n            },\n            {\n              type: 'array',\n              minItems: 1,\n              items: {\n                $ref: '#/definitions/schema',\n              },\n            },\n          ],\n          default: {},\n        },\n        allOf: {\n          type: 'array',\n          minItems: 1,\n          items: {\n            $ref: '#/definitions/schema',\n          },\n        },\n        oneOf: {\n          type: 'array',\n          minItems: 1,\n          items: {\n            $ref: '#/definitions/schema',\n          },\n        },\n        anyOf: {\n          type: 'array',\n          minItems: 1,\n          items: {\n            $ref: '#/definitions/schema',\n          },\n        },\n        properties: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/schema',\n          },\n          default: {},\n        },\n        discriminator: {\n          type: 'string',\n        },\n        readOnly: {\n          type: 'boolean',\n          default: false,\n        },\n        xml: {\n          $ref: '#/definitions/xml',\n        },\n        externalDocs: {\n          $ref: '#/definitions/externalDocs',\n        },\n        example: {},\n      },\n      additionalProperties: false,\n    },\n    fileSchema: {\n      type: 'object',\n      description: 'A deterministic version of a JSON Schema object.',\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      required: ['type'],\n      properties: {\n        format: {\n          type: 'string',\n        },\n        title: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/title',\n        },\n        description: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/description',\n        },\n        default: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/default',\n        },\n        required: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/stringArray',\n        },\n        type: {\n          type: 'string',\n          enum: ['file'],\n        },\n        readOnly: {\n          type: 'boolean',\n          default: false,\n        },\n        externalDocs: {\n          $ref: '#/definitions/externalDocs',\n        },\n        example: {},\n      },\n      additionalProperties: false,\n    },\n    primitivesItems: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['string', 'number', 'integer', 'boolean', 'array'],\n        },\n        format: {\n          type: 'string',\n        },\n        items: {\n          $ref: '#/definitions/primitivesItems',\n        },\n        collectionFormat: {\n          $ref: '#/definitions/collectionFormat',\n        },\n        default: {\n          $ref: '#/definitions/default',\n        },\n        maximum: {\n          $ref: '#/definitions/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: '#/definitions/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: '#/definitions/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: '#/definitions/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: '#/definitions/maxLength',\n        },\n        minLength: {\n          $ref: '#/definitions/minLength',\n        },\n        pattern: {\n          $ref: '#/definitions/pattern',\n        },\n        maxItems: {\n          $ref: '#/definitions/maxItems',\n        },\n        minItems: {\n          $ref: '#/definitions/minItems',\n        },\n        uniqueItems: {\n          $ref: '#/definitions/uniqueItems',\n        },\n        enum: {\n          $ref: '#/definitions/enum',\n        },\n        multipleOf: {\n          $ref: '#/definitions/multipleOf',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    security: {\n      type: 'array',\n      items: {\n        $ref: '#/definitions/securityRequirement',\n      },\n      uniqueItems: true,\n    },\n    securityRequirement: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'string',\n        },\n        uniqueItems: true,\n      },\n    },\n    xml: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        name: {\n          type: 'string',\n        },\n        namespace: {\n          type: 'string',\n        },\n        prefix: {\n          type: 'string',\n        },\n        attribute: {\n          type: 'boolean',\n          default: false,\n        },\n        wrapped: {\n          type: 'boolean',\n          default: false,\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    tag: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['name'],\n      properties: {\n        name: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        externalDocs: {\n          $ref: '#/definitions/externalDocs',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    securityDefinitions: {\n      type: 'object',\n      additionalProperties: {\n        oneOf: [\n          {\n            $ref: '#/definitions/basicAuthenticationSecurity',\n          },\n          {\n            $ref: '#/definitions/apiKeySecurity',\n          },\n          {\n            $ref: '#/definitions/oauth2ImplicitSecurity',\n          },\n          {\n            $ref: '#/definitions/oauth2PasswordSecurity',\n          },\n          {\n            $ref: '#/definitions/oauth2ApplicationSecurity',\n          },\n          {\n            $ref: '#/definitions/oauth2AccessCodeSecurity',\n          },\n        ],\n      },\n      errorMessage: {\n        properties: {\n          basic: 'Invalid basic authentication security definition',\n          apiKey: 'Invalid apiKey authentication security definition',\n          oauth2: 'Invalid oauth2 authentication security definition',\n        },\n        _: 'Invalid security securityDefinitions',\n      },\n    },\n    basicAuthenticationSecurity: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['basic'],\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    apiKeySecurity: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type', 'name', 'in'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['apiKey'],\n        },\n        name: {\n          type: 'string',\n        },\n        in: {\n          type: 'string',\n          enum: ['header', 'query'],\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    oauth2ImplicitSecurity: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type', 'flow', 'authorizationUrl', 'scopes'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['oauth2'],\n        },\n        flow: {\n          type: 'string',\n          enum: ['implicit'],\n        },\n        scopes: {\n          $ref: '#/definitions/oauth2Scopes',\n        },\n        authorizationUrl: {\n          type: 'string',\n          format: 'uri',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    oauth2PasswordSecurity: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type', 'flow', 'tokenUrl', 'scopes'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['oauth2'],\n        },\n        flow: {\n          type: 'string',\n          enum: ['password'],\n        },\n        scopes: {\n          $ref: '#/definitions/oauth2Scopes',\n        },\n        tokenUrl: {\n          type: 'string',\n          format: 'uri',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    oauth2ApplicationSecurity: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type', 'flow', 'tokenUrl', 'scopes'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['oauth2'],\n        },\n        flow: {\n          type: 'string',\n          enum: ['application'],\n        },\n        scopes: {\n          $ref: '#/definitions/oauth2Scopes',\n        },\n        tokenUrl: {\n          type: 'string',\n          format: 'uri',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    oauth2AccessCodeSecurity: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type', 'flow', 'authorizationUrl', 'tokenUrl', 'scopes'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['oauth2'],\n        },\n        flow: {\n          type: 'string',\n          enum: ['accessCode'],\n        },\n        scopes: {\n          $ref: '#/definitions/oauth2Scopes',\n        },\n        authorizationUrl: {\n          type: 'string',\n          format: 'uri',\n        },\n        tokenUrl: {\n          type: 'string',\n          format: 'uri',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    oauth2Scopes: {\n      type: 'object',\n      additionalProperties: {\n        type: 'string',\n      },\n    },\n    mediaTypeList: {\n      type: 'array',\n      items: {\n        $ref: '#/definitions/mimeType',\n      },\n      uniqueItems: true,\n    },\n    parametersList: {\n      type: 'array',\n      description: 'The parameters needed to send a valid API call.',\n      additionalItems: false,\n      items: {\n        oneOf: [\n          {\n            $ref: '#/definitions/parameter',\n          },\n          {\n            $ref: '#/definitions/jsonReference',\n          },\n        ],\n      },\n      uniqueItems: true,\n    },\n    schemesList: {\n      type: 'array',\n      description: 'The transfer protocol of the API.',\n      items: {\n        type: 'string',\n        enum: ['http', 'https', 'ws', 'wss'],\n      },\n      uniqueItems: true,\n    },\n    collectionFormat: {\n      type: 'string',\n      enum: ['csv', 'ssv', 'tsv', 'pipes'],\n      default: 'csv',\n    },\n    collectionFormatWithMulti: {\n      type: 'string',\n      enum: ['csv', 'ssv', 'tsv', 'pipes', 'multi'],\n      default: 'csv',\n    },\n    title: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/title',\n    },\n    description: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/description',\n    },\n    default: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/default',\n    },\n    multipleOf: {\n      type: 'number',\n      exclusiveMinimum: 0,\n    },\n    maximum: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/maximum',\n    },\n    exclusiveMaximum: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/exclusiveMaximum',\n    },\n    minimum: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/minimum',\n    },\n    exclusiveMinimum: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/exclusiveMinimum',\n    },\n    maxLength: {\n      $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveInteger',\n    },\n    minLength: {\n      $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0',\n    },\n    pattern: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/pattern',\n    },\n    maxItems: {\n      $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveInteger',\n    },\n    minItems: {\n      $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0',\n    },\n    uniqueItems: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/uniqueItems',\n    },\n    enum: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/enum',\n    },\n    jsonReference: {\n      type: 'object',\n      required: ['$ref'],\n      additionalProperties: false,\n      properties: {\n        $ref: {\n          type: 'string',\n        },\n      },\n    },\n  },\n};\n\nconst OAS_3 = {\n  $id: 'https://spec.openapis.org/oas/3.0/schema/2019-04-02',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  description: 'Validation schema for OpenAPI Specification 3.0.X.',\n  type: 'object',\n  required: ['openapi', 'info', 'paths'],\n  properties: {\n    openapi: {\n      type: 'string',\n      pattern: '^3\\\\.0\\\\.\\\\d(-.+)?$',\n    },\n    info: {\n      $ref: '#/definitions/Info',\n    },\n    externalDocs: {\n      $ref: '#/definitions/ExternalDocumentation',\n    },\n    servers: {\n      type: 'array',\n      items: {\n        $ref: '#/definitions/Server',\n      },\n    },\n    security: {\n      type: 'array',\n      items: {\n        $ref: '#/definitions/SecurityRequirement',\n      },\n    },\n    tags: {\n      type: 'array',\n      items: {\n        $ref: '#/definitions/Tag',\n      },\n      uniqueItems: true,\n    },\n    paths: {\n      $ref: '#/definitions/Paths',\n    },\n    components: {\n      $ref: '#/definitions/Components',\n    },\n  },\n  patternProperties: {\n    '^x-': {},\n  },\n  additionalProperties: false,\n  definitions: {\n    Reference: {\n      type: 'object',\n      required: ['$ref'],\n      patternProperties: {\n        '^\\\\$ref$': {\n          type: 'string',\n          format: 'uri-reference',\n        },\n      },\n    },\n    Info: {\n      type: 'object',\n      required: ['title', 'version'],\n      properties: {\n        title: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        termsOfService: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        contact: {\n          $ref: '#/definitions/Contact',\n        },\n        license: {\n          $ref: '#/definitions/License',\n        },\n        version: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Contact: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        email: {\n          type: 'string',\n          format: 'email',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    License: {\n      type: 'object',\n      required: ['name'],\n      properties: {\n        name: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Server: {\n      type: 'object',\n      required: ['url'],\n      properties: {\n        url: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        variables: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/ServerVariable',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    ServerVariable: {\n      type: 'object',\n      required: ['default'],\n      properties: {\n        enum: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n        default: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Components: {\n      type: 'object',\n      properties: {\n        schemas: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Schema',\n                },\n                {\n                  $ref: '#/definitions/Reference',\n                },\n              ],\n            },\n          },\n        },\n        responses: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/Response',\n                },\n              ],\n            },\n          },\n        },\n        parameters: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/Parameter',\n                },\n              ],\n            },\n          },\n        },\n        examples: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/Example',\n                },\n              ],\n            },\n          },\n        },\n        requestBodies: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/RequestBody',\n                },\n              ],\n            },\n          },\n        },\n        headers: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/Header',\n                },\n              ],\n            },\n          },\n        },\n        securitySchemes: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/SecurityScheme',\n                },\n              ],\n            },\n          },\n        },\n        links: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/Link',\n                },\n              ],\n            },\n          },\n        },\n        callbacks: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/Callback',\n                },\n              ],\n            },\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Schema: {\n      type: 'object',\n      properties: {\n        title: {\n          type: 'string',\n        },\n        multipleOf: {\n          type: 'number',\n          exclusiveMinimum: 0,\n        },\n        maximum: {\n          type: 'number',\n        },\n        exclusiveMaximum: {\n          type: 'boolean',\n          default: false,\n        },\n        minimum: {\n          type: 'number',\n        },\n        exclusiveMinimum: {\n          type: 'boolean',\n          default: false,\n        },\n        maxLength: {\n          type: 'integer',\n          minimum: 0,\n        },\n        minLength: {\n          type: 'integer',\n          minimum: 0,\n          default: 0,\n        },\n        pattern: {\n          type: 'string',\n          format: 'regex',\n        },\n        maxItems: {\n          type: 'integer',\n          minimum: 0,\n        },\n        minItems: {\n          type: 'integer',\n          minimum: 0,\n          default: 0,\n        },\n        uniqueItems: {\n          type: 'boolean',\n          default: false,\n        },\n        maxProperties: {\n          type: 'integer',\n          minimum: 0,\n        },\n        minProperties: {\n          type: 'integer',\n          minimum: 0,\n          default: 0,\n        },\n        required: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n          minItems: 1,\n          uniqueItems: true,\n        },\n        enum: {\n          type: 'array',\n          items: {},\n          minItems: 1,\n          uniqueItems: false,\n        },\n        type: {\n          type: 'string',\n          enum: ['array', 'boolean', 'integer', 'number', 'object', 'string'],\n        },\n        not: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Schema',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        allOf: {\n          type: 'array',\n          items: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Schema',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        oneOf: {\n          type: 'array',\n          items: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Schema',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        anyOf: {\n          type: 'array',\n          items: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Schema',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        items: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Schema',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        properties: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Schema',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        additionalProperties: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Schema',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n            {\n              type: 'boolean',\n            },\n          ],\n          default: true,\n        },\n        description: {\n          type: 'string',\n        },\n        format: {\n          type: 'string',\n        },\n        default: {},\n        nullable: {\n          type: 'boolean',\n          default: false,\n        },\n        discriminator: {\n          $ref: '#/definitions/Discriminator',\n        },\n        readOnly: {\n          type: 'boolean',\n          default: false,\n        },\n        writeOnly: {\n          type: 'boolean',\n          default: false,\n        },\n        example: {},\n        externalDocs: {\n          $ref: '#/definitions/ExternalDocumentation',\n        },\n        deprecated: {\n          type: 'boolean',\n          default: false,\n        },\n        xml: {\n          $ref: '#/definitions/XML',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Discriminator: {\n      type: 'object',\n      required: ['propertyName'],\n      properties: {\n        propertyName: {\n          type: 'string',\n        },\n        mapping: {\n          type: 'object',\n          additionalProperties: {\n            type: 'string',\n          },\n        },\n      },\n    },\n    XML: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        namespace: {\n          type: 'string',\n          format: 'uri',\n        },\n        prefix: {\n          type: 'string',\n        },\n        attribute: {\n          type: 'boolean',\n          default: false,\n        },\n        wrapped: {\n          type: 'boolean',\n          default: false,\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Response: {\n      type: 'object',\n      required: ['description'],\n      properties: {\n        description: {\n          type: 'string',\n        },\n        headers: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Header',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        content: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/MediaType',\n          },\n        },\n        links: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Link',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    MediaType: {\n      type: 'object',\n      properties: {\n        schema: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Schema',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        example: {},\n        examples: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Example',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        encoding: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/Encoding',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n      allOf: [\n        {\n          $ref: '#/definitions/ExampleXORExamples',\n        },\n      ],\n    },\n    Example: {\n      type: 'object',\n      properties: {\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        value: {},\n        externalValue: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Header: {\n      type: 'object',\n      properties: {\n        description: {\n          type: 'string',\n        },\n        required: {\n          type: 'boolean',\n          default: false,\n        },\n        deprecated: {\n          type: 'boolean',\n          default: false,\n        },\n        allowEmptyValue: {\n          type: 'boolean',\n          default: false,\n        },\n        style: {\n          type: 'string',\n          enum: ['simple'],\n          default: 'simple',\n        },\n        explode: {\n          type: 'boolean',\n        },\n        allowReserved: {\n          type: 'boolean',\n          default: false,\n        },\n        schema: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Schema',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        content: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/MediaType',\n          },\n          minProperties: 1,\n          maxProperties: 1,\n        },\n        example: {},\n        examples: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Example',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n      allOf: [\n        {\n          $ref: '#/definitions/ExampleXORExamples',\n        },\n        {\n          $ref: '#/definitions/SchemaXORContent',\n        },\n      ],\n    },\n    Paths: {\n      type: 'object',\n      patternProperties: {\n        '^\\\\/': {\n          $ref: '#/definitions/PathItem',\n        },\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    PathItem: {\n      type: 'object',\n      properties: {\n        $ref: {\n          type: 'string',\n        },\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        servers: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/Server',\n          },\n        },\n        parameters: {\n          type: 'array',\n          items: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Parameter',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n          uniqueItems: true,\n        },\n      },\n      patternProperties: {\n        '^(get|put|post|delete|options|head|patch|trace)$': {\n          $ref: '#/definitions/Operation',\n        },\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Operation: {\n      type: 'object',\n      required: ['responses'],\n      properties: {\n        tags: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        externalDocs: {\n          $ref: '#/definitions/ExternalDocumentation',\n        },\n        operationId: {\n          type: 'string',\n        },\n        parameters: {\n          type: 'array',\n          items: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Parameter',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n          uniqueItems: true,\n        },\n        requestBody: {\n          oneOf: [\n            {\n              $ref: '#/definitions/RequestBody',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        responses: {\n          $ref: '#/definitions/Responses',\n        },\n        callbacks: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Callback',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        deprecated: {\n          type: 'boolean',\n          default: false,\n        },\n        security: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/SecurityRequirement',\n          },\n        },\n        servers: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/Server',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Responses: {\n      type: 'object',\n      properties: {\n        default: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Response',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n      },\n      patternProperties: {\n        '^[1-5](?:\\\\d{2}|XX)$': {\n          oneOf: [\n            {\n              $ref: '#/definitions/Response',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        '^x-': {},\n      },\n      minProperties: 1,\n      additionalProperties: false,\n    },\n    SecurityRequirement: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'string',\n        },\n      },\n    },\n    Tag: {\n      type: 'object',\n      required: ['name'],\n      properties: {\n        name: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        externalDocs: {\n          $ref: '#/definitions/ExternalDocumentation',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    ExternalDocumentation: {\n      type: 'object',\n      required: ['url'],\n      properties: {\n        description: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    ExampleXORExamples: {\n      description: 'Example and examples are mutually exclusive',\n      not: {\n        required: ['example', 'examples'],\n      },\n    },\n    SchemaXORContent: {\n      description: 'Schema and content are mutually exclusive, at least one is required',\n      not: {\n        required: ['schema', 'content'],\n      },\n      oneOf: [\n        {\n          required: ['schema'],\n        },\n        {\n          required: ['content'],\n          description: 'Some properties are not allowed if content is present',\n          allOf: [\n            {\n              not: {\n                required: ['style'],\n              },\n            },\n            {\n              not: {\n                required: ['explode'],\n              },\n            },\n            {\n              not: {\n                required: ['allowReserved'],\n              },\n            },\n            {\n              not: {\n                required: ['example'],\n              },\n            },\n            {\n              not: {\n                required: ['examples'],\n              },\n            },\n          ],\n        },\n      ],\n    },\n    Parameter: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        in: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        required: {\n          type: 'boolean',\n          default: false,\n        },\n        deprecated: {\n          type: 'boolean',\n          default: false,\n        },\n        allowEmptyValue: {\n          type: 'boolean',\n          default: false,\n        },\n        style: {\n          type: 'string',\n        },\n        explode: {\n          type: 'boolean',\n        },\n        allowReserved: {\n          type: 'boolean',\n          default: false,\n        },\n        schema: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Schema',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        content: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/MediaType',\n          },\n          minProperties: 1,\n          maxProperties: 1,\n        },\n        example: {},\n        examples: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Example',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n      required: ['name', 'in'],\n      allOf: [\n        {\n          $ref: '#/definitions/ExampleXORExamples',\n        },\n        {\n          $ref: '#/definitions/SchemaXORContent',\n        },\n        {\n          $ref: '#/definitions/ParameterLocation',\n        },\n      ],\n    },\n    ParameterLocation: {\n      description: 'Parameter location',\n      oneOf: [\n        {\n          description: 'Parameter in path',\n          required: ['required'],\n          properties: {\n            in: {\n              enum: ['path'],\n            },\n            style: {\n              enum: ['matrix', 'label', 'simple'],\n              default: 'simple',\n            },\n            required: {\n              enum: [true],\n            },\n          },\n        },\n        {\n          description: 'Parameter in query',\n          properties: {\n            in: {\n              enum: ['query'],\n            },\n            style: {\n              enum: ['form', 'spaceDelimited', 'pipeDelimited', 'deepObject'],\n              default: 'form',\n            },\n          },\n        },\n        {\n          description: 'Parameter in header',\n          properties: {\n            in: {\n              enum: ['header'],\n            },\n            style: {\n              enum: ['simple'],\n              default: 'simple',\n            },\n          },\n        },\n        {\n          description: 'Parameter in cookie',\n          properties: {\n            in: {\n              enum: ['cookie'],\n            },\n            style: {\n              enum: ['form'],\n              default: 'form',\n            },\n          },\n        },\n      ],\n    },\n    RequestBody: {\n      type: 'object',\n      required: ['content'],\n      properties: {\n        description: {\n          type: 'string',\n        },\n        content: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/MediaType',\n          },\n        },\n        required: {\n          type: 'boolean',\n          default: false,\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    SecurityScheme: {\n      oneOf: [\n        {\n          $ref: '#/definitions/APIKeySecurityScheme',\n        },\n        {\n          $ref: '#/definitions/HTTPSecurityScheme',\n        },\n        {\n          $ref: '#/definitions/OAuth2SecurityScheme',\n        },\n        {\n          $ref: '#/definitions/OpenIdConnectSecurityScheme',\n        },\n      ],\n    },\n    APIKeySecurityScheme: {\n      type: 'object',\n      required: ['type', 'name', 'in'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['apiKey'],\n        },\n        name: {\n          type: 'string',\n        },\n        in: {\n          type: 'string',\n          enum: ['header', 'query', 'cookie'],\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    HTTPSecurityScheme: {\n      type: 'object',\n      required: ['scheme', 'type'],\n      properties: {\n        scheme: {\n          type: 'string',\n        },\n        bearerFormat: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        type: {\n          type: 'string',\n          enum: ['http'],\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n      oneOf: [\n        {\n          description: 'Bearer',\n          properties: {\n            scheme: {\n              enum: ['bearer'],\n            },\n          },\n        },\n        {\n          description: 'Non Bearer',\n          not: {\n            required: ['bearerFormat'],\n          },\n          properties: {\n            scheme: {\n              not: {\n                enum: ['bearer'],\n              },\n            },\n          },\n        },\n      ],\n    },\n    OAuth2SecurityScheme: {\n      type: 'object',\n      required: ['type', 'flows'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['oauth2'],\n        },\n        flows: {\n          $ref: '#/definitions/OAuthFlows',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    OpenIdConnectSecurityScheme: {\n      type: 'object',\n      required: ['type', 'openIdConnectUrl'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['openIdConnect'],\n        },\n        openIdConnectUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    OAuthFlows: {\n      type: 'object',\n      properties: {\n        implicit: {\n          $ref: '#/definitions/ImplicitOAuthFlow',\n        },\n        password: {\n          $ref: '#/definitions/PasswordOAuthFlow',\n        },\n        clientCredentials: {\n          $ref: '#/definitions/ClientCredentialsFlow',\n        },\n        authorizationCode: {\n          $ref: '#/definitions/AuthorizationCodeOAuthFlow',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    ImplicitOAuthFlow: {\n      type: 'object',\n      required: ['authorizationUrl', 'scopes'],\n      properties: {\n        authorizationUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        refreshUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        scopes: {\n          type: 'object',\n          additionalProperties: {\n            type: 'string',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    PasswordOAuthFlow: {\n      type: 'object',\n      required: ['tokenUrl', 'scopes'],\n      properties: {\n        tokenUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        refreshUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        scopes: {\n          type: 'object',\n          additionalProperties: {\n            type: 'string',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    ClientCredentialsFlow: {\n      type: 'object',\n      required: ['tokenUrl', 'scopes'],\n      properties: {\n        tokenUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        refreshUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        scopes: {\n          type: 'object',\n          additionalProperties: {\n            type: 'string',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    AuthorizationCodeOAuthFlow: {\n      type: 'object',\n      required: ['authorizationUrl', 'tokenUrl', 'scopes'],\n      properties: {\n        authorizationUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        tokenUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        refreshUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        scopes: {\n          type: 'object',\n          additionalProperties: {\n            type: 'string',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Link: {\n      type: 'object',\n      properties: {\n        operationId: {\n          type: 'string',\n        },\n        operationRef: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        parameters: {\n          type: 'object',\n          additionalProperties: {},\n        },\n        requestBody: {},\n        description: {\n          type: 'string',\n        },\n        server: {\n          $ref: '#/definitions/Server',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n      not: {\n        description: 'Operation Id and Operation Ref are mutually exclusive',\n        required: ['operationId', 'operationRef'],\n      },\n    },\n    Callback: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/definitions/PathItem',\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n    },\n    Encoding: {\n      type: 'object',\n      properties: {\n        contentType: {\n          type: 'string',\n        },\n        headers: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/Header',\n          },\n        },\n        style: {\n          type: 'string',\n          enum: ['form', 'spaceDelimited', 'pipeDelimited', 'deepObject'],\n        },\n        explode: {\n          type: 'boolean',\n        },\n        allowReserved: {\n          type: 'boolean',\n          default: false,\n        },\n      },\n      additionalProperties: false,\n    },\n  },\n};\n\nconst OAS_3_1 = {\n  $id: 'https://spec.openapis.org/oas/3.1/schema/2021-09-28',\n  $schema: 'https://json-schema.org/draft/2020-12/schema',\n  type: 'object',\n  properties: {\n    openapi: {\n      type: 'string',\n      pattern: '^3\\\\.1\\\\.\\\\d+(-.+)?$',\n    },\n    info: {\n      $ref: '#/$defs/info',\n    },\n    jsonSchemaDialect: {\n      type: 'string',\n      format: 'uri',\n      default: 'https://spec.openapis.org/oas/3.1/dialect/base',\n    },\n    servers: {\n      type: 'array',\n      items: {\n        $ref: '#/$defs/server',\n      },\n    },\n    paths: {\n      $ref: '#/$defs/paths',\n    },\n    webhooks: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/$defs/path-item-or-reference',\n      },\n    },\n    components: {\n      $ref: '#/$defs/components',\n    },\n    security: {\n      type: 'array',\n      items: {\n        $ref: '#/$defs/security-requirement',\n      },\n    },\n    tags: {\n      type: 'array',\n      items: {\n        $ref: '#/$defs/tag',\n      },\n    },\n    externalDocs: {\n      $ref: '#/$defs/external-documentation',\n    },\n  },\n  required: ['openapi', 'info'],\n  anyOf: [\n    {\n      required: ['paths'],\n      errorMessage: 'The document must have either \"paths\", \"webhooks\" or \"components\"',\n    },\n    {\n      required: ['components'],\n    },\n    {\n      required: ['webhooks'],\n    },\n  ],\n  $ref: '#/$defs/specification-extensions',\n  unevaluatedProperties: false,\n  $defs: {\n    info: {\n      type: 'object',\n      properties: {\n        title: {\n          type: 'string',\n        },\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        termsOfService: {\n          type: 'string',\n        },\n        contact: {\n          $ref: '#/$defs/contact',\n        },\n        license: {\n          $ref: '#/$defs/license',\n        },\n        version: {\n          type: 'string',\n        },\n      },\n      required: ['title', 'version'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    contact: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n        },\n        email: {\n          type: 'string',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    license: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        identifier: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n          format: 'uri',\n        },\n      },\n      required: ['name'],\n      oneOf: [\n        {\n          required: ['identifier'],\n        },\n        {\n          required: ['url'],\n        },\n      ],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    server: {\n      type: 'object',\n      properties: {\n        url: {\n          type: 'string',\n          format: 'uri-template',\n        },\n        description: {\n          type: 'string',\n        },\n        variables: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/server-variable',\n          },\n        },\n      },\n      required: ['url'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'server-variable': {\n      type: 'object',\n      properties: {\n        enum: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n          minItems: 1,\n        },\n        default: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      required: ['default'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    components: {\n      type: 'object',\n      properties: {\n        schemas: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/schema',\n          },\n        },\n        responses: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/response-or-reference',\n          },\n        },\n        parameters: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/parameter-or-reference',\n          },\n        },\n        examples: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/example-or-reference',\n          },\n        },\n        requestBodies: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/request-body-or-reference',\n          },\n        },\n        headers: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/header-or-reference',\n          },\n        },\n        securitySchemes: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/security-scheme-or-reference',\n          },\n        },\n        links: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/link-or-reference',\n          },\n        },\n        callbacks: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/callbacks-or-reference',\n          },\n        },\n        pathItems: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/path-item-or-reference',\n          },\n        },\n      },\n      patternProperties: {\n        '^(schemas|responses|parameters|examples|requestBodies|headers|securitySchemes|links|callbacks|pathItems)$': {\n          $comment:\n            'Enumerating all of the property names in the regex above is necessary for unevaluatedProperties to work as expected',\n          propertyNames: {\n            pattern: '^[a-zA-Z0-9._-]+$',\n          },\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    paths: {\n      type: 'object',\n      patternProperties: {\n        '^/': {\n          $ref: '#/$defs/path-item',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'path-item': {\n      type: 'object',\n      properties: {\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        servers: {\n          type: 'array',\n          items: {\n            $ref: '#/$defs/server',\n          },\n        },\n        parameters: {\n          type: 'array',\n          items: {\n            $ref: '#/$defs/parameter-or-reference',\n          },\n        },\n      },\n      patternProperties: {\n        '^(get|put|post|delete|options|head|patch|trace)$': {\n          $ref: '#/$defs/operation',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'path-item-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/path-item',\n      },\n    },\n    operation: {\n      type: 'object',\n      properties: {\n        tags: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        externalDocs: {\n          $ref: '#/$defs/external-documentation',\n        },\n        operationId: {\n          type: 'string',\n        },\n        parameters: {\n          type: 'array',\n          items: {\n            $ref: '#/$defs/parameter-or-reference',\n          },\n        },\n        requestBody: {\n          $ref: '#/$defs/request-body-or-reference',\n        },\n        responses: {\n          $ref: '#/$defs/responses',\n        },\n        callbacks: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/callbacks-or-reference',\n          },\n        },\n        deprecated: {\n          default: false,\n          type: 'boolean',\n        },\n        security: {\n          type: 'array',\n          items: {\n            $ref: '#/$defs/security-requirement',\n          },\n        },\n        servers: {\n          type: 'array',\n          items: {\n            $ref: '#/$defs/server',\n          },\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'external-documentation': {\n      type: 'object',\n      properties: {\n        description: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n          format: 'uri',\n        },\n      },\n      required: ['url'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    parameter: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        in: {\n          enum: ['query', 'header', 'path', 'cookie'],\n        },\n        description: {\n          type: 'string',\n        },\n        required: {\n          default: false,\n          type: 'boolean',\n        },\n        deprecated: {\n          default: false,\n          type: 'boolean',\n        },\n        allowEmptyValue: {\n          default: false,\n          type: 'boolean',\n        },\n        schema: {\n          $ref: '#/$defs/schema',\n        },\n        content: {\n          $ref: '#/$defs/content',\n        },\n      },\n      required: ['in'],\n      oneOf: [\n        {\n          required: ['schema'],\n        },\n        {\n          required: ['content'],\n        },\n      ],\n      dependentSchemas: {\n        schema: {\n          properties: {\n            style: {\n              type: 'string',\n            },\n            explode: {\n              type: 'boolean',\n            },\n            allowReserved: {\n              default: false,\n              type: 'boolean',\n            },\n          },\n          allOf: [\n            {\n              $ref: '#/$defs/examples',\n            },\n            {\n              $ref: '#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-path',\n            },\n            {\n              $ref: '#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-header',\n            },\n            {\n              $ref: '#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-query',\n            },\n            {\n              $ref: '#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-cookie',\n            },\n            {\n              $ref: '#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-form',\n            },\n          ],\n          $defs: {\n            'styles-for-path': {\n              if: {\n                properties: {\n                  in: {\n                    const: 'path',\n                  },\n                },\n                required: ['in'],\n              },\n              then: {\n                properties: {\n                  name: {\n                    pattern: '[^/#?]+$',\n                  },\n                  style: {\n                    default: 'simple',\n                    enum: ['matrix', 'label', 'simple'],\n                  },\n                  required: {\n                    const: true,\n                  },\n                },\n                required: ['required'],\n              },\n            },\n            'styles-for-header': {\n              if: {\n                properties: {\n                  in: {\n                    const: 'header',\n                  },\n                },\n                required: ['in'],\n              },\n              then: {\n                properties: {\n                  style: {\n                    default: 'simple',\n                    const: 'simple',\n                  },\n                },\n              },\n            },\n            'styles-for-query': {\n              if: {\n                properties: {\n                  in: {\n                    const: 'query',\n                  },\n                },\n                required: ['in'],\n              },\n              then: {\n                properties: {\n                  style: {\n                    default: 'form',\n                    enum: ['form', 'spaceDelimited', 'pipeDelimited', 'deepObject'],\n                  },\n                },\n              },\n            },\n            'styles-for-cookie': {\n              if: {\n                properties: {\n                  in: {\n                    const: 'cookie',\n                  },\n                },\n                required: ['in'],\n              },\n              then: {\n                properties: {\n                  style: {\n                    default: 'form',\n                    const: 'form',\n                  },\n                },\n              },\n            },\n            'styles-for-form': {\n              if: {\n                properties: {\n                  style: {\n                    const: 'form',\n                  },\n                },\n                required: ['style'],\n              },\n              then: {\n                properties: {\n                  explode: {\n                    default: true,\n                  },\n                },\n              },\n              else: {\n                properties: {\n                  explode: {\n                    default: false,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'parameter-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/parameter',\n      },\n    },\n    'request-body': {\n      type: 'object',\n      properties: {\n        description: {\n          type: 'string',\n        },\n        content: {\n          $ref: '#/$defs/content',\n        },\n        required: {\n          default: false,\n          type: 'boolean',\n        },\n      },\n      required: ['content'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'request-body-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/request-body',\n      },\n    },\n    content: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/$defs/media-type',\n      },\n      propertyNames: {\n        format: 'media-range',\n      },\n    },\n    'media-type': {\n      type: 'object',\n      properties: {\n        schema: {\n          $ref: '#/$defs/schema',\n        },\n        encoding: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/encoding',\n          },\n        },\n      },\n      allOf: [\n        {\n          $ref: '#/$defs/specification-extensions',\n        },\n        {\n          $ref: '#/$defs/examples',\n        },\n      ],\n      unevaluatedProperties: false,\n    },\n    encoding: {\n      type: 'object',\n      properties: {\n        contentType: {\n          type: 'string',\n          format: 'media-range',\n        },\n        headers: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/header-or-reference',\n          },\n        },\n        style: {\n          default: 'form',\n          enum: ['form', 'spaceDelimited', 'pipeDelimited', 'deepObject'],\n        },\n        explode: {\n          type: 'boolean',\n        },\n        allowReserved: {\n          default: false,\n          type: 'boolean',\n        },\n      },\n      allOf: [\n        {\n          $ref: '#/$defs/specification-extensions',\n        },\n        {\n          $ref: '#/$defs/encoding/$defs/explode-default',\n        },\n      ],\n      unevaluatedProperties: false,\n      $defs: {\n        'explode-default': {\n          if: {\n            properties: {\n              style: {\n                const: 'form',\n              },\n            },\n            required: ['style'],\n          },\n          then: {\n            properties: {\n              explode: {\n                default: true,\n              },\n            },\n          },\n          else: {\n            properties: {\n              explode: {\n                default: false,\n              },\n            },\n          },\n        },\n      },\n    },\n    responses: {\n      type: 'object',\n      properties: {\n        default: {\n          $ref: '#/$defs/response-or-reference',\n        },\n      },\n      patternProperties: {\n        '^[1-5](?:[0-9]{2}|XX)$': {\n          $ref: '#/$defs/response-or-reference',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    response: {\n      type: 'object',\n      properties: {\n        description: {\n          type: 'string',\n        },\n        headers: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/header-or-reference',\n          },\n        },\n        content: {\n          $ref: '#/$defs/content',\n        },\n        links: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/link-or-reference',\n          },\n        },\n      },\n      required: ['description'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'response-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/response',\n      },\n    },\n    callbacks: {\n      type: 'object',\n      $ref: '#/$defs/specification-extensions',\n      additionalProperties: {\n        $ref: '#/$defs/path-item-or-reference',\n      },\n    },\n    'callbacks-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/callbacks',\n      },\n    },\n    example: {\n      type: 'object',\n      properties: {\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        value: true,\n        externalValue: {\n          type: 'string',\n          format: 'uri',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'example-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/example',\n      },\n    },\n    link: {\n      type: 'object',\n      properties: {\n        operationRef: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        operationId: true,\n        parameters: {\n          $ref: '#/$defs/map-of-strings',\n        },\n        requestBody: true,\n        description: {\n          type: 'string',\n        },\n        body: {\n          $ref: '#/$defs/server',\n        },\n      },\n      oneOf: [\n        {\n          required: ['operationRef'],\n        },\n        {\n          required: ['operationId'],\n        },\n      ],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'link-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/link',\n      },\n    },\n    header: {\n      type: 'object',\n      properties: {\n        description: {\n          type: 'string',\n        },\n        required: {\n          default: false,\n          type: 'boolean',\n        },\n        deprecated: {\n          default: false,\n          type: 'boolean',\n        },\n        schema: {\n          $ref: '#/$defs/schema',\n        },\n        content: {\n          $ref: '#/$defs/content',\n        },\n      },\n      oneOf: [\n        {\n          required: ['schema'],\n        },\n        {\n          required: ['content'],\n        },\n      ],\n      dependentSchemas: {\n        schema: {\n          properties: {\n            style: {\n              default: 'simple',\n              const: 'simple',\n            },\n            explode: {\n              default: false,\n              type: 'boolean',\n            },\n          },\n          $ref: '#/$defs/examples',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'header-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/header',\n      },\n    },\n    tag: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        externalDocs: {\n          $ref: '#/$defs/external-documentation',\n        },\n      },\n      required: ['name'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    reference: {\n      type: 'object',\n      properties: {\n        $ref: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      unevaluatedProperties: false,\n    },\n    schema: {\n      $dynamicAnchor: 'meta',\n      type: ['object', 'boolean'],\n    },\n    'security-scheme': {\n      type: 'object',\n      properties: {\n        type: {\n          enum: ['apiKey', 'http', 'mutualTLS', 'oauth2', 'openIdConnect'],\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      required: ['type'],\n      allOf: [\n        {\n          $ref: '#/$defs/specification-extensions',\n        },\n        {\n          $ref: '#/$defs/security-scheme/$defs/type-apikey',\n        },\n        {\n          $ref: '#/$defs/security-scheme/$defs/type-http',\n        },\n        {\n          $ref: '#/$defs/security-scheme/$defs/type-http-bearer',\n        },\n        {\n          $ref: '#/$defs/security-scheme/$defs/type-oauth2',\n        },\n        {\n          $ref: '#/$defs/security-scheme/$defs/type-oidc',\n        },\n      ],\n      unevaluatedProperties: false,\n      $defs: {\n        'type-apikey': {\n          if: {\n            properties: {\n              type: {\n                const: 'apiKey',\n              },\n            },\n            required: ['type'],\n          },\n          then: {\n            properties: {\n              name: {\n                type: 'string',\n              },\n              in: {\n                enum: ['query', 'header', 'cookie'],\n              },\n            },\n            required: ['name', 'in'],\n          },\n        },\n        'type-http': {\n          if: {\n            properties: {\n              type: {\n                const: 'http',\n              },\n            },\n            required: ['type'],\n          },\n          then: {\n            properties: {\n              scheme: {\n                type: 'string',\n              },\n            },\n            required: ['scheme'],\n          },\n        },\n        'type-http-bearer': {\n          if: {\n            properties: {\n              type: {\n                const: 'http',\n              },\n              scheme: {\n                type: 'string',\n                pattern: '^[Bb][Ee][Aa][Rr][Ee][Rr]$',\n              },\n            },\n            required: ['type', 'scheme'],\n          },\n          then: {\n            properties: {\n              bearerFormat: {\n                type: 'string',\n              },\n            },\n          },\n        },\n        'type-oauth2': {\n          if: {\n            properties: {\n              type: {\n                const: 'oauth2',\n              },\n            },\n            required: ['type'],\n          },\n          then: {\n            properties: {\n              flows: {\n                $ref: '#/$defs/oauth-flows',\n              },\n            },\n            required: ['flows'],\n          },\n        },\n        'type-oidc': {\n          if: {\n            properties: {\n              type: {\n                const: 'openIdConnect',\n              },\n            },\n            required: ['type'],\n          },\n          then: {\n            properties: {\n              openIdConnectUrl: {\n                type: 'string',\n                format: 'uri',\n              },\n            },\n            required: ['openIdConnectUrl'],\n          },\n        },\n      },\n    },\n    'security-scheme-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/security-scheme',\n      },\n    },\n    'oauth-flows': {\n      type: 'object',\n      properties: {\n        implicit: {\n          $ref: '#/$defs/oauth-flows/$defs/implicit',\n        },\n        password: {\n          $ref: '#/$defs/oauth-flows/$defs/password',\n        },\n        clientCredentials: {\n          $ref: '#/$defs/oauth-flows/$defs/client-credentials',\n        },\n        authorizationCode: {\n          $ref: '#/$defs/oauth-flows/$defs/authorization-code',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n      $defs: {\n        implicit: {\n          type: 'object',\n          properties: {\n            authorizationUrl: {\n              type: 'string',\n            },\n            refreshUrl: {\n              type: 'string',\n            },\n            scopes: {\n              $ref: '#/$defs/map-of-strings',\n            },\n          },\n          required: ['authorizationUrl', 'scopes'],\n          $ref: '#/$defs/specification-extensions',\n          unevaluatedProperties: false,\n        },\n        password: {\n          type: 'object',\n          properties: {\n            tokenUrl: {\n              type: 'string',\n            },\n            refreshUrl: {\n              type: 'string',\n            },\n            scopes: {\n              $ref: '#/$defs/map-of-strings',\n            },\n          },\n          required: ['tokenUrl', 'scopes'],\n          $ref: '#/$defs/specification-extensions',\n          unevaluatedProperties: false,\n        },\n        'client-credentials': {\n          type: 'object',\n          properties: {\n            tokenUrl: {\n              type: 'string',\n            },\n            refreshUrl: {\n              type: 'string',\n            },\n            scopes: {\n              $ref: '#/$defs/map-of-strings',\n            },\n          },\n          required: ['tokenUrl', 'scopes'],\n          $ref: '#/$defs/specification-extensions',\n          unevaluatedProperties: false,\n        },\n        'authorization-code': {\n          type: 'object',\n          properties: {\n            authorizationUrl: {\n              type: 'string',\n            },\n            tokenUrl: {\n              type: 'string',\n            },\n            refreshUrl: {\n              type: 'string',\n            },\n            scopes: {\n              $ref: '#/$defs/map-of-strings',\n            },\n          },\n          required: ['authorizationUrl', 'tokenUrl', 'scopes'],\n          $ref: '#/$defs/specification-extensions',\n          unevaluatedProperties: false,\n        },\n      },\n    },\n    'security-requirement': {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'string',\n        },\n      },\n    },\n    'specification-extensions': {\n      patternProperties: {\n        '^x-': true,\n      },\n    },\n    examples: {\n      properties: {\n        example: true,\n        examples: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/example-or-reference',\n          },\n        },\n      },\n    },\n    'map-of-strings': {\n      type: 'object',\n      additionalProperties: {\n        type: 'string',\n      },\n    },\n  },\n};\n\nconst OAS_SCHEMAS = {\n  '2.0': OAS_2,\n  '3.0': OAS_3,\n  3.1: OAS_3_1,\n};\n\nfunction shouldIgnoreError(error) {\n  return (\n    // oneOf is a fairly error as we have 2 options to choose from for most of the time.\n    error.keyword === 'oneOf' ||\n    // the required $ref is entirely useless, since oas-schema rules operate on resolved content, so there won't be any $refs in the document\n    (error.keyword === 'required' && error.params.missingProperty === '$ref')\n  );\n}\n\n// this is supposed to cover edge cases we need to cover manually, when it's impossible to detect the most appropriate error, i.e. oneOf consisting of more than 3 members, etc.\n// note,  more errors can be included if certain messages reported by AJV are not quite meaningful\nconst ERROR_MAP = [\n  {\n    path: /^components\\/securitySchemes\\/[^/]+$/,\n    message: 'Invalid security scheme',\n  },\n];\n\n// The function removes irrelevant (aka misleading, confusing, useless, whatever you call it) errors.\n// There are a few exceptions, i.e. security components I covered manually,\n// yet apart from them we usually deal with a relatively simple scenario that can be literally expressed as: \"either proper value of $ref property\".\n// The $ref part is never going to be interesting for us, because both oas-schema rules operate on resolved content, so we won't have any $refs left.\n// As you can see, what we deal here wit is actually not really oneOf anymore - it's always the first member of oneOf we match against.\n// That being said, we always strip both oneOf and $ref, since we are always interested in the first error.\nexport function prepareResults(errors) {\n  // Update additionalProperties errors to make them more precise and prevent them from being treated as duplicates\n  for (const error of errors) {\n    if (error.keyword === 'additionalProperties') {\n      error.instancePath = `${error.instancePath}/${String(error.params['additionalProperty'])}`;\n    }\n  }\n\n  for (let i = 0; i < errors.length; i++) {\n    const error = errors[i];\n\n    if (i + 1 < errors.length && errors[i + 1].instancePath === error.instancePath) {\n      errors.splice(i + 1, 1);\n      i--;\n    } else if (i > 0 && shouldIgnoreError(error) && errors[i - 1].instancePath.startsWith(error.instancePath)) {\n      errors.splice(i, 1);\n      i--;\n    }\n  }\n}\n\nfunction applyManualReplacements(errors) {\n  for (const error of errors) {\n    if (error.path === void 0) continue;\n\n    const joinedPath = error.path.join('/');\n\n    for (const mappedError of ERROR_MAP) {\n      if (mappedError.path.test(joinedPath)) {\n        error.message = mappedError.message;\n        break;\n      }\n    }\n  }\n}\n\nexport default createRulesetFunction(\n  {\n    input: null,\n    options: null,\n  },\n  function oasDocumentSchema(targetVal, opts, context) {\n    const formats = context.document.formats;\n    if (formats === null || formats === void 0) return;\n\n    const schema = formats.has(oas2)\n      ? OAS_SCHEMAS['2.0']\n      : formats.has(oas3_1)\n      ? OAS_SCHEMAS['3.1']\n      : OAS_SCHEMAS['3.0'];\n\n    const errors = schemaFn(targetVal, { allErrors: true, schema, prepareResults }, context);\n\n    if (Array.isArray(errors)) {\n      applyManualReplacements(errors);\n    }\n\n    return errors;\n  },\n);"
    },
    {
      "id": "zOChiBUKjvzuX3xKZc2uH",
      "extendedFrom": "",
      "name": "oasExample",
      "content": "import { isPlainObject, pointerToPath } from '@stoplight/json';\nimport { createRulesetFunction } from '@stoplight/spectral-core';\nimport { oas2, oas3_1, extractDraftVersion, oas3_0 } from '@stoplight/spectral-formats';\nimport { schema as schemaFn } from '@stoplight/spectral-functions';\nimport traverse from 'json-schema-traverse';\n\nconst MEDIA_VALIDATION_ITEMS = {\n  2: [\n    {\n      field: 'examples',\n      multiple: true,\n      keyed: false,\n    },\n  ],\n  3: [\n    {\n      field: 'example',\n      multiple: false,\n      keyed: false,\n    },\n    {\n      field: 'examples',\n      multiple: true,\n      keyed: true,\n    },\n  ],\n};\n\nconst SCHEMA_VALIDATION_ITEMS = {\n  2: ['example', 'x-example', 'default'],\n  3: ['example', 'default'],\n};\n\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nfunction rewriteNullable(schema, errors) {\n  for (const error of errors) {\n    if (error.keyword !== 'type') continue;\n    const value = getSchemaProperty(schema, error.schemaPath);\n    if (isPlainObject(value) && value.nullable === true) {\n      error.message += ',null';\n    }\n  }\n}\n\nconst visitOAS2 = schema => {\n  if (schema['x-nullable'] === true) {\n    schema.nullable = true;\n    delete schema['x-nullable'];\n  }\n};\n\nfunction getSchemaProperty(schema, schemaPath) {\n  const path = pointerToPath(schemaPath);\n  let value = schema;\n\n  for (const fragment of path.slice(0, -1)) {\n    if (!isPlainObject(value)) {\n      return;\n    }\n\n    value = value[fragment];\n  }\n\n  return value;\n}\n\nconst oasSchema = createRulesetFunction(\n  {\n    input: null,\n    options: {\n      type: 'object',\n      properties: {\n        schema: {\n          type: 'object',\n        },\n      },\n      additionalProperties: false,\n    },\n  },\n  function oasSchema(targetVal, opts, context) {\n    const formats = context.document.formats;\n\n    let { schema } = opts;\n\n    let dialect = 'draft4';\n    let prepareResults;\n\n    if (!formats) {\n      dialect = 'auto';\n    } else if (formats.has(oas3_1)) {\n      if (isPlainObject(context.document.data) && typeof context.document.data.jsonSchemaDialect === 'string') {\n        dialect = extractDraftVersion(context.document.data.jsonSchemaDialect) ?? 'draft2020-12';\n      } else {\n        dialect = 'draft2020-12';\n      }\n    } else if (formats.has(oas3_0)) {\n      prepareResults = rewriteNullable.bind(null, schema);\n    } else if (formats.has(oas2)) {\n      const clonedSchema = JSON.parse(JSON.stringify(schema));\n      traverse(clonedSchema, visitOAS2);\n      schema = clonedSchema;\n      prepareResults = rewriteNullable.bind(null, clonedSchema);\n    }\n\n    return schemaFn(\n      targetVal,\n      {\n        ...opts,\n        schema,\n        prepareResults,\n        dialect,\n      },\n      context,\n    );\n  },\n);\n\nfunction* getMediaValidationItems(items, targetVal, givenPath, oasVersion) {\n  for (const { field, keyed, multiple } of items) {\n    if (!(field in targetVal)) {\n      continue;\n    }\n\n    const value = targetVal[field];\n\n    if (multiple) {\n      if (!isObject(value)) continue;\n\n      for (const exampleKey of Object.keys(value)) {\n        const exampleValue = value[exampleKey];\n        if (oasVersion === 3 && keyed && (!isObject(exampleValue) || 'externalValue' in exampleValue)) {\n          // should be covered by oas3-examples-value-or-externalValue\n          continue;\n        }\n\n        const targetPath = [...givenPath, field, exampleKey];\n\n        if (keyed) {\n          targetPath.push('value');\n        }\n\n        yield {\n          value: keyed && isObject(exampleValue) ? exampleValue.value : exampleValue,\n          path: targetPath,\n        };\n      }\n\n      return;\n    } else {\n      return yield {\n        value,\n        path: [...givenPath, field],\n      };\n    }\n  }\n}\n\nfunction* getSchemaValidationItems(fields, targetVal, givenPath) {\n  for (const field of fields) {\n    if (!(field in targetVal)) {\n      continue;\n    }\n\n    yield {\n      value: targetVal[field],\n      path: [...givenPath, field],\n    };\n  }\n}\n\nexport default createRulesetFunction(\n  {\n    input: {\n      type: 'object',\n    },\n    options: {\n      type: 'object',\n      properties: {\n        oasVersion: {\n          type: 'number'\n        },\n        schemaField: {\n          type: 'string',\n        },\n        type: {\n          enum: ['media', 'schema'],\n        },\n      },\n      additionalProperties: false,\n    },\n  },\n  function oasExample(targetVal, opts, context) {\n    const formats = context.document.formats;\n    const schemaOpts = {\n      schema: opts.schemaField === '$' ? targetVal : targetVal[opts.schemaField],\n    };\n\n    let results = void 0;\n    let oasVersion = parseInt(opts.oasVersion);\n\n    const validationItems =\n      opts.type === 'schema'\n        ? getSchemaValidationItems(SCHEMA_VALIDATION_ITEMS[oasVersion], targetVal, context.path)\n        : getMediaValidationItems(MEDIA_VALIDATION_ITEMS[oasVersion], targetVal, context.path, oasVersion);\n\n    if (formats?.has(oas2) && 'required' in schemaOpts.schema && typeof schemaOpts.schema.required === 'boolean') {\n      schemaOpts.schema = { ...schemaOpts.schema };\n      delete schemaOpts.schema.required;\n    }\n\n    for (const validationItem of validationItems) {\n      const result = oasSchema(validationItem.value, schemaOpts, {\n        ...context,\n        path: validationItem.path,\n      });\n\n      if (Array.isArray(result)) {\n        if (results === void 0) results = [];\n        results.push(...result);\n      }\n    }\n\n    return results;\n  },\n);"
    },
    {
      "id": "tPGyv3BIuLKjoBsv-zU66",
      "extendedFrom": "",
      "name": "oasOpFormDataConsumeCheck",
      "content": "function isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nconst validConsumeValue = /(application\\/x-www-form-urlencoded|multipart\\/form-data)/;\n\nexport const oasOpFormDataConsumeCheck = targetVal => {\n  if (!isObject(targetVal)) return;\n\n  const parameters = targetVal.parameters;\n  const consumes = targetVal.consumes;\n\n  if (!Array.isArray(parameters) || !Array.isArray(consumes)) {\n    return;\n  }\n\n  if (parameters.some(p => isObject(p) && p.in === 'formData') && !validConsumeValue.test(consumes?.join(','))) {\n    return [\n      {\n        message: 'Consumes must include urlencoded, multipart, or form-data media type when using formData parameter.',\n      },\n    ];\n  }\n\n  return;\n};\n\nexport default oasOpFormDataConsumeCheck;\n"
    },
    {
      "id": "PnSOo6IU4jGENj9n9cuSF",
      "extendedFrom": "",
      "name": "oasOpIdUnique",
      "content": "import { isPlainObject } from '@stoplight/json';\n\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nconst validOperationKeys = ['get', 'head', 'post', 'put', 'patch', 'delete', 'options', 'trace'];\n\nfunction* getAllOperations(paths) {\n  if (!isPlainObject(paths)) {\n    return;\n  }\n\n  const item = {\n    path: '',\n    operation: '',\n    value: null,\n  };\n\n  for (const path of Object.keys(paths)) {\n    const operations = paths[path];\n    if (!isPlainObject(operations)) {\n      continue;\n    }\n\n    item.path = path;\n\n    for (const operation of Object.keys(operations)) {\n      if (!isPlainObject(operations[operation]) || !validOperationKeys.includes(operation)) {\n        continue;\n      }\n\n      item.operation = operation;\n      item.value = operations[operation];\n\n      yield item;\n    }\n  }\n}\n\nexport const oasOpIdUnique = targetVal => {\n  if (!isObject(targetVal) || !isObject(targetVal.paths)) return;\n\n  const results = [];\n\n  const { paths } = targetVal;\n\n  const seenIds = [];\n\n  for (const { path, operation } of getAllOperations(paths)) {\n    const pathValue = paths[path];\n\n    if (!isObject(pathValue)) continue;\n\n    const operationValue = pathValue[operation];\n\n    if (!isObject(operationValue) || !('operationId' in operationValue)) {\n      continue;\n    }\n\n    const { operationId } = operationValue;\n\n    if (seenIds.includes(operationId)) {\n      results.push({\n        message: 'operationId must be unique.',\n        path: ['paths', path, operation, 'operationId'],\n      });\n    } else {\n      seenIds.push(operationId);\n    }\n  }\n\n  return results;\n};\n\nexport default oasOpIdUnique;\n"
    },
    {
      "id": "6TmNeCsILIP7anb_AUubX",
      "extendedFrom": "",
      "name": "oasOpParams",
      "content": "function isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nfunction computeFingerprint(param) {\n  return `${String(param.in)}-${String(param.name)}`;\n}\n\nexport const oasOpParams = (params, _opts, { path }) => {\n  /**\n   * This function verifies:\n   *\n   * 1. Operations must have unique `name` + `in` parameters.\n   * 2. Operation cannot have both `in:body` and `in:formData` parameters\n   * 3. Operation must have only one `in:body` parameter.\n   */\n\n  if (!Array.isArray(params)) return;\n\n  if (params.length < 2) return;\n\n  const results = [];\n\n  const count = {\n    body: [],\n    formData: [],\n  };\n  const list = [];\n  const duplicates = [];\n\n  let index = -1;\n\n  for (const param of params) {\n    index++;\n\n    if (!isObject(param)) continue;\n\n    // skip params that are refs\n    if ('$ref' in param) continue;\n\n    // Operations must have unique `name` + `in` parameters.\n    const fingerprint = computeFingerprint(param);\n    if (list.includes(fingerprint)) {\n      duplicates.push(index);\n    } else {\n      list.push(fingerprint);\n    }\n\n    if (typeof param.in === 'string' && param.in in count) {\n      count[param.in].push(index);\n    }\n  }\n\n  if (duplicates.length > 0) {\n    for (const i of duplicates) {\n      results.push({\n        message: 'A parameter in this operation already exposes the same combination of \"name\" and \"in\" values.',\n        path: [...path, i],\n      });\n    }\n  }\n\n  if (count.body.length > 0 && count.formData.length > 0) {\n    results.push({\n      message: 'Operation must not have both \"in:body\" and \"in:formData\" parameters.',\n    });\n  }\n\n  if (count.body.length > 1) {\n    for (let i = 1; i < count.body.length; i++) {\n      results.push({\n        message: 'Operation must not have more than a single instance of the \"in:body\" parameter.',\n        path: [...path, count.body[i]],\n      });\n    }\n  }\n\n  return results;\n};\n\nexport default oasOpParams;\n"
    },
    {
      "id": "CnnUoZNppSlUAcRRuMP3x",
      "extendedFrom": "",
      "name": "oasOpSecurityDefined",
      "content": "import { isPlainObject } from '@stoplight/json';\nimport { createRulesetFunction } from '@stoplight/spectral-core';\n\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nconst validOperationKeys = ['get', 'head', 'post', 'put', 'patch', 'delete', 'options', 'trace'];\n\nfunction* getAllOperations(paths) {\n  if (!isPlainObject(paths)) {\n    return;\n  }\n\n  const item = {\n    path: '',\n    operation: '',\n    value: null,\n  };\n\n  for (const path of Object.keys(paths)) {\n    const operations = paths[path];\n    if (!isPlainObject(operations)) {\n      continue;\n    }\n\n    item.path = path;\n\n    for (const operation of Object.keys(operations)) {\n      if (!isPlainObject(operations[operation]) || !validOperationKeys.includes(operation)) {\n        continue;\n      }\n\n      item.operation = operation;\n      item.value = operations[operation];\n\n      yield item;\n    }\n  }\n}\n\nfunction _get(value, path) {\n  for (const segment of path) {\n    if (!isObject(value)) {\n      break;\n    }\n\n    value = value[segment];\n  }\n\n  return value;\n}\n\nexport default createRulesetFunction(\n  {\n    input: {\n      type: 'object',\n      properties: {\n        paths: {\n          type: 'object',\n        },\n        security: {\n          type: 'array',\n        },\n      },\n    },\n    options: {\n      type: 'object',\n      properties: {\n        schemesPath: {\n          type: 'array',\n          items: {\n            type: ['string', 'number'],\n          },\n        },\n      },\n    },\n  },\n  function oasOpSecurityDefined(targetVal, { schemesPath }) {\n    const { paths } = targetVal;\n\n    const results = [];\n\n    const schemes = _get(targetVal, schemesPath);\n    const allDefs = isObject(schemes) ? Object.keys(schemes) : [];\n\n    // Check global security requirements\n\n    const { security } = targetVal;\n\n    if (Array.isArray(security)) {\n      for (const [index, value] of security.entries()) {\n        if (!isObject(value)) {\n          continue;\n        }\n\n        const securityKeys = Object.keys(value);\n\n        for (const securityKey of securityKeys) {\n          if (!allDefs.includes(securityKey)) {\n            results.push({\n              message: `API \"security\" values must match a scheme defined in the \"${schemesPath.join('.')}\" object.`,\n              path: ['security', index, securityKey],\n            });\n          }\n        }\n      }\n    }\n\n    for (const { path, operation, value } of getAllOperations(paths)) {\n      if (!isObject(value)) continue;\n\n      const { security } = value;\n\n      if (!Array.isArray(security)) {\n        continue;\n      }\n\n      for (const [index, value] of security.entries()) {\n        if (!isObject(value)) {\n          continue;\n        }\n\n        const securityKeys = Object.keys(value);\n\n        for (const securityKey of securityKeys) {\n          if (!allDefs.includes(securityKey)) {\n            results.push({\n              message: `Operation \"security\" values must match a scheme defined in the \"${schemesPath.join(\n                '.',\n              )}\" object.`,\n              path: ['paths', path, operation, 'security', index, securityKey],\n            });\n          }\n        }\n      }\n    }\n\n    return results;\n  },\n);\n"
    },
    {
      "id": "zTBl8Qs1SDP31wlXncc4Q",
      "extendedFrom": "",
      "name": "oasOpSuccessResponse",
      "content": "import { createRulesetFunction } from '@stoplight/spectral-core';\nimport { oas3 } from '@stoplight/spectral-formats';\n\nexport const oasOpSuccessResponse = createRulesetFunction(\n  {\n    input: {\n      type: 'object',\n    },\n    options: null,\n  },\n  (input, opts, context) => {\n    const isOAS3X = context.document.formats?.has(oas3) === true;\n\n    for (const response of Object.keys(input)) {\n      if (isOAS3X && (response === '2XX' || response === '3XX')) {\n        return;\n      }\n\n      if (Number(response) >= 200 && Number(response) < 400) {\n        return;\n      }\n    }\n\n    return [\n      {\n        message: 'Operation must define at least a single 2xx or 3xx response',\n      },\n    ];\n  },\n);\n\nexport default oasOpSuccessResponse;\n"
    },
    {
      "id": "_Gc6JZz0CzeTbHHKFaSyi",
      "extendedFrom": "",
      "name": "oasPathParam",
      "content": "function isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nconst pathRegex = /(\\{;?\\??[a-zA-Z0-9_-]+\\*?\\})/g;\n\nconst isNamedPathParam = p => {\n  return p.in !== void 0 && p.in === 'path' && p.name !== void 0;\n};\n\nconst isUnknownNamedPathParam = (p, path, results, seen) => {\n  if (!isNamedPathParam(p)) {\n    return false;\n  }\n\n  if (p.required !== true) {\n    results.push(generateResult(requiredMessage(p.name), path));\n  }\n\n  if (p.name in seen) {\n    results.push(generateResult(uniqueDefinitionMessage(p.name), path));\n    return false;\n  }\n\n  return true;\n};\n\nconst ensureAllDefinedPathParamsAreUsedInPath = (path, params, expected, results) => {\n  for (const p of Object.keys(params)) {\n    if (!params[p]) {\n      continue;\n    }\n\n    if (!expected.includes(p)) {\n      const resPath = params[p];\n      results.push(generateResult(`Parameter \"${p}\" must be used in path \"${path}\".`, resPath));\n    }\n  }\n};\n\nconst ensureAllExpectedParamsInPathAreDefined = (path, params, expected, operationPath, results) => {\n  for (const p of expected) {\n    if (!(p in params)) {\n      results.push(\n        generateResult(`Operation must define parameter \"{${p}}\" as expected by path \"${path}\".`, operationPath),\n      );\n    }\n  }\n};\n\nexport const oasPathParam = targetVal => {\n  /**\n   * This rule verifies:\n   *\n   * 1. for every param referenced in the path string ie /users/{userId}, var must be defined in either\n   *    path.parameters, or operation.parameters object\n   * 2. every path.parameters + operation.parameters property must be used in the path string\n   */\n\n  if (!isObject(targetVal) || !isObject(targetVal.paths)) {\n    return;\n  }\n\n  const results = [];\n\n  // keep track of normalized paths for verifying paths are unique\n  const uniquePaths = {};\n  const validOperationKeys = ['get', 'head', 'post', 'put', 'patch', 'delete', 'options', 'trace'];\n\n  for (const path of Object.keys(targetVal.paths)) {\n    const pathValue = targetVal.paths[path];\n    if (!isObject(pathValue)) continue;\n\n    // verify normalized paths are functionally unique (ie `/path/{one}` vs `/path/{two}` are\n    // different but equivalent within the context of OAS)\n    const normalized = path.replace(pathRegex, '%'); // '%' is used here since its invalid in paths\n    if (normalized in uniquePaths) {\n      results.push(\n        generateResult(`Paths \"${String(uniquePaths[normalized])}\" and \"${path}\" must not be equivalent.`, [\n          'paths',\n          path,\n        ]),\n      );\n    } else {\n      uniquePaths[normalized] = path;\n    }\n\n    // find all templated path parameters\n    const pathElements = [];\n    let match;\n\n    while ((match = pathRegex.exec(path))) {\n      const p = match[0].replace(/[{}?*;]/g, '');\n      if (pathElements.includes(p)) {\n        results.push(generateResult(`Path \"${path}\" must not use parameter \"{${p}}\" multiple times.`, ['paths', path]));\n      } else {\n        pathElements.push(p);\n      }\n    }\n\n    // find parameters set within the top-level 'parameters' object\n    const topParams = {};\n    if (Array.isArray(pathValue.parameters)) {\n      for (const [i, value] of pathValue.parameters.entries()) {\n        if (!isObject(value)) continue;\n\n        const fullParameterPath = ['paths', path, 'parameters', i];\n\n        if (isUnknownNamedPathParam(value, fullParameterPath, results, topParams)) {\n          topParams[value.name] = fullParameterPath;\n        }\n      }\n    }\n\n    if (isObject(targetVal.paths[path])) {\n      // find parameters set within the operation's 'parameters' object\n      for (const op of Object.keys(pathValue)) {\n        const operationValue = pathValue[op];\n        if (!isObject(operationValue)) continue;\n\n        if (op === 'parameters' || !validOperationKeys.includes(op)) {\n          continue;\n        }\n\n        const operationParams = {};\n        const { parameters } = operationValue;\n        const operationPath = ['paths', path, op];\n\n        if (Array.isArray(parameters)) {\n          for (const [i, p] of parameters.entries()) {\n            if (!isObject(p)) continue;\n\n            const fullParameterPath = [...operationPath, 'parameters', i];\n\n            if (isUnknownNamedPathParam(p, fullParameterPath, results, operationParams)) {\n              operationParams[p.name] = fullParameterPath;\n            }\n          }\n        }\n\n        const definedParams = { ...topParams, ...operationParams };\n        ensureAllDefinedPathParamsAreUsedInPath(path, definedParams, pathElements, results);\n        ensureAllExpectedParamsInPathAreDefined(path, definedParams, pathElements, operationPath, results);\n      }\n    }\n  }\n\n  return results;\n};\n\nfunction generateResult(message, path) {\n  return {\n    message,\n    path,\n  };\n}\n\nconst requiredMessage = name => `Path parameter \"${name}\" must have \"required\" property that is set to \"true\".`;\n\nconst uniqueDefinitionMessage = name => `Path parameter \"${name}\" must not be defined multiple times.`;\n\nexport default oasPathParam;\n"
    },
    {
      "id": "Isptau9elhz-rP0axRq5A",
      "extendedFrom": "",
      "name": "oasSchema",
      "content": "import traverse from 'json-schema-traverse';\nimport { schema as schemaFn } from '@stoplight/spectral-functions';\nimport { createRulesetFunction } from '@stoplight/spectral-core';\nimport { oas2, oas3_1, extractDraftVersion, oas3_0 } from '@stoplight/spectral-formats';\nimport { isPlainObject, pointerToPath } from '@stoplight/json';\n\nfunction rewriteNullable(schema, errors) {\n  for (const error of errors) {\n    if (error.keyword !== 'type') continue;\n    const value = getSchemaProperty(schema, error.schemaPath);\n    if (isPlainObject(value) && value.nullable === true) {\n      error.message += ',null';\n    }\n  }\n}\n\nexport default createRulesetFunction(\n  {\n    input: null,\n    options: {\n      type: 'object',\n      properties: {\n        schema: {\n          type: 'object',\n        },\n      },\n      additionalProperties: false,\n    },\n  },\n  function oasSchema(targetVal, opts, context) {\n    const formats = context.document.formats;\n\n    let { schema } = opts;\n\n    let dialect = 'draft4';\n    let prepareResults;\n\n    if (!formats) {\n      dialect = 'auto';\n    } else if (formats.has(oas3_1)) {\n      if (isPlainObject(context.document.data) && typeof context.document.data.jsonSchemaDialect === 'string') {\n        dialect = extractDraftVersion(context.document.data.jsonSchemaDialect) ?? 'draft2020-12';\n      } else {\n        dialect = 'draft2020-12';\n      }\n    } else if (formats.has(oas3_0)) {\n      prepareResults = rewriteNullable.bind(null, schema);\n    } else if (formats.has(oas2)) {\n      const clonedSchema = JSON.parse(JSON.stringify(schema));\n      traverse(clonedSchema, visitOAS2);\n      schema = clonedSchema;\n      prepareResults = rewriteNullable.bind(null, clonedSchema);\n    }\n\n    return schemaFn(\n      targetVal,\n      {\n        ...opts,\n        schema,\n        prepareResults,\n        dialect,\n      },\n      context,\n    );\n  },\n);\n\nconst visitOAS2 = schema => {\n  if (schema['x-nullable'] === true) {\n    schema.nullable = true;\n    delete schema['x-nullable'];\n  }\n};\n\nfunction getSchemaProperty(schema, schemaPath) {\n  const path = pointerToPath(schemaPath);\n  let value = schema;\n\n  for (const fragment of path.slice(0, -1)) {\n    if (!isPlainObject(value)) {\n      return;\n    }\n\n    value = value[fragment];\n  }\n\n  return value;\n}\n"
    },
    {
      "id": "zepUdzuVG76pFUdL37htN",
      "extendedFrom": "",
      "name": "oasTagDefined",
      "content": "// This function will check an API doc to verify that any tag that appears on\n// an operation is also present in the global tags array.\nimport { isPlainObject } from '@stoplight/json';\n\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nconst validOperationKeys = ['get', 'head', 'post', 'put', 'patch', 'delete', 'options', 'trace'];\n\nfunction* getAllOperations(paths) {\n  if (!isPlainObject(paths)) {\n    return;\n  }\n\n  const item = {\n    path: '',\n    operation: '',\n    value: null,\n  };\n\n  for (const path of Object.keys(paths)) {\n    const operations = paths[path];\n    if (!isPlainObject(operations)) {\n      continue;\n    }\n\n    item.path = path;\n\n    for (const operation of Object.keys(operations)) {\n      if (!isPlainObject(operations[operation]) || !validOperationKeys.includes(operation)) {\n        continue;\n      }\n\n      item.operation = operation;\n      item.value = operations[operation];\n\n      yield item;\n    }\n  }\n}\n\nexport const oasTagDefined = targetVal => {\n  if (!isObject(targetVal)) return;\n  const results = [];\n\n  const globalTags = [];\n\n  if (Array.isArray(targetVal.tags)) {\n    for (const tag of targetVal.tags) {\n      if (isObject(tag) && typeof tag.name === 'string') {\n        globalTags.push(tag.name);\n      }\n    }\n  }\n\n  const { paths } = targetVal;\n\n  for (const { path, operation, value } of getAllOperations(paths)) {\n    if (!isObject(value)) continue;\n\n    const { tags } = value;\n\n    if (!Array.isArray(tags)) {\n      continue;\n    }\n\n    for (const [i, tag] of tags.entries()) {\n      if (!globalTags.includes(tag)) {\n        results.push({\n          message: 'Operation tags must be defined in global tags.',\n          path: ['paths', path, operation, 'tags', i],\n        });\n      }\n    }\n  }\n\n  return results;\n};\n\nexport default oasTagDefined;\n"
    },
    {
      "id": "fv2yaafQ1o8aEjS8ACKUn",
      "extendedFrom": "",
      "name": "oasUnusedComponent",
      "content": "import { unreferencedReusableObject } from '@stoplight/spectral-functions';\nimport { createRulesetFunction } from '@stoplight/spectral-core';\n\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nexport default createRulesetFunction(\n  {\n    input: {\n      type: 'object',\n      properties: {\n        components: {\n          type: 'object',\n        },\n      },\n      required: ['components'],\n    },\n    options: null,\n  },\n  function oasUnusedComponent(targetVal, opts, context) {\n    const results = [];\n    const componentTypes = [\n      'schemas',\n      'responses',\n      'parameters',\n      'examples',\n      'requestBodies',\n      'headers',\n      'links',\n      'callbacks',\n    ];\n\n    for (const type of componentTypes) {\n      const value = targetVal.components[type];\n      if (!isObject(value)) continue;\n\n      const resultsForType = unreferencedReusableObject(\n        value,\n        { reusableObjectsLocation: `#/components/${type}` },\n        context,\n      );\n      if (resultsForType !== void 0 && Array.isArray(resultsForType)) {\n        results.push(...resultsForType);\n      }\n    }\n\n    return results;\n  },\n);\n"
    },
    {
      "id": "rXbI7k_vlV6k8g46jgLHD",
      "extendedFrom": "",
      "name": "refSiblings",
      "content": "function isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nfunction getParentValue(document, path) {\n  if (path.length === 0) {\n    return null;\n  }\n\n  let piece = document;\n\n  for (let i = 0; i < path.length - 1; i += 1) {\n    if (!isObject(piece)) {\n      return null;\n    }\n\n    piece = piece[path[i]];\n  }\n\n  return piece;\n}\n\nconst refSiblings = (targetVal, opts, { document, path }) => {\n  const value = getParentValue(document.data, path);\n\n  if (!isObject(value)) {\n    return;\n  }\n\n  const keys = Object.keys(value);\n  if (keys.length === 1) {\n    return;\n  }\n\n  const results = [];\n  const actualObjPath = path.slice(0, -1);\n\n  for (const key of keys) {\n    if (key === '$ref') {\n      continue;\n    }\n    results.push({\n      message: '$ref must not be placed next to any other properties',\n      path: [...actualObjPath, key],\n    });\n  }\n\n  return results;\n};\n\nexport default refSiblings;\n"
    },
    {
      "id": "9TKH5KUNzzp3VnK-c7Uro",
      "extendedFrom": "",
      "name": "serverVariables",
      "content": "import * as spectralCore from '@stoplight/spectral-core';\nimport { createRulesetFunction } from '@stoplight/spectral-core';\n\nfunction getAugmentedNamespace(n) {\n  if (n.__esModule) return n;\n  var f = n.default;\n\tif (typeof f == \"function\") {\n\t\tvar a = function a () {\n\t\t\tif (this instanceof a) {\n\t\t\t\tvar args = [null];\n\t\t\t\targs.push.apply(args, arguments);\n\t\t\t\tvar Ctor = Function.bind.apply(f, args);\n\t\t\t\treturn new Ctor();\n\t\t\t}\n\t\t\treturn f.apply(this, arguments);\n\t\t};\n\t\ta.prototype = f.prototype;\n  } else a = {};\n  Object.defineProperty(a, '__esModule', {value: true});\n\tObject.keys(n).forEach(function (k) {\n\t\tvar d = Object.getOwnPropertyDescriptor(n, k);\n\t\tObject.defineProperty(a, k, d.get ? d : {\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\treturn n[k];\n\t\t\t}\n\t\t});\n\t});\n\treturn a;\n}\n\nvar serverVariables = {};\n\nvar require$$0 = /*@__PURE__*/getAugmentedNamespace(spectralCore);\n\nvar parseUrlVariables$1 = {};\n\nObject.defineProperty(parseUrlVariables$1, \"__esModule\", { value: true });\nparseUrlVariables$1.parseUrlVariables = void 0;\nfunction parseUrlVariables(str) {\n    if (typeof str !== 'string')\n        return [];\n    const variables = str.match(/{(.+?)}/g);\n    if (!variables || variables.length === 0)\n        return [];\n    return variables.map(v => v.slice(1, -1));\n}\nparseUrlVariables$1.parseUrlVariables = parseUrlVariables;\n\nvar getMissingProps$1 = {};\n\nObject.defineProperty(getMissingProps$1, \"__esModule\", { value: true });\ngetMissingProps$1.getMissingProps = void 0;\nfunction getMissingProps(arr, props) {\n    return arr.filter(val => {\n        return !props.includes(val);\n    });\n}\ngetMissingProps$1.getMissingProps = getMissingProps;\n\nvar getRedundantProps$1 = {};\n\nObject.defineProperty(getRedundantProps$1, \"__esModule\", { value: true });\ngetRedundantProps$1.getRedundantProps = void 0;\nfunction getRedundantProps(arr, keys) {\n    return keys.filter(val => {\n        return !arr.includes(val);\n    });\n}\ngetRedundantProps$1.getRedundantProps = getRedundantProps;\n\nvar applyUrlVariables$1 = {};\n\nObject.defineProperty(applyUrlVariables$1, \"__esModule\", { value: true });\napplyUrlVariables$1.applyUrlVariables = void 0;\nfunction* applyUrlVariables(url, variables) {\n    yield* _applyUrlVariables(url, 0, variables.map(toApplicableVariable));\n}\napplyUrlVariables$1.applyUrlVariables = applyUrlVariables;\nfunction* _applyUrlVariables(url, i, variables) {\n    const [name, values] = variables[i];\n    let x = 0;\n    while (x < values.length) {\n        const substitutedValue = url.replace(name, values[x]);\n        if (i === variables.length - 1) {\n            yield substitutedValue;\n        }\n        else {\n            yield* _applyUrlVariables(substitutedValue, i + 1, variables);\n        }\n        x++;\n    }\n}\nfunction toApplicableVariable([name, values]) {\n    return [toReplaceRegExp(name), values.map(encodeURI)];\n}\nfunction toReplaceRegExp(name) {\n    return RegExp(escapeRegexp(`{${name}}`), 'g');\n}\nfunction escapeRegexp(value) {\n    return value.replace(/[\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\nObject.defineProperty(serverVariables, \"__esModule\", { value: true });\nconst spectral_core_1 = require$$0;\nconst parseUrlVariables_1 = parseUrlVariables$1;\nconst getMissingProps_1 = getMissingProps$1;\nconst getRedundantProps_1 = getRedundantProps$1;\nconst applyUrlVariables_1 = applyUrlVariables$1;\nexport default createRulesetFunction({\n    input: {\n        errorMessage: 'Invalid Server Object',\n        type: 'object',\n        properties: {\n            url: {\n                type: 'string',\n            },\n            variables: {\n                type: 'object',\n                additionalProperties: {\n                    type: 'object',\n                    properties: {\n                        enum: {\n                            type: 'array',\n                            items: {\n                                type: 'string',\n                            },\n                        },\n                        default: {\n                            type: 'string',\n                        },\n                        description: {\n                            type: 'string',\n                        },\n                        examples: {\n                            type: 'string',\n                        },\n                    },\n                    patternProperties: {\n                        '^x-': true,\n                    },\n                    additionalProperties: false,\n                },\n            },\n        },\n        required: ['url'],\n    },\n    errorOnInvalidInput: true,\n    options: {\n        type: ['object', 'null'],\n        properties: {\n            checkSubstitutions: {\n                type: 'boolean',\n                default: 'false',\n            },\n        },\n        additionalProperties: false,\n    },\n}, function serverVariables({ url, variables }, opts, ctx) {\n    var _a;\n    if (variables === void 0)\n        return;\n    const results = [];\n    const foundVariables = (0, parseUrlVariables_1.parseUrlVariables)(url);\n    const definedVariablesKeys = Object.keys(variables);\n    const redundantVariables = (0, getRedundantProps_1.getRedundantProps)(foundVariables, definedVariablesKeys);\n    for (const variable of redundantVariables) {\n        results.push({\n            message: `Server's \"variables\" object has unused defined \"${variable}\" url variable.`,\n            path: [...ctx.path, 'variables', variable],\n        });\n    }\n    if (foundVariables.length === 0)\n        return results;\n    const missingVariables = (0, getMissingProps_1.getMissingProps)(foundVariables, definedVariablesKeys);\n    if (missingVariables.length > 0) {\n        results.push({\n            message: `Not all server's variables are described with \"variables\" object. Missed: ${missingVariables.join(', ')}.`,\n            path: [...ctx.path, 'variables'],\n        });\n    }\n    const variablePairs = [];\n    for (const key of definedVariablesKeys) {\n        if (redundantVariables.includes(key))\n            continue;\n        const values = variables[key];\n        if ('enum' in values) {\n            variablePairs.push([key, values.enum]);\n            if ('default' in values && !values.enum.includes(values.default)) {\n                results.push({\n                    message: `Server Variable \"${key}\" has a default not listed in the enum`,\n                    path: [...ctx.path, 'variables', key, 'default'],\n                });\n            }\n        }\n        else {\n            variablePairs.push([key, [(_a = values.default) !== null && _a !== void 0 ? _a : '']]);\n        }\n    }\n    if ((opts === null || opts === void 0 ? void 0 : opts.checkSubstitutions) === true && variablePairs.length > 0) {\n        checkSubstitutions(results, ctx.path, url, variablePairs);\n    }\n    return results;\n});\nfunction checkSubstitutions(results, path, url, variables) {\n    const invalidUrls = [];\n    for (const substitutedUrl of (0, applyUrlVariables_1.applyUrlVariables)(url, variables)) {\n        try {\n            new URL(substitutedUrl);\n        }\n        catch {\n            invalidUrls.push(substitutedUrl);\n            if (invalidUrls.length === 5) {\n                break;\n            }\n        }\n    }\n    if (invalidUrls.length === 5) {\n        results.push({\n            message: `At least 5 substitutions of server variables resulted in invalid URLs: ${invalidUrls.join(', ')} and more`,\n            path: [...path, 'variables'],\n        });\n    }\n    else if (invalidUrls.length > 0) {\n        results.push({\n            message: `A few substitutions of server variables resulted in invalid URLs: ${invalidUrls.join(', ')}`,\n            path: [...path, 'variables'],\n        });\n    }\n}"
    },
    {
      "id": "Ew5L2b4pifaMvahtvx1lY",
      "extendedFrom": "",
      "name": "typedEnum",
      "content": "import { oas2, oas3_0 } from '@stoplight/spectral-formats';\nimport { printValue } from '@stoplight/spectral-runtime';\nimport { createRulesetFunction } from '@stoplight/spectral-core';\n\nfunction getDataType(input, checkForInteger) {\n  const type = typeof input;\n  switch (type) {\n    case 'string':\n    case 'boolean':\n      return type;\n    case 'number':\n      if (checkForInteger && Number.isInteger(input)) {\n        return 'integer';\n      }\n\n      return 'number';\n    case 'object':\n      if (input === null) {\n        return 'null';\n      }\n\n      return Array.isArray(input) ? 'array' : 'object';\n    default:\n      throw TypeError('Unknown input type');\n  }\n}\n\nfunction getTypes(input, formats) {\n  const { type } = input;\n\n  if (\n    (input.nullable === true && formats?.has(oas3_0) === true) ||\n    (input['x-nullable'] === true && formats?.has(oas2) === true)\n  ) {\n    return Array.isArray(type) ? [...type, 'null'] : [type, 'null'];\n  }\n\n  return type;\n}\n\nexport const typedEnum = createRulesetFunction(\n  {\n    input: {\n      type: 'object',\n      properties: {\n        enum: {\n          type: 'array',\n        },\n        type: {\n          oneOf: [\n            {\n              type: 'array',\n              items: {\n                type: 'string',\n              },\n            },\n            {\n              type: 'string',\n            },\n          ],\n        },\n      },\n      required: ['enum', 'type'],\n    },\n    options: null,\n  },\n  function (input, opts, context) {\n    const { enum: enumValues } = input;\n    const type = getTypes(input, context.document.formats);\n    const checkForInteger = type === 'integer' || (Array.isArray(type) && type.includes('integer'));\n\n    let results;\n\n    enumValues.forEach((value, i) => {\n      const valueType = getDataType(value, checkForInteger);\n\n      if (valueType === type || (Array.isArray(type) && type.includes(valueType))) {\n        return;\n      }\n\n      results = results || [];\n      results.push({\n        message: `Enum value ${printValue(enumValues[i])} must be \"${String(type)}\".`,\n        path: [...context.path, 'enum', i],\n      });\n    });\n\n    return results;\n  },\n);\n\nexport default typedEnum;\n"
    }
  ],
  "inheritedRules": [
    {
      "id": "S-gnNAcysNiSCGGMxYSHg",
      "given": [
        "#API_Contact"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "url"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "contact-url",
      "description": "Contact object should have \"url\"",
      "message": "Contact object should have \"url\""
    },
    {
      "id": "HjFr9LWHMgGRm58jPbSlz",
      "given": [
        "#API_Contact"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "email"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "contact-email",
      "description": "Contact object should have \"email\"",
      "message": "Contact object should have \"email\""
    },
    {
      "id": "7VP5nYzYbh6c87N0GCMA8",
      "given": [
        "#API_Document"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "info.contact"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "info-contact",
      "description": "Info object should have \"contact\" object.",
      "message": "Info object should have \"contact\" object."
    },
    {
      "id": "X-eqVXEgFjNpHC2JtbtPl",
      "given": [
        "#API_Document"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "info.description"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "info-description",
      "description": "Info object should have \"description\" object.",
      "message": "Info object should have \"description\" object."
    },
    {
      "id": "Tj-iZHX3PY0vfxRFcxqA2",
      "given": [
        "#API_Document"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "info.license"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "info-license",
      "description": "Info object should have \"license\" object.",
      "message": "Info object should have \"license\" object."
    },
    {
      "id": "wR2DSGg11-ECC7W5mQOuQ",
      "given": [
        "#API_License"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "url"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "license-url",
      "description": "License object should include \"url\".",
      "message": "License object should include \"url\"."
    },
    {
      "id": "7bJm9wEWstnJOFaLqDdic",
      "given": [
        "#All_Markdown"
      ],
      "severity": "warn",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "eval\\("
        }
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "no-eval-in-markdown",
      "description": "Markdown descriptions must not have \"eval(\".",
      "message": "Markdown descriptions must not have \"eval(\"."
    },
    {
      "id": "TynJkOQ-1cd1GFGeo4Mia",
      "given": [
        "#All_Markdown"
      ],
      "severity": "warn",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "<script"
        }
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "no-script-tags-in-markdown",
      "description": "Markdown descriptions must not have \"eval(\".",
      "message": "Markdown descriptions must not have \"<script>\" tags."
    },
    {
      "id": "eV6-imrTADzd98b8NoIIm",
      "given": [
        "#API_Tags"
      ],
      "severity": "warn",
      "then": {
        "function": "alphabetical",
        "functionOptions": {
          "keyedBy": "name"
        }
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "openapi-tags-alphabetical",
      "description": "OpenAPI object should have alphabetical \"tags\".",
      "message": "OpenAPI object should have alphabetical \"tags\"."
    },
    {
      "id": "KX2LAo_0qsqybjkA8rs0M",
      "given": [
        "#API_Tags"
      ],
      "severity": "warn",
      "then": {
        "function": "schema",
        "functionOptions": {
          "schema": {
            "type": "array",
            "minItems": 1
          }
        }
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "openapi-tags",
      "description": "OpenAPI object should have non-empty \"tags\" array.",
      "message": "OpenAPI object should have non-empty \"tags\" array."
    },
    {
      "id": "iDCD5XFILo0b87zD3DPLw",
      "given": [
        "#Operation_Object"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "description"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "operation-description",
      "description": "Operation \"description\" should be present and non-empty string.",
      "message": "Operation \"description\" should be present and non-empty string."
    },
    {
      "id": "L639SFHHj-giARy0EIcJn",
      "given": [
        "#Operation_Object"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "operationId"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "operation-operationId",
      "description": "Operation should have \"operationId\".",
      "message": "Operation should have \"operationId\"."
    },
    {
      "id": "SPzhkIwx-gKf0biLdu7XJ",
      "given": [
        "#Operation_Object"
      ],
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "^[A-Za-z0-9-._~:/?#\\[\\]@!\\$&'()*+,;=]*$"
        },
        "field": "operationId"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "operation-operationId-valid-in-url",
      "description": "operationId must not characters that are invalid when used in URL.",
      "message": "OperationId should not have characters that are invalid when used in URL."
    },
    {
      "id": "DKjXkYJrYVANZ-gOTyguE",
      "given": [
        "#API_Tags"
      ],
      "severity": "off",
      "then": {
        "function": "length",
        "functionOptions": {
          "max": 1
        }
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "operation-singular-tag",
      "description": "Operation should not have more than a single tag.",
      "message": "Operation should not have more than a single tag."
    },
    {
      "id": "oSjiADk3i4JtW2ygLDtdh",
      "given": [
        "#Operation_Object"
      ],
      "severity": "warn",
      "then": {
        "function": "length",
        "functionOptions": {
          "max": 999,
          "min": 1
        },
        "field": "tags"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "operation-tags",
      "description": "Operation should have non-empty \"tags\" array.",
      "message": "Operation should have non-empty \"tags\" array."
    },
    {
      "id": "bMTUxep9sCrjrfsAYDB_9",
      "given": [
        "#Path_Item"
      ],
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "{}"
        },
        "field": "@key"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "path-declarations-must-exist",
      "description": "Path parameter declarations must not be empty, ex.`/given/{}` is invalid.",
      "message": "Path parameter declarations must not be empty, ex.\"/given/{}\" is invalid."
    },
    {
      "id": "4ZA0cSPessGiXLDCoaZAe",
      "given": [
        "#API_Contact"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "name"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "contact-name",
      "description": "Contact object should have \"name\"",
      "message": "Contact object should have \"name\""
    },
    {
      "id": "WRzLMuusaeUkoN2qp9-oL",
      "given": [
        "#Path_Object"
      ],
      "severity": "warn",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": ".+\\/$"
        },
        "field": "@key"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "path-keys-no-trailing-slash",
      "description": "Path should not end with slash.",
      "message": "Path should not end with slash."
    },
    {
      "id": "zy1GPupUM0nUWH0lx5HGD",
      "given": [
        "#Path_Object"
      ],
      "severity": "warn",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\?"
        },
        "field": "@key"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "path-not-include-query",
      "description": "Path should not include query string.",
      "message": "Path should not include query string."
    },
    {
      "id": "0b8Zl0T5EkytUCBDQ6fOv",
      "given": [
        "#API_Tags_Item"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "description"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "tag-description",
      "description": "Tag object should have `description`.",
      "message": "Tag object should have \"description\"."
    },
    {
      "id": "zZ4YiS9usX-HqcAaUi2kn",
      "given": [
        "#API_Server"
      ],
      "severity": "warn",
      "then": {
        "function": "schema",
        "functionOptions": {
          "schema": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object"
            }
          },
          "dialect": "draft7"
        }
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "api-servers",
      "description": "OpenAPI document should have a server defined. \n\nThis can be localhost, a development or production server. \n\n**OpenAPI V3 example**\n\n```json\n{\n  \"servers\": [\n    {\n      \"url\": \"https://staging.myprodserver.com/v1\",\n      \"description\": \"Staging server\"\n    },\n    {\n      \"url\": \"https://myprodserver.com/v1\",\n      \"description\": \"Production server\"\n    }\n  ]\n}\n```\n\n**OpenAPI V2 example**\n\n```json\n{\n  \"host\": \"myprodserver.com\",\n  \"basePath\": \"/v2\",\n  \"schemes\": [\n    \"https\"\n  ]\n}\n```\n\n",
      "message": "Server should be present."
    },
    {
      "id": "hs5WGgQnFGL9tAaTOcVdo",
      "given": [
        "#API_Server_URL"
      ],
      "severity": "warn",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "/$"
        }
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "server-trailing-slash",
      "description": "Server URL should not have trailing slash.",
      "message": "Server URL should not have trailing slash"
    },
    {
      "id": "xG3yhmKk0Axn7t8kaNBcV",
      "given": [
        "#Operation_Object"
      ],
      "severity": "warn",
      "then": {
        "function": "oasOpSuccessResponse",
        "field": "responses"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "operation-success-response",
      "description": "Operation should have at least one \"2xx\" or \"3xx\" response.",
      "message": "Operation should have at least one \"2xx\" or \"3xx\" response."
    },
    {
      "id": "-KljJuDZSa9Cxb4oUzw1j",
      "given": [
        "#API_Document"
      ],
      "severity": "error",
      "then": {
        "function": "oasPathParam"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "path-params",
      "description": "Path parameters must be defined and valid.",
      "message": "{{error}}"
    },
    {
      "id": "5DzJTsee0sXNxiRAAyUfS",
      "given": [
        "#Operation_Object"
      ],
      "severity": "warn",
      "then": {
        "function": "oasOpParams",
        "field": "parameters"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "operation-parameters",
      "description": "Operation parameters are unique and non-repeating.",
      "message": "Operation parameters are unique and non-repeating."
    },
    {
      "id": "sBFXQL0tcVL1NA6v7mm_8",
      "given": [
        "#All_Enum"
      ],
      "severity": "warn",
      "then": {
        "function": "typedEnum"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "typed-enum",
      "description": "Enum values should respect the specified type.",
      "message": "{{error}}"
    },
    {
      "id": "mtC-7jMePZDm8dHKMiu9b",
      "given": [
        "#API_Document"
      ],
      "severity": "error",
      "then": {
        "function": "oasDocumentSchema"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oas2-schema",
      "description": "Validate structure of OpenAPI v2 specification.",
      "message": "{{error}}",
      "formats": [
        "oas2"
      ]
    },
    {
      "id": "0BFgcDh5lyEtfrWuWTMeO",
      "given": [
        "#API_Document"
      ],
      "severity": "error",
      "then": {
        "function": "oasDocumentSchema"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oas3-schema",
      "description": "Validate structure of OpenAPI v3 specification.",
      "message": "{{error}}",
      "formats": [
        "oas3"
      ]
    },
    {
      "id": "P3DY0DJS1_Ck5oH8KZWGc",
      "given": [
        "#API_Document"
      ],
      "severity": "warn",
      "then": {
        "function": "oasUnusedComponent"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oas3-unused-component",
      "description": "Validate structure of OpenAPI v3 specification.",
      "message": "{{error}}",
      "formats": [
        "oas3"
      ]
    },
    {
      "id": "iRqvIxFlcptLRwCeUw9-M",
      "given": [
        "#API_Document"
      ],
      "severity": "error",
      "then": {
        "function": "oasOpIdUnique"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "operation-operationId-unique",
      "description": "Every operation must have unique operationId.",
      "message": "Every operation must have unique operationId"
    },
    {
      "id": "Zh1HR35ip8pqEXMYbJn3z",
      "given": [
        "#Operation_Object"
      ],
      "severity": "error",
      "then": {
        "function": "oasOpFormDataConsumeCheck"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oas2-operation-formData-consume-check",
      "description": "Operations with \"in: formData\" parameter must include \"application/x-www-form-urlencoded\" or \"multipart/form-data\" in their \"consumes\" property.",
      "message": "Operations with \"in: formData\" parameter must include \"application/x-www-form-urlencoded\" or \"multipart/form-data\" in their \"consumes\" property.",
      "formats": [
        "oas2"
      ]
    },
    {
      "id": "jWL28VV1ma3Qm4tX0Mdp8",
      "given": [
        "#API_Document"
      ],
      "severity": "warn",
      "then": {
        "function": "oasTagDefined"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "operation-tag-defined",
      "description": "Operation tags must be defined in global tags.",
      "message": "Operation tags must be defined in global tags"
    },
    {
      "id": "Gd5ucWQuMR5DT6lnZkS2k",
      "given": [
        "#All_Ref"
      ],
      "severity": "error",
      "then": {
        "function": "refSiblings"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "no-$ref-siblings",
      "description": "Property must not be placed among $ref",
      "message": "{{error}}",
      "formats": [
        "oas3.0",
        "oas2"
      ]
    },
    {
      "id": "edHeBrm9YV8B7_XUvqH_o",
      "given": [
        "#API_Document"
      ],
      "severity": "warn",
      "then": {
        "function": "oasOpSecurityDefined",
        "functionOptions": {
          "schemesPath": [
            "securityDefinitions"
          ]
        }
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oas2-operation-security-defined",
      "description": "Operation \"security\" values must match a scheme defined in the \"securityDefinitions\" object.",
      "message": "{{error}}",
      "formats": [
        "oas2"
      ]
    },
    {
      "id": "sKBhGokNLzfZC4PuaRf1d",
      "given": [
        "#API_Document"
      ],
      "severity": "warn",
      "then": {
        "function": "oasOpSecurityDefined",
        "functionOptions": {
          "schemesPath": [
            "components",
            "securitySchemes"
          ]
        }
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oas3-operation-security-defined",
      "description": "Operation `security` values must match a scheme defined in the `components.securitySchemes` object.",
      "message": "{{error}}",
      "formats": [
        "oas3"
      ]
    },
    {
      "id": "GYU4CnesQjZbpQ8cAVYaS",
      "given": [
        "#All_Enum"
      ],
      "severity": "warn",
      "then": {
        "function": "oasSchema",
        "functionOptions": {
          "schema": {
            "type": "array",
            "uniqueItems": true
          }
        },
        "field": "enum"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "duplicated-entry-in-enum",
      "description": "Enum values should not have duplicate entry.",
      "message": "{{error}}"
    },
    {
      "id": "WYLik6aPyeyuB-_4_iv66",
      "given": [
        "#API_Document"
      ],
      "severity": "error",
      "then": {
        "function": "schema",
        "functionOptions": {
          "schema": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "dialect": "draft7"
        },
        "field": "schemes"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oas2-api-schemes",
      "description": "OpenAPI host \"schemes\" must be present and non-empty array.",
      "message": "OpenAPI host \"schemes\" must be present and non-empty array.",
      "formats": [
        "oas2"
      ]
    },
    {
      "id": "9UYNHKLTgnLWg49F26YBl",
      "given": [
        "#API_Document"
      ],
      "severity": "error",
      "then": {
        "function": "oasDiscriminator",
        "field": "definitions[?(@.discriminator)]"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oas2-discriminator",
      "description": "Discriminator property must be defined and required",
      "message": "Discriminator property must be defined and required",
      "formats": [
        "oas2"
      ]
    },
    {
      "id": "AwcNUsW_D2hSNprvBsV7M",
      "given": [
        "#API_Server_URL"
      ],
      "severity": "warn",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "example.com"
        }
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "server-not-example",
      "message": "Server URL must not point at example.com."
    },
    {
      "id": "0tyTAvjJHKct3fufdFRUd",
      "given": [
        "#Request_Parameter_All"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "description"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "parameter-description",
      "message": "Parameter objects must have \"description\"."
    },
    {
      "id": "co4W-eol48p0UXjNZEKgd",
      "given": [
        "#API_Document_RecursiveSearch"
      ],
      "severity": "warn",
      "then": {
        "function": "undefined",
        "field": "anyOf"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oas2-anyOf",
      "description": "anyOf is not available in OpenAPI v2, it was added in OpenAPI v3",
      "message": "anyOf is not available in OpenAPI v2, it was added in OpenAPI v3",
      "formats": [
        "oas2"
      ]
    },
    {
      "id": "PIT_tY8nGuTkf6n6TSoZu",
      "given": [
        "#API_Document_RecursiveSearch"
      ],
      "severity": "warn",
      "then": {
        "function": "undefined",
        "field": "oneOf"
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oas2-oneOf",
      "description": "anyOf is not available in OpenAPI v2, it was added in OpenAPI v3",
      "message": "oneOf is not available in OpenAPI v2, it was added in OpenAPI v3",
      "formats": [
        "oas2"
      ]
    },
    {
      "id": "geUluS-S9UYyQw9eZzPR0",
      "given": [
        "#All_Example"
      ],
      "severity": "warn",
      "then": {
        "function": "xor",
        "functionOptions": {
          "properties": [
            "externalValue",
            "value"
          ]
        }
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oas3-examples-value-or-externalValue",
      "description": "Examples must have either \"value\" or \"externalValue\" field.",
      "message": "Examples must have either \"value\" or \"externalValue\" field.",
      "formats": [
        "oas3"
      ]
    },
    {
      "id": "v7p6tmY181RPd5mB4o9zm",
      "given": [
        "#All_Example_Schema"
      ],
      "severity": "error",
      "then": {
        "function": "oasExample",
        "functionOptions": {
          "oasVersion": "2",
          "schemaField": "$",
          "type": "schema"
        }
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oas2-valid-schema-example",
      "description": "Examples must be valid against their defined schema.",
      "message": "{{error}}",
      "formats": [
        "oas2"
      ]
    },
    {
      "id": "vCBu18Mph12hopujosnJo",
      "given": [
        "#All_Example_Schema"
      ],
      "severity": "error",
      "then": {
        "function": "oasExample",
        "functionOptions": {
          "oasVersion": "3",
          "schemaField": "$",
          "type": "schema"
        }
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oas3-valid-schema-example",
      "description": "Examples must be valid against their defined schema.",
      "message": "{{error}}",
      "formats": [
        "oas3"
      ]
    },
    {
      "id": "icD9v8v_DyTb1nnPfp16b",
      "given": [
        "#All_Example_Media"
      ],
      "severity": "error",
      "then": {
        "function": "oasExample",
        "functionOptions": {
          "oasVersion": "2",
          "schemaField": "schema",
          "type": "media"
        }
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oas2-valid-media-example",
      "description": "Examples must be valid against their defined schema.",
      "message": "{{error}}",
      "formats": [
        "oas2"
      ]
    },
    {
      "id": "JV6IFMYHDFsUNFAWRgNYc",
      "given": [
        "#All_Example_Media"
      ],
      "severity": "error",
      "then": {
        "function": "oasExample",
        "functionOptions": {
          "oasVersion": "3",
          "schemaField": "schema",
          "type": "media"
        }
      },
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oas3-valid-media-example",
      "description": "Examples must be valid against their defined schema.",
      "message": "{{error}}",
      "formats": [
        "oas3"
      ]
    }
  ],
  "inheritedTargets": [
    {
      "id": "-aebvCbZA9jdXVbC12gNe",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "The complete API specification document. This can be used to target any part of the OpenAPI document using **field**.\n\n*Use this if you don't find specific targets that cater to your usecase.* ",
      "name": "API_Document",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$"
        }
      ]
    },
    {
      "id": "D9d6Et0FHchc8eAl63f8t",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "The top level description in an API document",
      "name": "API_Description",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$.info.description"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.info.description"
        }
      ]
    },
    {
      "id": "-_nbniVuwke1yd9glE7FD",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "The complete operation object. Use it in combo with field object.",
      "name": "Operation_Object",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "#Path_Item[get,put,post,delete,options,head,patch,trace]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "#Path_Item[get,put,post,delete,options,head,patch,trace]"
        }
      ]
    },
    {
      "id": "qXj4INSXpnCBqWuoH4YSm",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "Responses for all operations including get, put, post, delete, options, head, patch, trace.",
      "name": "Operation_Responses",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "#Operation_Object.responses"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "#Operation_Object.responses"
        }
      ]
    },
    {
      "id": "LrTBQtCuPbB27dq7J7_oY",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "Path_Item",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$.paths[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.paths[*]"
        }
      ]
    },
    {
      "id": "uh8N-3_T23jGbRvTtINMR",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "The top level description in an API document",
      "name": "API_Contact",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$.info.contact"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.info.contact"
        }
      ]
    },
    {
      "id": "SSt5HN9_eqvM-XGdWb8ZG",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "The top level description in an API document",
      "name": "API_License",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$.info.license"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.info.license"
        }
      ]
    },
    {
      "id": "A2_8tHgNvD7hVafWcnJAp",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "All markdown descriptions across the document.",
      "name": "All_Markdown",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..[description,title]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..[description,title]"
        }
      ]
    },
    {
      "id": "1UgbtiyBLhMhnSz2uHneJ",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "Tags on an API object",
      "name": "API_Tags",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$.tags"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.tags"
        }
      ]
    },
    {
      "id": "X_dDD3cDkFI1AxaDWQmOA",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "API hosts defined in the API specification",
      "name": "API_Server",
      "targets": [
        {
          "formats": [
            "oas3"
          ],
          "given": "$.servers"
        },
        {
          "formats": [
            "oas2"
          ],
          "given": "$.host"
        }
      ]
    },
    {
      "id": "3Jt8nGgMxCOXsH-MPZmjh",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "All responses (object) in an API",
      "name": "Response_All_Object",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$.responses"
        },
        {
          "formats": [
            "oas2"
          ],
          "given": "#Operation_Responses"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.responses"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "#Operation_Responses"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..responses"
        },
        {
          "formats": [
            "oas2"
          ],
          "given": "$..responses"
        }
      ]
    },
    {
      "id": "V6BXMEqttJ1yB1Q4qf3zp",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "API host urls defined in the API specification",
      "name": "API_Server_URL",
      "targets": [
        {
          "formats": [
            "oas3"
          ],
          "given": "$.servers[*].url"
        },
        {
          "formats": [
            "oas2"
          ],
          "given": "$.host"
        }
      ]
    },
    {
      "id": "h2NXTdAJGYVBaZGfwxcTv",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "All references throughout the API",
      "name": "All_Ref",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..[?(@property === '$ref')]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..[?(@property === '$ref')]"
        }
      ]
    },
    {
      "id": "bWWymBmSkAtSR_NPFRM7G",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "All references throughout the API",
      "name": "All_Enum",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..[?(@ && @.enum && @.type)]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..[?(@ && @.enum && @.type)]"
        }
      ]
    },
    {
      "id": "IVaoQSQ3eFVBngcQfhyR3",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "All request parameters",
      "name": "Request_Parameter_All",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..parameters[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..parameters[*]"
        }
      ]
    },
    {
      "id": "QhJKPl43jU9SJD4AZUfh8",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "All request query parameters",
      "name": "Request_Parameter_Query",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..parameters[?(@.in==\"query\")]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..parameters[?(@.in==\"query\")]"
        }
      ]
    },
    {
      "id": "MUY94WlVHlqEM2_rCIi5S",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "All request header parameters",
      "name": "Request_Parameter_Header",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..parameters[?(@.in==\"header\")]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..parameters[?(@.in==\"header\")]"
        }
      ]
    },
    {
      "id": "7vxddaVE03aqFcwZSbbX7",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "All request cookie parameters",
      "name": "Request_Parameter_Cookie",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..parameters[?(@.in==\"cookie\")]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..parameters[?(@.in==\"cookie\")]"
        }
      ]
    },
    {
      "id": "OPCAtuCmMccHdhtWTZftF",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "All request path parameters",
      "name": "Request_Parameter_Path",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..parameters[?(@.in==\"path\")]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..parameters[?(@.in==\"path\")]"
        }
      ]
    },
    {
      "id": "kQIz9emyO_aaJLuuB29Xy",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "Path object. Usually used to target the Path key e.g. `/users/{userId}`",
      "name": "Path_Object",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$.paths"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.paths"
        }
      ]
    },
    {
      "id": "sja5l6SAecIKFyjXJkqp3",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "All examples for schemas",
      "name": "All_Example_Schema",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..definitions..[?(@property !== 'properties' && @ && (@.example !== void 0 || @['x-example'] !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
        },
        {
          "formats": [
            "oas2"
          ],
          "given": "$..parameters..[?(@property !== 'properties' && @ && (@.example !== void 0 || @['x-example'] !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
        },
        {
          "formats": [
            "oas2"
          ],
          "given": "$..responses..[?(@property !== 'properties' && @ && (@.example !== void 0 || @['x-example'] !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.schemas..[?(@property !== 'properties' && @ && (@ && @.example !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..content..[?(@property !== 'properties' && @ && (@ && @.example !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..headers..[?(@property !== 'properties' && @ && (@ && @.example !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..parameters..[?(@property !== 'properties' && @ && (@ && @.example !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
        }
      ]
    },
    {
      "id": "NrWiz_S5e7PAqKJBeo7wv",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "The complete API specification document. This can be used to target any part of the OpenAPI document using **field**.\n\n*Use this if you don't find specific targets that cater to your usecase.* ",
      "name": "API_Document_RecursiveSearch",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$.."
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.."
        }
      ]
    },
    {
      "id": "TzFp-4R2W7seTsiKJLjVD",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "All examples across the API document",
      "name": "All_Example",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..examples[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.examples[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.paths[*][*]..content[*].examples[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.paths[*][*]..parameters[*].examples[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.parameters[*].examples[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.paths[*][*]..headers[*].examples[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.headers[*].examples[*]"
        }
      ]
    },
    {
      "id": "o_O-pXzBNdGms2aomxLzI",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "All examples for schemas",
      "name": "All_Example_Media",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$..responses..[?(@ && @.schema && @.examples)]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..content..[?(@ && @.schema && (@.example !== void 0 || @.examples))]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..headers..[?(@ && @.schema && (@.example !== void 0 || @.examples))]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$..parameters..[?(@ && @.schema && (@.example !== void 0 || @.examples))]"
        }
      ]
    },
    {
      "id": "lls1jtd42Hj9arT5M8TNT",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "description": "Tags on an API object",
      "name": "API_Tags_Item",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": "$.tags[*]"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.tags[*]"
        }
      ]
    }
  ],
  "inheritedFunctions": [
    {
      "id": "oNG36t278DRgOst5NMbe_",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oasOpSuccessResponse",
      "content": "import { createRulesetFunction } from '@stoplight/spectral-core';\nimport { oas3 } from '@stoplight/spectral-formats';\n\nexport const oasOpSuccessResponse = createRulesetFunction(\n  {\n    input: {\n      type: 'object',\n    },\n    options: null,\n  },\n  (input, opts, context) => {\n    const isOAS3X = context.document.formats?.has(oas3) === true;\n\n    for (const response of Object.keys(input)) {\n      if (isOAS3X && (response === '2XX' || response === '3XX')) {\n        return;\n      }\n\n      if (Number(response) >= 200 && Number(response) < 400) {\n        return;\n      }\n    }\n\n    return [\n      {\n        message: 'Operation must define at least a single 2xx or 3xx response',\n      },\n    ];\n  },\n);\n\nexport default oasOpSuccessResponse;"
    },
    {
      "id": "rTQj-WWDxYtfAM1v2BIA4",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oasPathParam",
      "content": "function isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nconst pathRegex = /(\\{;?\\??[a-zA-Z0-9_-]+\\*?\\})/g;\n\nconst isNamedPathParam = p => {\n  return p.in !== void 0 && p.in === 'path' && p.name !== void 0;\n};\n\nconst isUnknownNamedPathParam = (p, path, results, seen) => {\n  if (!isNamedPathParam(p)) {\n    return false;\n  }\n\n  if (p.required !== true) {\n    results.push(generateResult(requiredMessage(p.name), path));\n  }\n\n  if (p.name in seen) {\n    results.push(generateResult(uniqueDefinitionMessage(p.name), path));\n    return false;\n  }\n\n  return true;\n};\n\nconst ensureAllDefinedPathParamsAreUsedInPath = (path, params, expected, results) => {\n  for (const p of Object.keys(params)) {\n    if (!params[p]) {\n      continue;\n    }\n\n    if (!expected.includes(p)) {\n      const resPath = params[p];\n      results.push(generateResult(`Parameter \"${p}\" must be used in path \"${path}\".`, resPath));\n    }\n  }\n};\n\nconst ensureAllExpectedParamsInPathAreDefined = (path, params, expected, operationPath, results) => {\n  for (const p of expected) {\n    if (!(p in params)) {\n      results.push(\n        generateResult(`Operation must define parameter \"{${p}}\" as expected by path \"${path}\".`, operationPath),\n      );\n    }\n  }\n};\n\nexport const oasPathParam = targetVal => {\n  /**\n   * This rule verifies:\n   *\n   * 1. for every param referenced in the path string ie /users/{userId}, var must be defined in either\n   *    path.parameters, or operation.parameters object\n   * 2. every path.parameters + operation.parameters property must be used in the path string\n   */\n\n  if (!isObject(targetVal) || !isObject(targetVal.paths)) {\n    return;\n  }\n\n  const results = [];\n\n  // keep track of normalized paths for verifying paths are unique\n  const uniquePaths = {};\n  const validOperationKeys = ['get', 'head', 'post', 'put', 'patch', 'delete', 'options', 'trace'];\n\n  for (const path of Object.keys(targetVal.paths)) {\n    const pathValue = targetVal.paths[path];\n    if (!isObject(pathValue)) continue;\n\n    // verify normalized paths are functionally unique (ie `/path/{one}` vs `/path/{two}` are\n    // different but equivalent within the context of OAS)\n    const normalized = path.replace(pathRegex, '%'); // '%' is used here since its invalid in paths\n    if (normalized in uniquePaths) {\n      results.push(\n        generateResult(`Paths \"${String(uniquePaths[normalized])}\" and \"${path}\" must not be equivalent.`, [\n          'paths',\n          path,\n        ]),\n      );\n    } else {\n      uniquePaths[normalized] = path;\n    }\n\n    // find all templated path parameters\n    const pathElements = [];\n    let match;\n\n    while ((match = pathRegex.exec(path))) {\n      const p = match[0].replace(/[{}?*;]/g, '');\n      if (pathElements.includes(p)) {\n        results.push(generateResult(`Path \"${path}\" must not use parameter \"{${p}}\" multiple times.`, ['paths', path]));\n      } else {\n        pathElements.push(p);\n      }\n    }\n\n    // find parameters set within the top-level 'parameters' object\n    const topParams = {};\n    if (Array.isArray(pathValue.parameters)) {\n      for (const [i, value] of pathValue.parameters.entries()) {\n        if (!isObject(value)) continue;\n\n        const fullParameterPath = ['paths', path, 'parameters', i];\n\n        if (isUnknownNamedPathParam(value, fullParameterPath, results, topParams)) {\n          topParams[value.name] = fullParameterPath;\n        }\n      }\n    }\n\n    if (isObject(targetVal.paths[path])) {\n      // find parameters set within the operation's 'parameters' object\n      for (const op of Object.keys(pathValue)) {\n        const operationValue = pathValue[op];\n        if (!isObject(operationValue)) continue;\n\n        if (op === 'parameters' || !validOperationKeys.includes(op)) {\n          continue;\n        }\n\n        const operationParams = {};\n        const { parameters } = operationValue;\n        const operationPath = ['paths', path, op];\n\n        if (Array.isArray(parameters)) {\n          for (const [i, p] of parameters.entries()) {\n            if (!isObject(p)) continue;\n\n            const fullParameterPath = [...operationPath, 'parameters', i];\n\n            if (isUnknownNamedPathParam(p, fullParameterPath, results, operationParams)) {\n              operationParams[p.name] = fullParameterPath;\n            }\n          }\n        }\n\n        const definedParams = { ...topParams, ...operationParams };\n        ensureAllDefinedPathParamsAreUsedInPath(path, definedParams, pathElements, results);\n        ensureAllExpectedParamsInPathAreDefined(path, definedParams, pathElements, operationPath, results);\n      }\n    }\n  }\n\n  return results;\n};\n\nfunction generateResult(message, path) {\n  return {\n    message,\n    path,\n  };\n}\n\nconst requiredMessage = name => `Path parameter \"${name}\" must have \"required\" property that is set to \"true\".`;\n\nconst uniqueDefinitionMessage = name => `Path parameter \"${name}\" must not be defined multiple times.`;\n\nexport default oasPathParam;"
    },
    {
      "id": "K3NaspvGefznCLC5c1JXj",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oasOpParams",
      "content": "function isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nfunction computeFingerprint(param) {\n  return `${String(param.in)}-${String(param.name)}`;\n}\n\nexport const oasOpParams = (params, _opts, { path }) => {\n  /**\n   * This function verifies:\n   *\n   * 1. Operations must have unique `name` + `in` parameters.\n   * 2. Operation cannot have both `in:body` and `in:formData` parameters\n   * 3. Operation must have only one `in:body` parameter.\n   */\n\n  if (!Array.isArray(params)) return;\n\n  if (params.length < 2) return;\n\n  const results = [];\n\n  const count = {\n    body: [],\n    formData: [],\n  };\n  const list = [];\n  const duplicates = [];\n\n  let index = -1;\n\n  for (const param of params) {\n    index++;\n\n    if (!isObject(param)) continue;\n\n    // skip params that are refs\n    if ('$ref' in param) continue;\n\n    // Operations must have unique `name` + `in` parameters.\n    const fingerprint = computeFingerprint(param);\n    if (list.includes(fingerprint)) {\n      duplicates.push(index);\n    } else {\n      list.push(fingerprint);\n    }\n\n    if (typeof param.in === 'string' && param.in in count) {\n      count[param.in].push(index);\n    }\n  }\n\n  if (duplicates.length > 0) {\n    for (const i of duplicates) {\n      results.push({\n        message: 'A parameter in this operation already exposes the same combination of \"name\" and \"in\" values.',\n        path: [...path, i],\n      });\n    }\n  }\n\n  if (count.body.length > 0 && count.formData.length > 0) {\n    results.push({\n      message: 'Operation must not have both \"in:body\" and \"in:formData\" parameters.',\n    });\n  }\n\n  if (count.body.length > 1) {\n    for (let i = 1; i < count.body.length; i++) {\n      results.push({\n        message: 'Operation must not have more than a single instance of the \"in:body\" parameter.',\n        path: [...path, count.body[i]],\n      });\n    }\n  }\n\n  return results;\n};\n\nexport default oasOpParams;"
    },
    {
      "id": "Z7CtRUcWP-rLDIi64QP8U",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "refSiblings",
      "content": "function isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nfunction getParentValue(document, path) {\n  if (path.length === 0) {\n    return null;\n  }\n\n  let piece = document;\n\n  for (let i = 0; i < path.length - 1; i += 1) {\n    if (!isObject(piece)) {\n      return null;\n    }\n\n    piece = piece[path[i]];\n  }\n\n  return piece;\n}\n\nconst refSiblings = (targetVal, opts, { document, path }) => {\n  const value = getParentValue(document.data, path);\n\n  if (!isObject(value)) {\n    return;\n  }\n\n  const keys = Object.keys(value);\n  if (keys.length === 1) {\n    return;\n  }\n\n  const results = [];\n  const actualObjPath = path.slice(0, -1);\n\n  for (const key of keys) {\n    if (key === '$ref') {\n      continue;\n    }\n    results.push({\n      message: '$ref must not be placed next to any other properties',\n      path: [...actualObjPath, key],\n    });\n  }\n\n  return results;\n};\n\nexport default refSiblings;"
    },
    {
      "id": "wJb9O0MEL8HS1CaiJc5iw",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "typedEnum",
      "content": "import { oas2, oas3_0 } from '@stoplight/spectral-formats';\nimport { printValue } from '@stoplight/spectral-runtime';\nimport { createRulesetFunction } from '@stoplight/spectral-core';\n\nfunction getDataType(input, checkForInteger) {\n  const type = typeof input;\n  switch (type) {\n    case 'string':\n    case 'boolean':\n      return type;\n    case 'number':\n      if (checkForInteger && Number.isInteger(input)) {\n        return 'integer';\n      }\n\n      return 'number';\n    case 'object':\n      if (input === null) {\n        return 'null';\n      }\n\n      return Array.isArray(input) ? 'array' : 'object';\n    default:\n      throw TypeError('Unknown input type');\n  }\n}\n\nfunction getTypes(input, formats) {\n  const { type } = input;\n\n  if (\n    (input.nullable === true && formats?.has(oas3_0) === true) ||\n    (input['x-nullable'] === true && formats?.has(oas2) === true)\n  ) {\n    return Array.isArray(type) ? [...type, 'null'] : [type, 'null'];\n  }\n\n  return type;\n}\n\nexport const typedEnum = createRulesetFunction(\n  {\n    input: {\n      type: 'object',\n      properties: {\n        enum: {\n          type: 'array',\n        },\n        type: {\n          oneOf: [\n            {\n              type: 'array',\n              items: {\n                type: 'string',\n              },\n            },\n            {\n              type: 'string',\n            },\n          ],\n        },\n      },\n      required: ['enum', 'type'],\n    },\n    options: null,\n  },\n  function (input, opts, context) {\n    const { enum: enumValues } = input;\n    const type = getTypes(input, context.document.formats);\n    const checkForInteger = type === 'integer' || (Array.isArray(type) && type.includes('integer'));\n\n    let results;\n\n    enumValues.forEach((value, i) => {\n      const valueType = getDataType(value, checkForInteger);\n\n      if (valueType === type || (Array.isArray(type) && type.includes(valueType))) {\n        return;\n      }\n\n      results ??= [];\n      results.push({\n        message: `Enum value ${printValue(enumValues[i])} must be \"${String(type)}\".`,\n        path: [...context.path, 'enum', i],\n      });\n    });\n\n    return results;\n  },\n);\n\nexport default typedEnum;"
    },
    {
      "id": "4dHU2hrBzuYdo-vgdOwld",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oasDocumentSchema",
      "content": "import { createRulesetFunction } from '@stoplight/spectral-core';\nimport { schema as schemaFn } from '@stoplight/spectral-functions';\nimport { oas2, oas3_1 } from '@stoplight/spectral-formats';\n\nconst OAS_2 = {\n  title: 'A JSON Schema for Swagger 2.0 API.',\n  $id: 'http://swagger.io/v2/schema.json#',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  type: 'object',\n  required: ['swagger', 'info', 'paths'],\n  additionalProperties: false,\n  patternProperties: {\n    '^x-': {\n      $ref: '#/definitions/vendorExtension',\n    },\n  },\n  properties: {\n    swagger: {\n      type: 'string',\n      enum: ['2.0'],\n      description: 'The Swagger version of this document.',\n    },\n    info: {\n      $ref: '#/definitions/info',\n    },\n    host: {\n      type: 'string',\n      pattern: '^[^{}/ :\\\\\\\\]+(?::\\\\d+)?$',\n      description: \"The host (name or ip) of the API. Example: 'swagger.io'\",\n    },\n    basePath: {\n      type: 'string',\n      pattern: '^/',\n      description: \"The base path to the API. Example: '/api'.\",\n    },\n    schemes: {\n      $ref: '#/definitions/schemesList',\n    },\n    consumes: {\n      description: 'A list of MIME types accepted by the API.',\n      allOf: [\n        {\n          $ref: '#/definitions/mediaTypeList',\n        },\n      ],\n    },\n    produces: {\n      description: 'A list of MIME types the API can produce.',\n      allOf: [\n        {\n          $ref: '#/definitions/mediaTypeList',\n        },\n      ],\n    },\n    paths: {\n      $ref: '#/definitions/paths',\n    },\n    definitions: {\n      $ref: '#/definitions/definitions',\n    },\n    parameters: {\n      $ref: '#/definitions/parameterDefinitions',\n    },\n    responses: {\n      $ref: '#/definitions/responseDefinitions',\n    },\n    security: {\n      $ref: '#/definitions/security',\n    },\n    securityDefinitions: {\n      $ref: '#/definitions/securityDefinitions',\n    },\n    tags: {\n      type: 'array',\n      items: {\n        $ref: '#/definitions/tag',\n      },\n      uniqueItems: true,\n    },\n    externalDocs: {\n      $ref: '#/definitions/externalDocs',\n    },\n  },\n  definitions: {\n    info: {\n      type: 'object',\n      description: 'General information about the API.',\n      required: ['version', 'title'],\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        title: {\n          type: 'string',\n          description: 'A unique and precise title of the API.',\n        },\n        version: {\n          type: 'string',\n          description: 'A semantic version number of the API.',\n        },\n        description: {\n          type: 'string',\n          description:\n            'A longer description of the API. Should be different from the title.  GitHub Flavored Markdown is allowed.',\n        },\n        termsOfService: {\n          type: 'string',\n          description: 'The terms of service for the API.',\n        },\n        contact: {\n          $ref: '#/definitions/contact',\n        },\n        license: {\n          $ref: '#/definitions/license',\n        },\n      },\n    },\n    contact: {\n      type: 'object',\n      description: 'Contact information for the owners of the API.',\n      additionalProperties: false,\n      properties: {\n        name: {\n          type: 'string',\n          description: 'The identifying name of the contact person/organization.',\n        },\n        url: {\n          type: 'string',\n          description: 'The URL pointing to the contact information.',\n          format: 'uri',\n        },\n        email: {\n          type: 'string',\n          description: 'The email address of the contact person/organization.',\n          format: 'email',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    license: {\n      type: 'object',\n      required: ['name'],\n      additionalProperties: false,\n      properties: {\n        name: {\n          type: 'string',\n          description: \"The name of the license type. It's encouraged to use an OSI compatible license.\",\n        },\n        url: {\n          type: 'string',\n          description: 'The URL pointing to the license.',\n          format: 'uri',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    paths: {\n      type: 'object',\n      description: \"Relative paths to the individual endpoints. They must be relative to the 'basePath'.\",\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n        '^/': {\n          $ref: '#/definitions/pathItem',\n        },\n      },\n      additionalProperties: false,\n    },\n    definitions: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/definitions/schema',\n      },\n      description: 'One or more JSON objects describing the schemas being consumed and produced by the API.',\n    },\n    parameterDefinitions: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/definitions/parameter',\n      },\n      description: 'One or more JSON representations for parameters',\n    },\n    responseDefinitions: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/definitions/response',\n      },\n      description: 'One or more JSON representations for responses',\n    },\n    externalDocs: {\n      type: 'object',\n      additionalProperties: false,\n      description: 'information about external documentation',\n      required: ['url'],\n      properties: {\n        description: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n          format: 'uri',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    examples: {\n      type: 'object',\n      additionalProperties: true,\n    },\n    mimeType: {\n      type: 'string',\n      description: 'The MIME type of the HTTP message.',\n    },\n    operation: {\n      type: 'object',\n      required: ['responses'],\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        tags: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n          uniqueItems: true,\n        },\n        summary: {\n          type: 'string',\n          description: 'A brief summary of the operation.',\n        },\n        description: {\n          type: 'string',\n          description: 'A longer description of the operation, GitHub Flavored Markdown is allowed.',\n        },\n        externalDocs: {\n          $ref: '#/definitions/externalDocs',\n        },\n        operationId: {\n          type: 'string',\n          description: 'A unique identifier of the operation.',\n        },\n        produces: {\n          description: 'A list of MIME types the API can produce.',\n          allOf: [\n            {\n              $ref: '#/definitions/mediaTypeList',\n            },\n          ],\n        },\n        consumes: {\n          description: 'A list of MIME types the API can consume.',\n          allOf: [\n            {\n              $ref: '#/definitions/mediaTypeList',\n            },\n          ],\n        },\n        parameters: {\n          $ref: '#/definitions/parametersList',\n        },\n        responses: {\n          $ref: '#/definitions/responses',\n        },\n        schemes: {\n          $ref: '#/definitions/schemesList',\n        },\n        deprecated: {\n          type: 'boolean',\n          default: false,\n        },\n        security: {\n          $ref: '#/definitions/security',\n        },\n      },\n    },\n    pathItem: {\n      type: 'object',\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        $ref: {\n          type: 'string',\n        },\n        get: {\n          $ref: '#/definitions/operation',\n        },\n        put: {\n          $ref: '#/definitions/operation',\n        },\n        post: {\n          $ref: '#/definitions/operation',\n        },\n        delete: {\n          $ref: '#/definitions/operation',\n        },\n        options: {\n          $ref: '#/definitions/operation',\n        },\n        head: {\n          $ref: '#/definitions/operation',\n        },\n        patch: {\n          $ref: '#/definitions/operation',\n        },\n        parameters: {\n          $ref: '#/definitions/parametersList',\n        },\n      },\n    },\n    responses: {\n      type: 'object',\n      description: \"Response objects names can either be any valid HTTP status code or 'default'.\",\n      minProperties: 1,\n      additionalProperties: false,\n      patternProperties: {\n        '^([0-9]{3})$|^(default)$': {\n          $ref: '#/definitions/responseValue',\n        },\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      not: {\n        type: 'object',\n        additionalProperties: false,\n        patternProperties: {\n          '^x-': {\n            $ref: '#/definitions/vendorExtension',\n          },\n        },\n      },\n    },\n    responseValue: {\n      oneOf: [\n        {\n          $ref: '#/definitions/response',\n        },\n        {\n          $ref: '#/definitions/jsonReference',\n        },\n      ],\n    },\n    response: {\n      type: 'object',\n      required: ['description'],\n      properties: {\n        description: {\n          type: 'string',\n        },\n        schema: {\n          oneOf: [\n            {\n              $ref: '#/definitions/schema',\n            },\n            {\n              $ref: '#/definitions/fileSchema',\n            },\n          ],\n        },\n        headers: {\n          $ref: '#/definitions/headers',\n        },\n        examples: {\n          $ref: '#/definitions/examples',\n        },\n      },\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    headers: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/definitions/header',\n      },\n    },\n    header: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['string', 'number', 'integer', 'boolean', 'array'],\n        },\n        format: {\n          type: 'string',\n        },\n        items: {\n          $ref: '#/definitions/primitivesItems',\n        },\n        collectionFormat: {\n          $ref: '#/definitions/collectionFormat',\n        },\n        default: {\n          $ref: '#/definitions/default',\n        },\n        maximum: {\n          $ref: '#/definitions/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: '#/definitions/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: '#/definitions/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: '#/definitions/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: '#/definitions/maxLength',\n        },\n        minLength: {\n          $ref: '#/definitions/minLength',\n        },\n        pattern: {\n          $ref: '#/definitions/pattern',\n        },\n        maxItems: {\n          $ref: '#/definitions/maxItems',\n        },\n        minItems: {\n          $ref: '#/definitions/minItems',\n        },\n        uniqueItems: {\n          $ref: '#/definitions/uniqueItems',\n        },\n        enum: {\n          $ref: '#/definitions/enum',\n        },\n        multipleOf: {\n          $ref: '#/definitions/multipleOf',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    vendorExtension: {\n      description: 'Any property starting with x- is valid.',\n      additionalProperties: true,\n      additionalItems: true,\n    },\n    bodyParameter: {\n      type: 'object',\n      required: ['name', 'in', 'schema'],\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        description: {\n          type: 'string',\n          description:\n            'A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.',\n        },\n        name: {\n          type: 'string',\n          description: 'The name of the parameter.',\n        },\n        in: {\n          type: 'string',\n          description: 'Determines the location of the parameter.',\n          enum: ['body'],\n        },\n        required: {\n          type: 'boolean',\n          description: 'Determines whether or not this parameter is required or optional.',\n          default: false,\n        },\n        schema: {\n          $ref: '#/definitions/schema',\n        },\n      },\n      additionalProperties: false,\n    },\n    headerParameterSubSchema: {\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        required: {\n          type: 'boolean',\n          description: 'Determines whether or not this parameter is required or optional.',\n          default: false,\n        },\n        in: {\n          type: 'string',\n          description: 'Determines the location of the parameter.',\n          enum: ['header'],\n        },\n        description: {\n          type: 'string',\n          description:\n            'A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.',\n        },\n        name: {\n          type: 'string',\n          description: 'The name of the parameter.',\n        },\n        type: {\n          type: 'string',\n          enum: ['string', 'number', 'boolean', 'integer', 'array'],\n        },\n        format: {\n          type: 'string',\n        },\n        items: {\n          $ref: '#/definitions/primitivesItems',\n        },\n        collectionFormat: {\n          $ref: '#/definitions/collectionFormat',\n        },\n        default: {\n          $ref: '#/definitions/default',\n        },\n        maximum: {\n          $ref: '#/definitions/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: '#/definitions/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: '#/definitions/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: '#/definitions/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: '#/definitions/maxLength',\n        },\n        minLength: {\n          $ref: '#/definitions/minLength',\n        },\n        pattern: {\n          $ref: '#/definitions/pattern',\n        },\n        maxItems: {\n          $ref: '#/definitions/maxItems',\n        },\n        minItems: {\n          $ref: '#/definitions/minItems',\n        },\n        uniqueItems: {\n          $ref: '#/definitions/uniqueItems',\n        },\n        enum: {\n          $ref: '#/definitions/enum',\n        },\n        multipleOf: {\n          $ref: '#/definitions/multipleOf',\n        },\n      },\n    },\n    queryParameterSubSchema: {\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        required: {\n          type: 'boolean',\n          description: 'Determines whether or not this parameter is required or optional.',\n          default: false,\n        },\n        in: {\n          type: 'string',\n          description: 'Determines the location of the parameter.',\n          enum: ['query'],\n        },\n        description: {\n          type: 'string',\n          description:\n            'A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.',\n        },\n        name: {\n          type: 'string',\n          description: 'The name of the parameter.',\n        },\n        allowEmptyValue: {\n          type: 'boolean',\n          default: false,\n          description: 'allows sending a parameter by name only or with an empty value.',\n        },\n        type: {\n          type: 'string',\n          enum: ['string', 'number', 'boolean', 'integer', 'array'],\n        },\n        format: {\n          type: 'string',\n        },\n        items: {\n          $ref: '#/definitions/primitivesItems',\n        },\n        collectionFormat: {\n          $ref: '#/definitions/collectionFormatWithMulti',\n        },\n        default: {\n          $ref: '#/definitions/default',\n        },\n        maximum: {\n          $ref: '#/definitions/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: '#/definitions/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: '#/definitions/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: '#/definitions/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: '#/definitions/maxLength',\n        },\n        minLength: {\n          $ref: '#/definitions/minLength',\n        },\n        pattern: {\n          $ref: '#/definitions/pattern',\n        },\n        maxItems: {\n          $ref: '#/definitions/maxItems',\n        },\n        minItems: {\n          $ref: '#/definitions/minItems',\n        },\n        uniqueItems: {\n          $ref: '#/definitions/uniqueItems',\n        },\n        enum: {\n          $ref: '#/definitions/enum',\n        },\n        multipleOf: {\n          $ref: '#/definitions/multipleOf',\n        },\n      },\n    },\n    formDataParameterSubSchema: {\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        required: {\n          type: 'boolean',\n          description: 'Determines whether or not this parameter is required or optional.',\n          default: false,\n        },\n        in: {\n          type: 'string',\n          description: 'Determines the location of the parameter.',\n          enum: ['formData'],\n        },\n        description: {\n          type: 'string',\n          description:\n            'A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.',\n        },\n        name: {\n          type: 'string',\n          description: 'The name of the parameter.',\n        },\n        allowEmptyValue: {\n          type: 'boolean',\n          default: false,\n          description: 'allows sending a parameter by name only or with an empty value.',\n        },\n        type: {\n          type: 'string',\n          enum: ['string', 'number', 'boolean', 'integer', 'array', 'file'],\n        },\n        format: {\n          type: 'string',\n        },\n        items: {\n          $ref: '#/definitions/primitivesItems',\n        },\n        collectionFormat: {\n          $ref: '#/definitions/collectionFormatWithMulti',\n        },\n        default: {\n          $ref: '#/definitions/default',\n        },\n        maximum: {\n          $ref: '#/definitions/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: '#/definitions/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: '#/definitions/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: '#/definitions/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: '#/definitions/maxLength',\n        },\n        minLength: {\n          $ref: '#/definitions/minLength',\n        },\n        pattern: {\n          $ref: '#/definitions/pattern',\n        },\n        maxItems: {\n          $ref: '#/definitions/maxItems',\n        },\n        minItems: {\n          $ref: '#/definitions/minItems',\n        },\n        uniqueItems: {\n          $ref: '#/definitions/uniqueItems',\n        },\n        enum: {\n          $ref: '#/definitions/enum',\n        },\n        multipleOf: {\n          $ref: '#/definitions/multipleOf',\n        },\n      },\n    },\n    pathParameterSubSchema: {\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      required: ['required'],\n      properties: {\n        required: {\n          type: 'boolean',\n          enum: [true],\n          description: 'Determines whether or not this parameter is required or optional.',\n        },\n        in: {\n          type: 'string',\n          description: 'Determines the location of the parameter.',\n          enum: ['path'],\n        },\n        description: {\n          type: 'string',\n          description:\n            'A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.',\n        },\n        name: {\n          type: 'string',\n          description: 'The name of the parameter.',\n        },\n        type: {\n          type: 'string',\n          enum: ['string', 'number', 'boolean', 'integer', 'array'],\n        },\n        format: {\n          type: 'string',\n        },\n        items: {\n          $ref: '#/definitions/primitivesItems',\n        },\n        collectionFormat: {\n          $ref: '#/definitions/collectionFormat',\n        },\n        default: {\n          $ref: '#/definitions/default',\n        },\n        maximum: {\n          $ref: '#/definitions/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: '#/definitions/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: '#/definitions/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: '#/definitions/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: '#/definitions/maxLength',\n        },\n        minLength: {\n          $ref: '#/definitions/minLength',\n        },\n        pattern: {\n          $ref: '#/definitions/pattern',\n        },\n        maxItems: {\n          $ref: '#/definitions/maxItems',\n        },\n        minItems: {\n          $ref: '#/definitions/minItems',\n        },\n        uniqueItems: {\n          $ref: '#/definitions/uniqueItems',\n        },\n        enum: {\n          $ref: '#/definitions/enum',\n        },\n        multipleOf: {\n          $ref: '#/definitions/multipleOf',\n        },\n      },\n    },\n    nonBodyParameter: {\n      type: 'object',\n      required: ['name', 'in', 'type'],\n      oneOf: [\n        {\n          $ref: '#/definitions/headerParameterSubSchema',\n        },\n        {\n          $ref: '#/definitions/formDataParameterSubSchema',\n        },\n        {\n          $ref: '#/definitions/queryParameterSubSchema',\n        },\n        {\n          $ref: '#/definitions/pathParameterSubSchema',\n        },\n      ],\n    },\n    parameter: {\n      oneOf: [\n        {\n          $ref: '#/definitions/bodyParameter',\n        },\n        {\n          $ref: '#/definitions/nonBodyParameter',\n        },\n      ],\n    },\n    schema: {\n      type: 'object',\n      description: 'A deterministic version of a JSON Schema object.',\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        $ref: {\n          type: 'string',\n        },\n        format: {\n          type: 'string',\n        },\n        title: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/title',\n        },\n        description: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/description',\n        },\n        default: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/default',\n        },\n        multipleOf: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/multipleOf',\n        },\n        maximum: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveInteger',\n        },\n        minLength: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0',\n        },\n        pattern: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/pattern',\n        },\n        maxItems: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveInteger',\n        },\n        minItems: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0',\n        },\n        uniqueItems: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/uniqueItems',\n        },\n        maxProperties: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveInteger',\n        },\n        minProperties: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0',\n        },\n        required: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/stringArray',\n        },\n        enum: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/enum',\n        },\n        additionalProperties: {\n          anyOf: [\n            {\n              $ref: '#/definitions/schema',\n            },\n            {\n              type: 'boolean',\n            },\n          ],\n          default: {},\n        },\n        type: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/type',\n        },\n        items: {\n          anyOf: [\n            {\n              $ref: '#/definitions/schema',\n            },\n            {\n              type: 'array',\n              minItems: 1,\n              items: {\n                $ref: '#/definitions/schema',\n              },\n            },\n          ],\n          default: {},\n        },\n        allOf: {\n          type: 'array',\n          minItems: 1,\n          items: {\n            $ref: '#/definitions/schema',\n          },\n        },\n        oneOf: {\n          type: 'array',\n          minItems: 1,\n          items: {\n            $ref: '#/definitions/schema',\n          },\n        },\n        anyOf: {\n          type: 'array',\n          minItems: 1,\n          items: {\n            $ref: '#/definitions/schema',\n          },\n        },\n        properties: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/schema',\n          },\n          default: {},\n        },\n        discriminator: {\n          type: 'string',\n        },\n        readOnly: {\n          type: 'boolean',\n          default: false,\n        },\n        xml: {\n          $ref: '#/definitions/xml',\n        },\n        externalDocs: {\n          $ref: '#/definitions/externalDocs',\n        },\n        example: {},\n      },\n      additionalProperties: false,\n    },\n    fileSchema: {\n      type: 'object',\n      description: 'A deterministic version of a JSON Schema object.',\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      required: ['type'],\n      properties: {\n        format: {\n          type: 'string',\n        },\n        title: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/title',\n        },\n        description: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/description',\n        },\n        default: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/default',\n        },\n        required: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/stringArray',\n        },\n        type: {\n          type: 'string',\n          enum: ['file'],\n        },\n        readOnly: {\n          type: 'boolean',\n          default: false,\n        },\n        externalDocs: {\n          $ref: '#/definitions/externalDocs',\n        },\n        example: {},\n      },\n      additionalProperties: false,\n    },\n    primitivesItems: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['string', 'number', 'integer', 'boolean', 'array'],\n        },\n        format: {\n          type: 'string',\n        },\n        items: {\n          $ref: '#/definitions/primitivesItems',\n        },\n        collectionFormat: {\n          $ref: '#/definitions/collectionFormat',\n        },\n        default: {\n          $ref: '#/definitions/default',\n        },\n        maximum: {\n          $ref: '#/definitions/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: '#/definitions/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: '#/definitions/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: '#/definitions/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: '#/definitions/maxLength',\n        },\n        minLength: {\n          $ref: '#/definitions/minLength',\n        },\n        pattern: {\n          $ref: '#/definitions/pattern',\n        },\n        maxItems: {\n          $ref: '#/definitions/maxItems',\n        },\n        minItems: {\n          $ref: '#/definitions/minItems',\n        },\n        uniqueItems: {\n          $ref: '#/definitions/uniqueItems',\n        },\n        enum: {\n          $ref: '#/definitions/enum',\n        },\n        multipleOf: {\n          $ref: '#/definitions/multipleOf',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    security: {\n      type: 'array',\n      items: {\n        $ref: '#/definitions/securityRequirement',\n      },\n      uniqueItems: true,\n    },\n    securityRequirement: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'string',\n        },\n        uniqueItems: true,\n      },\n    },\n    xml: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        name: {\n          type: 'string',\n        },\n        namespace: {\n          type: 'string',\n        },\n        prefix: {\n          type: 'string',\n        },\n        attribute: {\n          type: 'boolean',\n          default: false,\n        },\n        wrapped: {\n          type: 'boolean',\n          default: false,\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    tag: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['name'],\n      properties: {\n        name: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        externalDocs: {\n          $ref: '#/definitions/externalDocs',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    securityDefinitions: {\n      type: 'object',\n      additionalProperties: {\n        oneOf: [\n          {\n            $ref: '#/definitions/basicAuthenticationSecurity',\n          },\n          {\n            $ref: '#/definitions/apiKeySecurity',\n          },\n          {\n            $ref: '#/definitions/oauth2ImplicitSecurity',\n          },\n          {\n            $ref: '#/definitions/oauth2PasswordSecurity',\n          },\n          {\n            $ref: '#/definitions/oauth2ApplicationSecurity',\n          },\n          {\n            $ref: '#/definitions/oauth2AccessCodeSecurity',\n          },\n        ],\n      },\n      errorMessage: {\n        properties: {\n          basic: 'Invalid basic authentication security definition',\n          apiKey: 'Invalid apiKey authentication security definition',\n          oauth2: 'Invalid oauth2 authentication security definition',\n        },\n        _: 'Invalid security securityDefinitions',\n      },\n    },\n    basicAuthenticationSecurity: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['basic'],\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    apiKeySecurity: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type', 'name', 'in'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['apiKey'],\n        },\n        name: {\n          type: 'string',\n        },\n        in: {\n          type: 'string',\n          enum: ['header', 'query'],\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    oauth2ImplicitSecurity: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type', 'flow', 'authorizationUrl', 'scopes'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['oauth2'],\n        },\n        flow: {\n          type: 'string',\n          enum: ['implicit'],\n        },\n        scopes: {\n          $ref: '#/definitions/oauth2Scopes',\n        },\n        authorizationUrl: {\n          type: 'string',\n          format: 'uri',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    oauth2PasswordSecurity: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type', 'flow', 'tokenUrl', 'scopes'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['oauth2'],\n        },\n        flow: {\n          type: 'string',\n          enum: ['password'],\n        },\n        scopes: {\n          $ref: '#/definitions/oauth2Scopes',\n        },\n        tokenUrl: {\n          type: 'string',\n          format: 'uri',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    oauth2ApplicationSecurity: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type', 'flow', 'tokenUrl', 'scopes'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['oauth2'],\n        },\n        flow: {\n          type: 'string',\n          enum: ['application'],\n        },\n        scopes: {\n          $ref: '#/definitions/oauth2Scopes',\n        },\n        tokenUrl: {\n          type: 'string',\n          format: 'uri',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    oauth2AccessCodeSecurity: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type', 'flow', 'authorizationUrl', 'tokenUrl', 'scopes'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['oauth2'],\n        },\n        flow: {\n          type: 'string',\n          enum: ['accessCode'],\n        },\n        scopes: {\n          $ref: '#/definitions/oauth2Scopes',\n        },\n        authorizationUrl: {\n          type: 'string',\n          format: 'uri',\n        },\n        tokenUrl: {\n          type: 'string',\n          format: 'uri',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    oauth2Scopes: {\n      type: 'object',\n      additionalProperties: {\n        type: 'string',\n      },\n    },\n    mediaTypeList: {\n      type: 'array',\n      items: {\n        $ref: '#/definitions/mimeType',\n      },\n      uniqueItems: true,\n    },\n    parametersList: {\n      type: 'array',\n      description: 'The parameters needed to send a valid API call.',\n      additionalItems: false,\n      items: {\n        oneOf: [\n          {\n            $ref: '#/definitions/parameter',\n          },\n          {\n            $ref: '#/definitions/jsonReference',\n          },\n        ],\n      },\n      uniqueItems: true,\n    },\n    schemesList: {\n      type: 'array',\n      description: 'The transfer protocol of the API.',\n      items: {\n        type: 'string',\n        enum: ['http', 'https', 'ws', 'wss'],\n      },\n      uniqueItems: true,\n    },\n    collectionFormat: {\n      type: 'string',\n      enum: ['csv', 'ssv', 'tsv', 'pipes'],\n      default: 'csv',\n    },\n    collectionFormatWithMulti: {\n      type: 'string',\n      enum: ['csv', 'ssv', 'tsv', 'pipes', 'multi'],\n      default: 'csv',\n    },\n    title: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/title',\n    },\n    description: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/description',\n    },\n    default: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/default',\n    },\n    multipleOf: {\n      type: 'number',\n      exclusiveMinimum: 0,\n    },\n    maximum: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/maximum',\n    },\n    exclusiveMaximum: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/exclusiveMaximum',\n    },\n    minimum: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/minimum',\n    },\n    exclusiveMinimum: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/exclusiveMinimum',\n    },\n    maxLength: {\n      $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveInteger',\n    },\n    minLength: {\n      $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0',\n    },\n    pattern: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/pattern',\n    },\n    maxItems: {\n      $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveInteger',\n    },\n    minItems: {\n      $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0',\n    },\n    uniqueItems: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/uniqueItems',\n    },\n    enum: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/enum',\n    },\n    jsonReference: {\n      type: 'object',\n      required: ['$ref'],\n      additionalProperties: false,\n      properties: {\n        $ref: {\n          type: 'string',\n        },\n      },\n    },\n  },\n};\n\nconst OAS_3 = {\n  $id: 'https://spec.openapis.org/oas/3.0/schema/2019-04-02',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  description: 'Validation schema for OpenAPI Specification 3.0.X.',\n  type: 'object',\n  required: ['openapi', 'info', 'paths'],\n  properties: {\n    openapi: {\n      type: 'string',\n      pattern: '^3\\\\.0\\\\.\\\\d(-.+)?$',\n    },\n    info: {\n      $ref: '#/definitions/Info',\n    },\n    externalDocs: {\n      $ref: '#/definitions/ExternalDocumentation',\n    },\n    servers: {\n      type: 'array',\n      items: {\n        $ref: '#/definitions/Server',\n      },\n    },\n    security: {\n      type: 'array',\n      items: {\n        $ref: '#/definitions/SecurityRequirement',\n      },\n    },\n    tags: {\n      type: 'array',\n      items: {\n        $ref: '#/definitions/Tag',\n      },\n      uniqueItems: true,\n    },\n    paths: {\n      $ref: '#/definitions/Paths',\n    },\n    components: {\n      $ref: '#/definitions/Components',\n    },\n  },\n  patternProperties: {\n    '^x-': {},\n  },\n  additionalProperties: false,\n  definitions: {\n    Reference: {\n      type: 'object',\n      required: ['$ref'],\n      patternProperties: {\n        '^\\\\$ref$': {\n          type: 'string',\n          format: 'uri-reference',\n        },\n      },\n    },\n    Info: {\n      type: 'object',\n      required: ['title', 'version'],\n      properties: {\n        title: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        termsOfService: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        contact: {\n          $ref: '#/definitions/Contact',\n        },\n        license: {\n          $ref: '#/definitions/License',\n        },\n        version: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Contact: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        email: {\n          type: 'string',\n          format: 'email',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    License: {\n      type: 'object',\n      required: ['name'],\n      properties: {\n        name: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Server: {\n      type: 'object',\n      required: ['url'],\n      properties: {\n        url: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        variables: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/ServerVariable',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    ServerVariable: {\n      type: 'object',\n      required: ['default'],\n      properties: {\n        enum: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n        default: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Components: {\n      type: 'object',\n      properties: {\n        schemas: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Schema',\n                },\n                {\n                  $ref: '#/definitions/Reference',\n                },\n              ],\n            },\n          },\n        },\n        responses: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/Response',\n                },\n              ],\n            },\n          },\n        },\n        parameters: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/Parameter',\n                },\n              ],\n            },\n          },\n        },\n        examples: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/Example',\n                },\n              ],\n            },\n          },\n        },\n        requestBodies: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/RequestBody',\n                },\n              ],\n            },\n          },\n        },\n        headers: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/Header',\n                },\n              ],\n            },\n          },\n        },\n        securitySchemes: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/SecurityScheme',\n                },\n              ],\n            },\n          },\n        },\n        links: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/Link',\n                },\n              ],\n            },\n          },\n        },\n        callbacks: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/Callback',\n                },\n              ],\n            },\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Schema: {\n      type: 'object',\n      properties: {\n        title: {\n          type: 'string',\n        },\n        multipleOf: {\n          type: 'number',\n          exclusiveMinimum: 0,\n        },\n        maximum: {\n          type: 'number',\n        },\n        exclusiveMaximum: {\n          type: 'boolean',\n          default: false,\n        },\n        minimum: {\n          type: 'number',\n        },\n        exclusiveMinimum: {\n          type: 'boolean',\n          default: false,\n        },\n        maxLength: {\n          type: 'integer',\n          minimum: 0,\n        },\n        minLength: {\n          type: 'integer',\n          minimum: 0,\n          default: 0,\n        },\n        pattern: {\n          type: 'string',\n          format: 'regex',\n        },\n        maxItems: {\n          type: 'integer',\n          minimum: 0,\n        },\n        minItems: {\n          type: 'integer',\n          minimum: 0,\n          default: 0,\n        },\n        uniqueItems: {\n          type: 'boolean',\n          default: false,\n        },\n        maxProperties: {\n          type: 'integer',\n          minimum: 0,\n        },\n        minProperties: {\n          type: 'integer',\n          minimum: 0,\n          default: 0,\n        },\n        required: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n          minItems: 1,\n          uniqueItems: true,\n        },\n        enum: {\n          type: 'array',\n          items: {},\n          minItems: 1,\n          uniqueItems: false,\n        },\n        type: {\n          type: 'string',\n          enum: ['array', 'boolean', 'integer', 'number', 'object', 'string'],\n        },\n        not: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Schema',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        allOf: {\n          type: 'array',\n          items: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Schema',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        oneOf: {\n          type: 'array',\n          items: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Schema',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        anyOf: {\n          type: 'array',\n          items: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Schema',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        items: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Schema',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        properties: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Schema',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        additionalProperties: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Schema',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n            {\n              type: 'boolean',\n            },\n          ],\n          default: true,\n        },\n        description: {\n          type: 'string',\n        },\n        format: {\n          type: 'string',\n        },\n        default: {},\n        nullable: {\n          type: 'boolean',\n          default: false,\n        },\n        discriminator: {\n          $ref: '#/definitions/Discriminator',\n        },\n        readOnly: {\n          type: 'boolean',\n          default: false,\n        },\n        writeOnly: {\n          type: 'boolean',\n          default: false,\n        },\n        example: {},\n        externalDocs: {\n          $ref: '#/definitions/ExternalDocumentation',\n        },\n        deprecated: {\n          type: 'boolean',\n          default: false,\n        },\n        xml: {\n          $ref: '#/definitions/XML',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Discriminator: {\n      type: 'object',\n      required: ['propertyName'],\n      properties: {\n        propertyName: {\n          type: 'string',\n        },\n        mapping: {\n          type: 'object',\n          additionalProperties: {\n            type: 'string',\n          },\n        },\n      },\n    },\n    XML: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        namespace: {\n          type: 'string',\n          format: 'uri',\n        },\n        prefix: {\n          type: 'string',\n        },\n        attribute: {\n          type: 'boolean',\n          default: false,\n        },\n        wrapped: {\n          type: 'boolean',\n          default: false,\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Response: {\n      type: 'object',\n      required: ['description'],\n      properties: {\n        description: {\n          type: 'string',\n        },\n        headers: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Header',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        content: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/MediaType',\n          },\n        },\n        links: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Link',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    MediaType: {\n      type: 'object',\n      properties: {\n        schema: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Schema',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        example: {},\n        examples: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Example',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        encoding: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/Encoding',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n      allOf: [\n        {\n          $ref: '#/definitions/ExampleXORExamples',\n        },\n      ],\n    },\n    Example: {\n      type: 'object',\n      properties: {\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        value: {},\n        externalValue: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Header: {\n      type: 'object',\n      properties: {\n        description: {\n          type: 'string',\n        },\n        required: {\n          type: 'boolean',\n          default: false,\n        },\n        deprecated: {\n          type: 'boolean',\n          default: false,\n        },\n        allowEmptyValue: {\n          type: 'boolean',\n          default: false,\n        },\n        style: {\n          type: 'string',\n          enum: ['simple'],\n          default: 'simple',\n        },\n        explode: {\n          type: 'boolean',\n        },\n        allowReserved: {\n          type: 'boolean',\n          default: false,\n        },\n        schema: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Schema',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        content: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/MediaType',\n          },\n          minProperties: 1,\n          maxProperties: 1,\n        },\n        example: {},\n        examples: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Example',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n      allOf: [\n        {\n          $ref: '#/definitions/ExampleXORExamples',\n        },\n        {\n          $ref: '#/definitions/SchemaXORContent',\n        },\n      ],\n    },\n    Paths: {\n      type: 'object',\n      patternProperties: {\n        '^\\\\/': {\n          $ref: '#/definitions/PathItem',\n        },\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    PathItem: {\n      type: 'object',\n      properties: {\n        $ref: {\n          type: 'string',\n        },\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        servers: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/Server',\n          },\n        },\n        parameters: {\n          type: 'array',\n          items: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Parameter',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n          uniqueItems: true,\n        },\n      },\n      patternProperties: {\n        '^(get|put|post|delete|options|head|patch|trace)$': {\n          $ref: '#/definitions/Operation',\n        },\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Operation: {\n      type: 'object',\n      required: ['responses'],\n      properties: {\n        tags: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        externalDocs: {\n          $ref: '#/definitions/ExternalDocumentation',\n        },\n        operationId: {\n          type: 'string',\n        },\n        parameters: {\n          type: 'array',\n          items: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Parameter',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n          uniqueItems: true,\n        },\n        requestBody: {\n          oneOf: [\n            {\n              $ref: '#/definitions/RequestBody',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        responses: {\n          $ref: '#/definitions/Responses',\n        },\n        callbacks: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Callback',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        deprecated: {\n          type: 'boolean',\n          default: false,\n        },\n        security: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/SecurityRequirement',\n          },\n        },\n        servers: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/Server',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Responses: {\n      type: 'object',\n      properties: {\n        default: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Response',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n      },\n      patternProperties: {\n        '^[1-5](?:\\\\d{2}|XX)$': {\n          oneOf: [\n            {\n              $ref: '#/definitions/Response',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        '^x-': {},\n      },\n      minProperties: 1,\n      additionalProperties: false,\n    },\n    SecurityRequirement: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'string',\n        },\n      },\n    },\n    Tag: {\n      type: 'object',\n      required: ['name'],\n      properties: {\n        name: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        externalDocs: {\n          $ref: '#/definitions/ExternalDocumentation',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    ExternalDocumentation: {\n      type: 'object',\n      required: ['url'],\n      properties: {\n        description: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    ExampleXORExamples: {\n      description: 'Example and examples are mutually exclusive',\n      not: {\n        required: ['example', 'examples'],\n      },\n    },\n    SchemaXORContent: {\n      description: 'Schema and content are mutually exclusive, at least one is required',\n      not: {\n        required: ['schema', 'content'],\n      },\n      oneOf: [\n        {\n          required: ['schema'],\n        },\n        {\n          required: ['content'],\n          description: 'Some properties are not allowed if content is present',\n          allOf: [\n            {\n              not: {\n                required: ['style'],\n              },\n            },\n            {\n              not: {\n                required: ['explode'],\n              },\n            },\n            {\n              not: {\n                required: ['allowReserved'],\n              },\n            },\n            {\n              not: {\n                required: ['example'],\n              },\n            },\n            {\n              not: {\n                required: ['examples'],\n              },\n            },\n          ],\n        },\n      ],\n    },\n    Parameter: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        in: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        required: {\n          type: 'boolean',\n          default: false,\n        },\n        deprecated: {\n          type: 'boolean',\n          default: false,\n        },\n        allowEmptyValue: {\n          type: 'boolean',\n          default: false,\n        },\n        style: {\n          type: 'string',\n        },\n        explode: {\n          type: 'boolean',\n        },\n        allowReserved: {\n          type: 'boolean',\n          default: false,\n        },\n        schema: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Schema',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        content: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/MediaType',\n          },\n          minProperties: 1,\n          maxProperties: 1,\n        },\n        example: {},\n        examples: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Example',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n      required: ['name', 'in'],\n      allOf: [\n        {\n          $ref: '#/definitions/ExampleXORExamples',\n        },\n        {\n          $ref: '#/definitions/SchemaXORContent',\n        },\n        {\n          $ref: '#/definitions/ParameterLocation',\n        },\n      ],\n    },\n    ParameterLocation: {\n      description: 'Parameter location',\n      oneOf: [\n        {\n          description: 'Parameter in path',\n          required: ['required'],\n          properties: {\n            in: {\n              enum: ['path'],\n            },\n            style: {\n              enum: ['matrix', 'label', 'simple'],\n              default: 'simple',\n            },\n            required: {\n              enum: [true],\n            },\n          },\n        },\n        {\n          description: 'Parameter in query',\n          properties: {\n            in: {\n              enum: ['query'],\n            },\n            style: {\n              enum: ['form', 'spaceDelimited', 'pipeDelimited', 'deepObject'],\n              default: 'form',\n            },\n          },\n        },\n        {\n          description: 'Parameter in header',\n          properties: {\n            in: {\n              enum: ['header'],\n            },\n            style: {\n              enum: ['simple'],\n              default: 'simple',\n            },\n          },\n        },\n        {\n          description: 'Parameter in cookie',\n          properties: {\n            in: {\n              enum: ['cookie'],\n            },\n            style: {\n              enum: ['form'],\n              default: 'form',\n            },\n          },\n        },\n      ],\n    },\n    RequestBody: {\n      type: 'object',\n      required: ['content'],\n      properties: {\n        description: {\n          type: 'string',\n        },\n        content: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/MediaType',\n          },\n        },\n        required: {\n          type: 'boolean',\n          default: false,\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    SecurityScheme: {\n      oneOf: [\n        {\n          $ref: '#/definitions/APIKeySecurityScheme',\n        },\n        {\n          $ref: '#/definitions/HTTPSecurityScheme',\n        },\n        {\n          $ref: '#/definitions/OAuth2SecurityScheme',\n        },\n        {\n          $ref: '#/definitions/OpenIdConnectSecurityScheme',\n        },\n      ],\n    },\n    APIKeySecurityScheme: {\n      type: 'object',\n      required: ['type', 'name', 'in'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['apiKey'],\n        },\n        name: {\n          type: 'string',\n        },\n        in: {\n          type: 'string',\n          enum: ['header', 'query', 'cookie'],\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    HTTPSecurityScheme: {\n      type: 'object',\n      required: ['scheme', 'type'],\n      properties: {\n        scheme: {\n          type: 'string',\n        },\n        bearerFormat: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        type: {\n          type: 'string',\n          enum: ['http'],\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n      oneOf: [\n        {\n          description: 'Bearer',\n          properties: {\n            scheme: {\n              enum: ['bearer'],\n            },\n          },\n        },\n        {\n          description: 'Non Bearer',\n          not: {\n            required: ['bearerFormat'],\n          },\n          properties: {\n            scheme: {\n              not: {\n                enum: ['bearer'],\n              },\n            },\n          },\n        },\n      ],\n    },\n    OAuth2SecurityScheme: {\n      type: 'object',\n      required: ['type', 'flows'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['oauth2'],\n        },\n        flows: {\n          $ref: '#/definitions/OAuthFlows',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    OpenIdConnectSecurityScheme: {\n      type: 'object',\n      required: ['type', 'openIdConnectUrl'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['openIdConnect'],\n        },\n        openIdConnectUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    OAuthFlows: {\n      type: 'object',\n      properties: {\n        implicit: {\n          $ref: '#/definitions/ImplicitOAuthFlow',\n        },\n        password: {\n          $ref: '#/definitions/PasswordOAuthFlow',\n        },\n        clientCredentials: {\n          $ref: '#/definitions/ClientCredentialsFlow',\n        },\n        authorizationCode: {\n          $ref: '#/definitions/AuthorizationCodeOAuthFlow',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    ImplicitOAuthFlow: {\n      type: 'object',\n      required: ['authorizationUrl', 'scopes'],\n      properties: {\n        authorizationUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        refreshUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        scopes: {\n          type: 'object',\n          additionalProperties: {\n            type: 'string',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    PasswordOAuthFlow: {\n      type: 'object',\n      required: ['tokenUrl', 'scopes'],\n      properties: {\n        tokenUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        refreshUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        scopes: {\n          type: 'object',\n          additionalProperties: {\n            type: 'string',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    ClientCredentialsFlow: {\n      type: 'object',\n      required: ['tokenUrl', 'scopes'],\n      properties: {\n        tokenUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        refreshUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        scopes: {\n          type: 'object',\n          additionalProperties: {\n            type: 'string',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    AuthorizationCodeOAuthFlow: {\n      type: 'object',\n      required: ['authorizationUrl', 'tokenUrl', 'scopes'],\n      properties: {\n        authorizationUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        tokenUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        refreshUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        scopes: {\n          type: 'object',\n          additionalProperties: {\n            type: 'string',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Link: {\n      type: 'object',\n      properties: {\n        operationId: {\n          type: 'string',\n        },\n        operationRef: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        parameters: {\n          type: 'object',\n          additionalProperties: {},\n        },\n        requestBody: {},\n        description: {\n          type: 'string',\n        },\n        server: {\n          $ref: '#/definitions/Server',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n      not: {\n        description: 'Operation Id and Operation Ref are mutually exclusive',\n        required: ['operationId', 'operationRef'],\n      },\n    },\n    Callback: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/definitions/PathItem',\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n    },\n    Encoding: {\n      type: 'object',\n      properties: {\n        contentType: {\n          type: 'string',\n        },\n        headers: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/Header',\n          },\n        },\n        style: {\n          type: 'string',\n          enum: ['form', 'spaceDelimited', 'pipeDelimited', 'deepObject'],\n        },\n        explode: {\n          type: 'boolean',\n        },\n        allowReserved: {\n          type: 'boolean',\n          default: false,\n        },\n      },\n      additionalProperties: false,\n    },\n  },\n};\n\nconst OAS_3_1 = {\n  $id: 'https://spec.openapis.org/oas/3.1/schema/2021-09-28',\n  $schema: 'https://json-schema.org/draft/2020-12/schema',\n  type: 'object',\n  properties: {\n    openapi: {\n      type: 'string',\n      pattern: '^3\\\\.1\\\\.\\\\d+(-.+)?$',\n    },\n    info: {\n      $ref: '#/$defs/info',\n    },\n    jsonSchemaDialect: {\n      type: 'string',\n      format: 'uri',\n      default: 'https://spec.openapis.org/oas/3.1/dialect/base',\n    },\n    servers: {\n      type: 'array',\n      items: {\n        $ref: '#/$defs/server',\n      },\n    },\n    paths: {\n      $ref: '#/$defs/paths',\n    },\n    webhooks: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/$defs/path-item-or-reference',\n      },\n    },\n    components: {\n      $ref: '#/$defs/components',\n    },\n    security: {\n      type: 'array',\n      items: {\n        $ref: '#/$defs/security-requirement',\n      },\n    },\n    tags: {\n      type: 'array',\n      items: {\n        $ref: '#/$defs/tag',\n      },\n    },\n    externalDocs: {\n      $ref: '#/$defs/external-documentation',\n    },\n  },\n  required: ['openapi', 'info'],\n  anyOf: [\n    {\n      required: ['paths'],\n      errorMessage: 'The document must have either \"paths\", \"webhooks\" or \"components\"',\n    },\n    {\n      required: ['components'],\n    },\n    {\n      required: ['webhooks'],\n    },\n  ],\n  $ref: '#/$defs/specification-extensions',\n  unevaluatedProperties: false,\n  $defs: {\n    info: {\n      type: 'object',\n      properties: {\n        title: {\n          type: 'string',\n        },\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        termsOfService: {\n          type: 'string',\n        },\n        contact: {\n          $ref: '#/$defs/contact',\n        },\n        license: {\n          $ref: '#/$defs/license',\n        },\n        version: {\n          type: 'string',\n        },\n      },\n      required: ['title', 'version'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    contact: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n        },\n        email: {\n          type: 'string',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    license: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        identifier: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n          format: 'uri',\n        },\n      },\n      required: ['name'],\n      oneOf: [\n        {\n          required: ['identifier'],\n        },\n        {\n          required: ['url'],\n        },\n      ],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    server: {\n      type: 'object',\n      properties: {\n        url: {\n          type: 'string',\n          format: 'uri-template',\n        },\n        description: {\n          type: 'string',\n        },\n        variables: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/server-variable',\n          },\n        },\n      },\n      required: ['url'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'server-variable': {\n      type: 'object',\n      properties: {\n        enum: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n          minItems: 1,\n        },\n        default: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      required: ['default'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    components: {\n      type: 'object',\n      properties: {\n        schemas: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/schema',\n          },\n        },\n        responses: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/response-or-reference',\n          },\n        },\n        parameters: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/parameter-or-reference',\n          },\n        },\n        examples: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/example-or-reference',\n          },\n        },\n        requestBodies: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/request-body-or-reference',\n          },\n        },\n        headers: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/header-or-reference',\n          },\n        },\n        securitySchemes: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/security-scheme-or-reference',\n          },\n        },\n        links: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/link-or-reference',\n          },\n        },\n        callbacks: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/callbacks-or-reference',\n          },\n        },\n        pathItems: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/path-item-or-reference',\n          },\n        },\n      },\n      patternProperties: {\n        '^(schemas|responses|parameters|examples|requestBodies|headers|securitySchemes|links|callbacks|pathItems)$': {\n          $comment:\n            'Enumerating all of the property names in the regex above is necessary for unevaluatedProperties to work as expected',\n          propertyNames: {\n            pattern: '^[a-zA-Z0-9._-]+$',\n          },\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    paths: {\n      type: 'object',\n      patternProperties: {\n        '^/': {\n          $ref: '#/$defs/path-item',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'path-item': {\n      type: 'object',\n      properties: {\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        servers: {\n          type: 'array',\n          items: {\n            $ref: '#/$defs/server',\n          },\n        },\n        parameters: {\n          type: 'array',\n          items: {\n            $ref: '#/$defs/parameter-or-reference',\n          },\n        },\n      },\n      patternProperties: {\n        '^(get|put|post|delete|options|head|patch|trace)$': {\n          $ref: '#/$defs/operation',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'path-item-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/path-item',\n      },\n    },\n    operation: {\n      type: 'object',\n      properties: {\n        tags: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        externalDocs: {\n          $ref: '#/$defs/external-documentation',\n        },\n        operationId: {\n          type: 'string',\n        },\n        parameters: {\n          type: 'array',\n          items: {\n            $ref: '#/$defs/parameter-or-reference',\n          },\n        },\n        requestBody: {\n          $ref: '#/$defs/request-body-or-reference',\n        },\n        responses: {\n          $ref: '#/$defs/responses',\n        },\n        callbacks: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/callbacks-or-reference',\n          },\n        },\n        deprecated: {\n          default: false,\n          type: 'boolean',\n        },\n        security: {\n          type: 'array',\n          items: {\n            $ref: '#/$defs/security-requirement',\n          },\n        },\n        servers: {\n          type: 'array',\n          items: {\n            $ref: '#/$defs/server',\n          },\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'external-documentation': {\n      type: 'object',\n      properties: {\n        description: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n          format: 'uri',\n        },\n      },\n      required: ['url'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    parameter: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        in: {\n          enum: ['query', 'header', 'path', 'cookie'],\n        },\n        description: {\n          type: 'string',\n        },\n        required: {\n          default: false,\n          type: 'boolean',\n        },\n        deprecated: {\n          default: false,\n          type: 'boolean',\n        },\n        allowEmptyValue: {\n          default: false,\n          type: 'boolean',\n        },\n        schema: {\n          $ref: '#/$defs/schema',\n        },\n        content: {\n          $ref: '#/$defs/content',\n        },\n      },\n      required: ['in'],\n      oneOf: [\n        {\n          required: ['schema'],\n        },\n        {\n          required: ['content'],\n        },\n      ],\n      dependentSchemas: {\n        schema: {\n          properties: {\n            style: {\n              type: 'string',\n            },\n            explode: {\n              type: 'boolean',\n            },\n            allowReserved: {\n              default: false,\n              type: 'boolean',\n            },\n          },\n          allOf: [\n            {\n              $ref: '#/$defs/examples',\n            },\n            {\n              $ref: '#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-path',\n            },\n            {\n              $ref: '#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-header',\n            },\n            {\n              $ref: '#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-query',\n            },\n            {\n              $ref: '#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-cookie',\n            },\n            {\n              $ref: '#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-form',\n            },\n          ],\n          $defs: {\n            'styles-for-path': {\n              if: {\n                properties: {\n                  in: {\n                    const: 'path',\n                  },\n                },\n                required: ['in'],\n              },\n              then: {\n                properties: {\n                  name: {\n                    pattern: '[^/#?]+$',\n                  },\n                  style: {\n                    default: 'simple',\n                    enum: ['matrix', 'label', 'simple'],\n                  },\n                  required: {\n                    const: true,\n                  },\n                },\n                required: ['required'],\n              },\n            },\n            'styles-for-header': {\n              if: {\n                properties: {\n                  in: {\n                    const: 'header',\n                  },\n                },\n                required: ['in'],\n              },\n              then: {\n                properties: {\n                  style: {\n                    default: 'simple',\n                    const: 'simple',\n                  },\n                },\n              },\n            },\n            'styles-for-query': {\n              if: {\n                properties: {\n                  in: {\n                    const: 'query',\n                  },\n                },\n                required: ['in'],\n              },\n              then: {\n                properties: {\n                  style: {\n                    default: 'form',\n                    enum: ['form', 'spaceDelimited', 'pipeDelimited', 'deepObject'],\n                  },\n                },\n              },\n            },\n            'styles-for-cookie': {\n              if: {\n                properties: {\n                  in: {\n                    const: 'cookie',\n                  },\n                },\n                required: ['in'],\n              },\n              then: {\n                properties: {\n                  style: {\n                    default: 'form',\n                    const: 'form',\n                  },\n                },\n              },\n            },\n            'styles-for-form': {\n              if: {\n                properties: {\n                  style: {\n                    const: 'form',\n                  },\n                },\n                required: ['style'],\n              },\n              then: {\n                properties: {\n                  explode: {\n                    default: true,\n                  },\n                },\n              },\n              else: {\n                properties: {\n                  explode: {\n                    default: false,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'parameter-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/parameter',\n      },\n    },\n    'request-body': {\n      type: 'object',\n      properties: {\n        description: {\n          type: 'string',\n        },\n        content: {\n          $ref: '#/$defs/content',\n        },\n        required: {\n          default: false,\n          type: 'boolean',\n        },\n      },\n      required: ['content'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'request-body-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/request-body',\n      },\n    },\n    content: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/$defs/media-type',\n      },\n      propertyNames: {\n        format: 'media-range',\n      },\n    },\n    'media-type': {\n      type: 'object',\n      properties: {\n        schema: {\n          $ref: '#/$defs/schema',\n        },\n        encoding: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/encoding',\n          },\n        },\n      },\n      allOf: [\n        {\n          $ref: '#/$defs/specification-extensions',\n        },\n        {\n          $ref: '#/$defs/examples',\n        },\n      ],\n      unevaluatedProperties: false,\n    },\n    encoding: {\n      type: 'object',\n      properties: {\n        contentType: {\n          type: 'string',\n          format: 'media-range',\n        },\n        headers: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/header-or-reference',\n          },\n        },\n        style: {\n          default: 'form',\n          enum: ['form', 'spaceDelimited', 'pipeDelimited', 'deepObject'],\n        },\n        explode: {\n          type: 'boolean',\n        },\n        allowReserved: {\n          default: false,\n          type: 'boolean',\n        },\n      },\n      allOf: [\n        {\n          $ref: '#/$defs/specification-extensions',\n        },\n        {\n          $ref: '#/$defs/encoding/$defs/explode-default',\n        },\n      ],\n      unevaluatedProperties: false,\n      $defs: {\n        'explode-default': {\n          if: {\n            properties: {\n              style: {\n                const: 'form',\n              },\n            },\n            required: ['style'],\n          },\n          then: {\n            properties: {\n              explode: {\n                default: true,\n              },\n            },\n          },\n          else: {\n            properties: {\n              explode: {\n                default: false,\n              },\n            },\n          },\n        },\n      },\n    },\n    responses: {\n      type: 'object',\n      properties: {\n        default: {\n          $ref: '#/$defs/response-or-reference',\n        },\n      },\n      patternProperties: {\n        '^[1-5](?:[0-9]{2}|XX)$': {\n          $ref: '#/$defs/response-or-reference',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    response: {\n      type: 'object',\n      properties: {\n        description: {\n          type: 'string',\n        },\n        headers: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/header-or-reference',\n          },\n        },\n        content: {\n          $ref: '#/$defs/content',\n        },\n        links: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/link-or-reference',\n          },\n        },\n      },\n      required: ['description'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'response-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/response',\n      },\n    },\n    callbacks: {\n      type: 'object',\n      $ref: '#/$defs/specification-extensions',\n      additionalProperties: {\n        $ref: '#/$defs/path-item-or-reference',\n      },\n    },\n    'callbacks-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/callbacks',\n      },\n    },\n    example: {\n      type: 'object',\n      properties: {\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        value: true,\n        externalValue: {\n          type: 'string',\n          format: 'uri',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'example-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/example',\n      },\n    },\n    link: {\n      type: 'object',\n      properties: {\n        operationRef: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        operationId: true,\n        parameters: {\n          $ref: '#/$defs/map-of-strings',\n        },\n        requestBody: true,\n        description: {\n          type: 'string',\n        },\n        body: {\n          $ref: '#/$defs/server',\n        },\n      },\n      oneOf: [\n        {\n          required: ['operationRef'],\n        },\n        {\n          required: ['operationId'],\n        },\n      ],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'link-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/link',\n      },\n    },\n    header: {\n      type: 'object',\n      properties: {\n        description: {\n          type: 'string',\n        },\n        required: {\n          default: false,\n          type: 'boolean',\n        },\n        deprecated: {\n          default: false,\n          type: 'boolean',\n        },\n        schema: {\n          $ref: '#/$defs/schema',\n        },\n        content: {\n          $ref: '#/$defs/content',\n        },\n      },\n      oneOf: [\n        {\n          required: ['schema'],\n        },\n        {\n          required: ['content'],\n        },\n      ],\n      dependentSchemas: {\n        schema: {\n          properties: {\n            style: {\n              default: 'simple',\n              const: 'simple',\n            },\n            explode: {\n              default: false,\n              type: 'boolean',\n            },\n          },\n          $ref: '#/$defs/examples',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'header-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/header',\n      },\n    },\n    tag: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        externalDocs: {\n          $ref: '#/$defs/external-documentation',\n        },\n      },\n      required: ['name'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    reference: {\n      type: 'object',\n      properties: {\n        $ref: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      unevaluatedProperties: false,\n    },\n    schema: {\n      $dynamicAnchor: 'meta',\n      type: ['object', 'boolean'],\n    },\n    'security-scheme': {\n      type: 'object',\n      properties: {\n        type: {\n          enum: ['apiKey', 'http', 'mutualTLS', 'oauth2', 'openIdConnect'],\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      required: ['type'],\n      allOf: [\n        {\n          $ref: '#/$defs/specification-extensions',\n        },\n        {\n          $ref: '#/$defs/security-scheme/$defs/type-apikey',\n        },\n        {\n          $ref: '#/$defs/security-scheme/$defs/type-http',\n        },\n        {\n          $ref: '#/$defs/security-scheme/$defs/type-http-bearer',\n        },\n        {\n          $ref: '#/$defs/security-scheme/$defs/type-oauth2',\n        },\n        {\n          $ref: '#/$defs/security-scheme/$defs/type-oidc',\n        },\n      ],\n      unevaluatedProperties: false,\n      $defs: {\n        'type-apikey': {\n          if: {\n            properties: {\n              type: {\n                const: 'apiKey',\n              },\n            },\n            required: ['type'],\n          },\n          then: {\n            properties: {\n              name: {\n                type: 'string',\n              },\n              in: {\n                enum: ['query', 'header', 'cookie'],\n              },\n            },\n            required: ['name', 'in'],\n          },\n        },\n        'type-http': {\n          if: {\n            properties: {\n              type: {\n                const: 'http',\n              },\n            },\n            required: ['type'],\n          },\n          then: {\n            properties: {\n              scheme: {\n                type: 'string',\n              },\n            },\n            required: ['scheme'],\n          },\n        },\n        'type-http-bearer': {\n          if: {\n            properties: {\n              type: {\n                const: 'http',\n              },\n              scheme: {\n                type: 'string',\n                pattern: '^[Bb][Ee][Aa][Rr][Ee][Rr]$',\n              },\n            },\n            required: ['type', 'scheme'],\n          },\n          then: {\n            properties: {\n              bearerFormat: {\n                type: 'string',\n              },\n            },\n          },\n        },\n        'type-oauth2': {\n          if: {\n            properties: {\n              type: {\n                const: 'oauth2',\n              },\n            },\n            required: ['type'],\n          },\n          then: {\n            properties: {\n              flows: {\n                $ref: '#/$defs/oauth-flows',\n              },\n            },\n            required: ['flows'],\n          },\n        },\n        'type-oidc': {\n          if: {\n            properties: {\n              type: {\n                const: 'openIdConnect',\n              },\n            },\n            required: ['type'],\n          },\n          then: {\n            properties: {\n              openIdConnectUrl: {\n                type: 'string',\n                format: 'uri',\n              },\n            },\n            required: ['openIdConnectUrl'],\n          },\n        },\n      },\n    },\n    'security-scheme-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/security-scheme',\n      },\n    },\n    'oauth-flows': {\n      type: 'object',\n      properties: {\n        implicit: {\n          $ref: '#/$defs/oauth-flows/$defs/implicit',\n        },\n        password: {\n          $ref: '#/$defs/oauth-flows/$defs/password',\n        },\n        clientCredentials: {\n          $ref: '#/$defs/oauth-flows/$defs/client-credentials',\n        },\n        authorizationCode: {\n          $ref: '#/$defs/oauth-flows/$defs/authorization-code',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n      $defs: {\n        implicit: {\n          type: 'object',\n          properties: {\n            authorizationUrl: {\n              type: 'string',\n            },\n            refreshUrl: {\n              type: 'string',\n            },\n            scopes: {\n              $ref: '#/$defs/map-of-strings',\n            },\n          },\n          required: ['authorizationUrl', 'scopes'],\n          $ref: '#/$defs/specification-extensions',\n          unevaluatedProperties: false,\n        },\n        password: {\n          type: 'object',\n          properties: {\n            tokenUrl: {\n              type: 'string',\n            },\n            refreshUrl: {\n              type: 'string',\n            },\n            scopes: {\n              $ref: '#/$defs/map-of-strings',\n            },\n          },\n          required: ['tokenUrl', 'scopes'],\n          $ref: '#/$defs/specification-extensions',\n          unevaluatedProperties: false,\n        },\n        'client-credentials': {\n          type: 'object',\n          properties: {\n            tokenUrl: {\n              type: 'string',\n            },\n            refreshUrl: {\n              type: 'string',\n            },\n            scopes: {\n              $ref: '#/$defs/map-of-strings',\n            },\n          },\n          required: ['tokenUrl', 'scopes'],\n          $ref: '#/$defs/specification-extensions',\n          unevaluatedProperties: false,\n        },\n        'authorization-code': {\n          type: 'object',\n          properties: {\n            authorizationUrl: {\n              type: 'string',\n            },\n            tokenUrl: {\n              type: 'string',\n            },\n            refreshUrl: {\n              type: 'string',\n            },\n            scopes: {\n              $ref: '#/$defs/map-of-strings',\n            },\n          },\n          required: ['authorizationUrl', 'tokenUrl', 'scopes'],\n          $ref: '#/$defs/specification-extensions',\n          unevaluatedProperties: false,\n        },\n      },\n    },\n    'security-requirement': {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'string',\n        },\n      },\n    },\n    'specification-extensions': {\n      patternProperties: {\n        '^x-': true,\n      },\n    },\n    examples: {\n      properties: {\n        example: true,\n        examples: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/example-or-reference',\n          },\n        },\n      },\n    },\n    'map-of-strings': {\n      type: 'object',\n      additionalProperties: {\n        type: 'string',\n      },\n    },\n  },\n};\n\nconst OAS_SCHEMAS = {\n  '2.0': OAS_2,\n  '3.0': OAS_3,\n  3.1: OAS_3_1,\n};\n\nfunction shouldIgnoreError(error) {\n  return (\n    // oneOf is a fairly error as we have 2 options to choose from for most of the time.\n    error.keyword === 'oneOf' ||\n    // the required $ref is entirely useless, since oas-schema rules operate on resolved content, so there won't be any $refs in the document\n    (error.keyword === 'required' && error.params.missingProperty === '$ref')\n  );\n}\n\n// this is supposed to cover edge cases we need to cover manually, when it's impossible to detect the most appropriate error, i.e. oneOf consisting of more than 3 members, etc.\n// note,  more errors can be included if certain messages reported by AJV are not quite meaningful\nconst ERROR_MAP = [\n  {\n    path: /^components\\/securitySchemes\\/[^/]+$/,\n    message: 'Invalid security scheme',\n  },\n];\n\n// The function removes irrelevant (aka misleading, confusing, useless, whatever you call it) errors.\n// There are a few exceptions, i.e. security components I covered manually,\n// yet apart from them we usually deal with a relatively simple scenario that can be literally expressed as: \"either proper value of $ref property\".\n// The $ref part is never going to be interesting for us, because both oas-schema rules operate on resolved content, so we won't have any $refs left.\n// As you can see, what we deal here wit is actually not really oneOf anymore - it's always the first member of oneOf we match against.\n// That being said, we always strip both oneOf and $ref, since we are always interested in the first error.\nexport function prepareResults(errors) {\n  // Update additionalProperties errors to make them more precise and prevent them from being treated as duplicates\n  for (const error of errors) {\n    if (error.keyword === 'additionalProperties') {\n      error.instancePath = `${error.instancePath}/${String(error.params['additionalProperty'])}`;\n    }\n  }\n\n  for (let i = 0; i < errors.length; i++) {\n    const error = errors[i];\n\n    if (i + 1 < errors.length && errors[i + 1].instancePath === error.instancePath) {\n      errors.splice(i + 1, 1);\n      i--;\n    } else if (i > 0 && shouldIgnoreError(error) && errors[i - 1].instancePath.startsWith(error.instancePath)) {\n      errors.splice(i, 1);\n      i--;\n    }\n  }\n}\n\nfunction applyManualReplacements(errors) {\n  for (const error of errors) {\n    if (error.path === void 0) continue;\n\n    const joinedPath = error.path.join('/');\n\n    for (const mappedError of ERROR_MAP) {\n      if (mappedError.path.test(joinedPath)) {\n        error.message = mappedError.message;\n        break;\n      }\n    }\n  }\n}\n\nexport default createRulesetFunction(\n  {\n    input: null,\n    options: null,\n  },\n  function oasDocumentSchema(targetVal, opts, context) {\n    const formats = context.document.formats;\n    if (formats === null || formats === void 0) return;\n\n    const schema = formats.has(oas2)\n      ? OAS_SCHEMAS['2.0']\n      : formats.has(oas3_1)\n      ? OAS_SCHEMAS['3.1']\n      : OAS_SCHEMAS['3.0'];\n\n    const errors = schemaFn(targetVal, { allErrors: true, schema, prepareResults }, context);\n\n    if (Array.isArray(errors)) {\n      applyManualReplacements(errors);\n    }\n\n    return errors;\n  },\n);\n"
    },
    {
      "id": "Fyb44G24cjrSAER9vLV1P",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oasDiscriminator",
      "content": "function isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nexport const oasDiscriminator = (schema, _opts, { path }) => {\n  /**\n   * This function verifies:\n   *\n   * 1. The discriminator property name is defined at this schema.\n   * 2. The discriminator property is in the required property list.\n   */\n\n  if (!isObject(schema)) return;\n\n  if (typeof schema.discriminator !== 'string') return;\n\n  const discriminatorName = schema.discriminator;\n\n  const results = [];\n\n  if (!isObject(schema.properties) || !Object.keys(schema.properties).some(k => k === discriminatorName)) {\n    results.push({\n      message: `The discriminator property must be defined in this schema.`,\n      path: [...path, 'properties'],\n    });\n  }\n\n  if (!Array.isArray(schema.required) || !schema.required.some(n => n === discriminatorName)) {\n    results.push({\n      message: `The discriminator property must be in the required property list.`,\n      path: [...path, 'required'],\n    });\n  }\n\n  return results;\n};\n\nexport default oasDiscriminator;"
    },
    {
      "id": "DO0hjRe665FHl9vWb28ZQ",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oasOpFormDataConsumeCheck",
      "content": "function isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nconst validConsumeValue = /(application\\/x-www-form-urlencoded|multipart\\/form-data)/;\n\nexport const oasOpFormDataConsumeCheck = targetVal => {\n  if (!isObject(targetVal)) return;\n\n  const parameters = targetVal.parameters;\n  const consumes = targetVal.consumes;\n\n  if (!Array.isArray(parameters) || !Array.isArray(consumes)) {\n    return;\n  }\n\n  if (parameters.some(p => isObject(p) && p.in === 'formData') && !validConsumeValue.test(consumes?.join(','))) {\n    return [\n      {\n        message: 'Consumes must include urlencoded, multipart, or form-data media type when using formData parameter.',\n      },\n    ];\n  }\n\n  return;\n};\n\nexport default oasOpFormDataConsumeCheck;"
    },
    {
      "id": "_PhnlEkugIvoXc3E3xer-",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oasUnusedComponent",
      "content": "import { unreferencedReusableObject } from '@stoplight/spectral-functions';\nimport { createRulesetFunction } from '@stoplight/spectral-core';\n\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nexport default createRulesetFunction(\n  {\n    input: {\n      type: 'object',\n      properties: {\n        components: {\n          type: 'object',\n        },\n      },\n      required: ['components'],\n    },\n    options: null,\n  },\n  function oasUnusedComponent(targetVal, opts, context) {\n    const results = [];\n    const componentTypes = [\n      'schemas',\n      'responses',\n      'parameters',\n      'examples',\n      'requestBodies',\n      'headers',\n      'links',\n      'callbacks',\n    ];\n\n    for (const type of componentTypes) {\n      const value = targetVal.components[type];\n      if (!isObject(value)) continue;\n\n      const resultsForType = unreferencedReusableObject(\n        value,\n        { reusableObjectsLocation: `#/components/${type}` },\n        context,\n      );\n      if (resultsForType !== void 0 && Array.isArray(resultsForType)) {\n        results.push(...resultsForType);\n      }\n    }\n\n    return results;\n  },\n);"
    },
    {
      "id": "o7WX3qLtsn8t_Pcmvy5EF",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oasOpIdUnique",
      "content": "import { isPlainObject } from '@stoplight/json';\n\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nconst validOperationKeys = ['get', 'head', 'post', 'put', 'patch', 'delete', 'options', 'trace'];\n\nfunction* getAllOperations(paths) {\n  if (!isPlainObject(paths)) {\n    return;\n  }\n\n  const item = {\n    path: '',\n    operation: '',\n    value: null,\n  };\n\n  for (const path of Object.keys(paths)) {\n    const operations = paths[path];\n    if (!isPlainObject(operations)) {\n      continue;\n    }\n\n    item.path = path;\n\n    for (const operation of Object.keys(operations)) {\n      if (!isPlainObject(operations[operation]) || !validOperationKeys.includes(operation)) {\n        continue;\n      }\n\n      item.operation = operation;\n      item.value = operations[operation];\n\n      yield item;\n    }\n  }\n}\n\nexport const oasOpIdUnique = targetVal => {\n  if (!isObject(targetVal) || !isObject(targetVal.paths)) return;\n\n  const results = [];\n\n  const { paths } = targetVal;\n\n  const seenIds = [];\n\n  for (const { path, operation } of getAllOperations(paths)) {\n    const pathValue = paths[path];\n\n    if (!isObject(pathValue)) continue;\n\n    const operationValue = pathValue[operation];\n\n    if (!isObject(operationValue) || !('operationId' in operationValue)) {\n      continue;\n    }\n\n    const { operationId } = operationValue;\n\n    if (seenIds.includes(operationId)) {\n      results.push({\n        message: 'operationId must be unique.',\n        path: ['paths', path, operation, 'operationId'],\n      });\n    } else {\n      seenIds.push(operationId);\n    }\n  }\n\n  return results;\n};\n\nexport default oasOpIdUnique;"
    },
    {
      "id": "oKiu1HJ4CqX24Y8EXUMM0",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oasTagDefined",
      "content": "// This function will check an API doc to verify that any tag that appears on\n// an operation is also present in the global tags array.\nimport { isPlainObject } from '@stoplight/json';\n\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nconst validOperationKeys = ['get', 'head', 'post', 'put', 'patch', 'delete', 'options', 'trace'];\n\nfunction* getAllOperations(paths) {\n  if (!isPlainObject(paths)) {\n    return;\n  }\n\n  const item = {\n    path: '',\n    operation: '',\n    value: null,\n  };\n\n  for (const path of Object.keys(paths)) {\n    const operations = paths[path];\n    if (!isPlainObject(operations)) {\n      continue;\n    }\n\n    item.path = path;\n\n    for (const operation of Object.keys(operations)) {\n      if (!isPlainObject(operations[operation]) || !validOperationKeys.includes(operation)) {\n        continue;\n      }\n\n      item.operation = operation;\n      item.value = operations[operation];\n\n      yield item;\n    }\n  }\n}\n\nexport const oasTagDefined = targetVal => {\n  if (!isObject(targetVal)) return;\n  const results = [];\n\n  const globalTags = [];\n\n  if (Array.isArray(targetVal.tags)) {\n    for (const tag of targetVal.tags) {\n      if (isObject(tag) && typeof tag.name === 'string') {\n        globalTags.push(tag.name);\n      }\n    }\n  }\n\n  const { paths } = targetVal;\n\n  for (const { path, operation, value } of getAllOperations(paths)) {\n    if (!isObject(value)) continue;\n\n    const { tags } = value;\n\n    if (!Array.isArray(tags)) {\n      continue;\n    }\n\n    for (const [i, tag] of tags.entries()) {\n      if (!globalTags.includes(tag)) {\n        results.push({\n          message: 'Operation tags must be defined in global tags.',\n          path: ['paths', path, operation, 'tags', i],\n        });\n      }\n    }\n  }\n\n  return results;\n};\n\nexport default oasTagDefined;"
    },
    {
      "id": "ze_UvJFE1HNOBxmyK4rg-",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oasOpSecurityDefined",
      "content": "import { isPlainObject } from '@stoplight/json';\nimport { createRulesetFunction } from '@stoplight/spectral-core';\n\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nconst validOperationKeys = ['get', 'head', 'post', 'put', 'patch', 'delete', 'options', 'trace'];\n\nfunction* getAllOperations(paths) {\n  if (!isPlainObject(paths)) {\n    return;\n  }\n\n  const item = {\n    path: '',\n    operation: '',\n    value: null,\n  };\n\n  for (const path of Object.keys(paths)) {\n    const operations = paths[path];\n    if (!isPlainObject(operations)) {\n      continue;\n    }\n\n    item.path = path;\n\n    for (const operation of Object.keys(operations)) {\n      if (!isPlainObject(operations[operation]) || !validOperationKeys.includes(operation)) {\n        continue;\n      }\n\n      item.operation = operation;\n      item.value = operations[operation];\n\n      yield item;\n    }\n  }\n}\n\nfunction _get(value, path) {\n  for (const segment of path) {\n    if (!isObject(value)) {\n      break;\n    }\n\n    value = value[segment];\n  }\n\n  return value;\n}\n\nexport default createRulesetFunction(\n  {\n    input: {\n      type: 'object',\n      properties: {\n        paths: {\n          type: 'object',\n        },\n        security: {\n          type: 'array',\n        },\n      },\n    },\n    options: {\n      type: 'object',\n      properties: {\n        schemesPath: {\n          type: 'array',\n          items: {\n            type: ['string', 'number'],\n          },\n        },\n      },\n    },\n  },\n  function oasOpSecurityDefined(targetVal, { schemesPath }) {\n    const { paths } = targetVal;\n\n    const results = [];\n\n    const schemes = _get(targetVal, schemesPath);\n    const allDefs = isObject(schemes) ? Object.keys(schemes) : [];\n\n    // Check global security requirements\n\n    const { security } = targetVal;\n\n    if (Array.isArray(security)) {\n      for (const [index, value] of security.entries()) {\n        if (!isObject(value)) {\n          continue;\n        }\n\n        const securityKeys = Object.keys(value);\n\n        for (const securityKey of securityKeys) {\n          if (!allDefs.includes(securityKey)) {\n            results.push({\n              message: `API \"security\" values must match a scheme defined in the \"${schemesPath.join('.')}\" object.`,\n              path: ['security', index, securityKey],\n            });\n          }\n        }\n      }\n    }\n\n    for (const { path, operation, value } of getAllOperations(paths)) {\n      if (!isObject(value)) continue;\n\n      const { security } = value;\n\n      if (!Array.isArray(security)) {\n        continue;\n      }\n\n      for (const [index, value] of security.entries()) {\n        if (!isObject(value)) {\n          continue;\n        }\n\n        const securityKeys = Object.keys(value);\n\n        for (const securityKey of securityKeys) {\n          if (!allDefs.includes(securityKey)) {\n            results.push({\n              message: `Operation \"security\" values must match a scheme defined in the \"${schemesPath.join(\n                '.',\n              )}\" object.`,\n              path: ['paths', path, operation, 'security', index, securityKey],\n            });\n          }\n        }\n      }\n    }\n\n    return results;\n  },\n);"
    },
    {
      "id": "WKmIcu_P4grh3a8qJn_7N",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oasExample",
      "content": "import { isPlainObject, pointerToPath } from '@stoplight/json';\nimport { createRulesetFunction } from '@stoplight/spectral-core';\nimport { oas2, oas3_1, extractDraftVersion, oas3_0 } from '@stoplight/spectral-formats';\nimport { schema as schemaFn } from '@stoplight/spectral-functions';\nimport traverse from 'json-schema-traverse';\n\nconst MEDIA_VALIDATION_ITEMS = {\n  2: [\n    {\n      field: 'examples',\n      multiple: true,\n      keyed: false,\n    },\n  ],\n  3: [\n    {\n      field: 'example',\n      multiple: false,\n      keyed: false,\n    },\n    {\n      field: 'examples',\n      multiple: true,\n      keyed: true,\n    },\n  ],\n};\n\nconst SCHEMA_VALIDATION_ITEMS = {\n  2: ['example', 'x-example', 'default'],\n  3: ['example', 'default'],\n};\n\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nfunction rewriteNullable(schema, errors) {\n  for (const error of errors) {\n    if (error.keyword !== 'type') continue;\n    const value = getSchemaProperty(schema, error.schemaPath);\n    if (isPlainObject(value) && value.nullable === true) {\n      error.message += ',null';\n    }\n  }\n}\n\nconst visitOAS2 = schema => {\n  if (schema['x-nullable'] === true) {\n    schema.nullable = true;\n    delete schema['x-nullable'];\n  }\n};\n\nfunction getSchemaProperty(schema, schemaPath) {\n  const path = pointerToPath(schemaPath);\n  let value = schema;\n\n  for (const fragment of path.slice(0, -1)) {\n    if (!isPlainObject(value)) {\n      return;\n    }\n\n    value = value[fragment];\n  }\n\n  return value;\n}\n\nconst oasSchema = createRulesetFunction(\n  {\n    input: null,\n    options: {\n      type: 'object',\n      properties: {\n        schema: {\n          type: 'object',\n        },\n      },\n      additionalProperties: false,\n    },\n  },\n  function oasSchema(targetVal, opts, context) {\n    const formats = context.document.formats;\n\n    let { schema } = opts;\n\n    let dialect = 'draft4';\n    let prepareResults;\n\n    if (!formats) {\n      dialect = 'auto';\n    } else if (formats.has(oas3_1)) {\n      if (isPlainObject(context.document.data) && typeof context.document.data.jsonSchemaDialect === 'string') {\n        dialect = extractDraftVersion(context.document.data.jsonSchemaDialect) ?? 'draft2020-12';\n      } else {\n        dialect = 'draft2020-12';\n      }\n    } else if (formats.has(oas3_0)) {\n      prepareResults = rewriteNullable.bind(null, schema);\n    } else if (formats.has(oas2)) {\n      const clonedSchema = JSON.parse(JSON.stringify(schema));\n      traverse(clonedSchema, visitOAS2);\n      schema = clonedSchema;\n      prepareResults = rewriteNullable.bind(null, clonedSchema);\n    }\n\n    return schemaFn(\n      targetVal,\n      {\n        ...opts,\n        schema,\n        prepareResults,\n        dialect,\n      },\n      context,\n    );\n  },\n);\n\nfunction* getMediaValidationItems(items, targetVal, givenPath, oasVersion) {\n  for (const { field, keyed, multiple } of items) {\n    if (!(field in targetVal)) {\n      continue;\n    }\n\n    const value = targetVal[field];\n\n    if (multiple) {\n      if (!isObject(value)) continue;\n\n      for (const exampleKey of Object.keys(value)) {\n        const exampleValue = value[exampleKey];\n        if (oasVersion === 3 && keyed && (!isObject(exampleValue) || 'externalValue' in exampleValue)) {\n          // should be covered by oas3-examples-value-or-externalValue\n          continue;\n        }\n\n        const targetPath = [...givenPath, field, exampleKey];\n\n        if (keyed) {\n          targetPath.push('value');\n        }\n\n        yield {\n          value: keyed && isObject(exampleValue) ? exampleValue.value : exampleValue,\n          path: targetPath,\n        };\n      }\n\n      return;\n    } else {\n      return yield {\n        value,\n        path: [...givenPath, field],\n      };\n    }\n  }\n}\n\nfunction* getSchemaValidationItems(fields, targetVal, givenPath) {\n  for (const field of fields) {\n    if (!(field in targetVal)) {\n      continue;\n    }\n\n    yield {\n      value: targetVal[field],\n      path: [...givenPath, field],\n    };\n  }\n}\n\nexport default createRulesetFunction(\n  {\n    input: {\n      type: 'object',\n    },\n    options: {\n      type: 'object',\n      properties: {\n        oasVersion: {\n          enum: ['2', '3'],\n        },\n        schemaField: {\n          type: 'string',\n        },\n        type: {\n          enum: ['media', 'schema'],\n        },\n      },\n      additionalProperties: false,\n    },\n  },\n  function oasExample(targetVal, opts, context) {\n    const formats = context.document.formats;\n    const schemaOpts = {\n      schema: opts.schemaField === '$' ? targetVal : targetVal[opts.schemaField],\n    };\n\n    let results = void 0;\n    let oasVersion = parseInt(opts.oasVersion);\n\n    const validationItems =\n      opts.type === 'schema'\n        ? getSchemaValidationItems(SCHEMA_VALIDATION_ITEMS[oasVersion], targetVal, context.path)\n        : getMediaValidationItems(MEDIA_VALIDATION_ITEMS[oasVersion], targetVal, context.path, oasVersion);\n\n    if (formats?.has(oas2) && 'required' in schemaOpts.schema && typeof schemaOpts.schema.required === 'boolean') {\n      schemaOpts.schema = { ...schemaOpts.schema };\n      delete schemaOpts.schema.required;\n    }\n\n    for (const validationItem of validationItems) {\n      const result = oasSchema(validationItem.value, schemaOpts, {\n        ...context,\n        path: validationItem.path,\n      });\n\n      if (Array.isArray(result)) {\n        if (results === void 0) results = [];\n        results.push(...result);\n      }\n    }\n\n    return results;\n  },\n);"
    },
    {
      "id": "-ckQlVdz5-ydvbH83rt-v",
      "extendedFrom": "cHJqOjEyMzU4Ng@29",
      "name": "oasSchema",
      "content": "import traverse from 'json-schema-traverse';\nimport { schema as schemaFn } from '@stoplight/spectral-functions';\nimport { createRulesetFunction } from '@stoplight/spectral-core';\nimport { oas2, oas3_1, extractDraftVersion, oas3_0 } from '@stoplight/spectral-formats';\nimport { isPlainObject, pointerToPath } from '@stoplight/json';\n\nfunction rewriteNullable(schema, errors) {\n  for (const error of errors) {\n    if (error.keyword !== 'type') continue;\n    const value = getSchemaProperty(schema, error.schemaPath);\n    if (isPlainObject(value) && value.nullable === true) {\n      error.message += ',null';\n    }\n  }\n}\n\nexport default createRulesetFunction(\n  {\n    input: null,\n    options: {\n      type: 'object',\n      properties: {\n        schema: {\n          type: 'object',\n        },\n      },\n      additionalProperties: false,\n    },\n  },\n  function oasSchema(targetVal, opts, context) {\n    const formats = context.document.formats;\n\n    let { schema } = opts;\n\n    let dialect = 'draft4';\n    let prepareResults;\n\n    if (!formats) {\n      dialect = 'auto';\n    } else if (formats.has(oas3_1)) {\n      if (isPlainObject(context.document.data) && typeof context.document.data.jsonSchemaDialect === 'string') {\n        dialect = extractDraftVersion(context.document.data.jsonSchemaDialect) ?? 'draft2020-12';\n      } else {\n        dialect = 'draft2020-12';\n      }\n    } else if (formats.has(oas3_0)) {\n      prepareResults = rewriteNullable.bind(null, schema);\n    } else if (formats.has(oas2)) {\n      const clonedSchema = JSON.parse(JSON.stringify(schema));\n      traverse(clonedSchema, visitOAS2);\n      schema = clonedSchema;\n      prepareResults = rewriteNullable.bind(null, clonedSchema);\n    }\n\n    return schemaFn(\n      targetVal,\n      {\n        ...opts,\n        schema,\n        prepareResults,\n        dialect,\n      },\n      context,\n    );\n  },\n);\n\nconst visitOAS2 = schema => {\n  if (schema['x-nullable'] === true) {\n    schema.nullable = true;\n    delete schema['x-nullable'];\n  }\n};\n\nfunction getSchemaProperty(schema, schemaPath) {\n  const path = pointerToPath(schemaPath);\n  let value = schema;\n\n  for (const fragment of path.slice(0, -1)) {\n    if (!isPlainObject(value)) {\n      return;\n    }\n\n    value = value[fragment];\n  }\n\n  return value;\n}"
    }
  ],
  "library": {
    "cHJqOjEyMzU4Ng@29": {
      "description": "This is Stoplight's built-in style guide, containing style and validation rules for OAS (OpenAPI Specification).\n\n> This Style Guide is applied to all new projects by default.",
      "formats": [
        "oas2",
        "oas3",
        "oas3.0",
        "oas3.1"
      ],
      "aliases": {
        "API_Document": {
          "description": "The complete API specification document. This can be used to target any part of the OpenAPI document using **field**.\n\n*Use this if you don't find specific targets that cater to your usecase.* ",
          "name": "API_Document",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$"
            }
          ]
        },
        "API_Description": {
          "description": "The top level description in an API document",
          "name": "API_Description",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$.info.description"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$.info.description"
            }
          ]
        },
        "Operation_Object": {
          "description": "The complete operation object. Use it in combo with field object.",
          "name": "Operation_Object",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "#Path_Item[get,put,post,delete,options,head,patch,trace]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "#Path_Item[get,put,post,delete,options,head,patch,trace]"
            }
          ]
        },
        "Operation_Responses": {
          "description": "Responses for all operations including get, put, post, delete, options, head, patch, trace.",
          "name": "Operation_Responses",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "#Operation_Object.responses"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "#Operation_Object.responses"
            }
          ]
        },
        "Path_Item": {
          "name": "Path_Item",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$.paths[*]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$.paths[*]"
            }
          ]
        },
        "API_Contact": {
          "description": "The top level description in an API document",
          "name": "API_Contact",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$.info.contact"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$.info.contact"
            }
          ]
        },
        "API_License": {
          "description": "The top level description in an API document",
          "name": "API_License",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$.info.license"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$.info.license"
            }
          ]
        },
        "All_Markdown": {
          "description": "All markdown descriptions across the document.",
          "name": "All_Markdown",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$..[description,title]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$..[description,title]"
            }
          ]
        },
        "API_Tags": {
          "description": "Tags on an API object",
          "name": "API_Tags",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$.tags"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$.tags"
            }
          ]
        },
        "API_Server": {
          "description": "API hosts defined in the API specification",
          "name": "API_Server",
          "targets": [
            {
              "formats": [
                "oas3"
              ],
              "given": "$.servers"
            },
            {
              "formats": [
                "oas2"
              ],
              "given": "$.host"
            }
          ]
        },
        "Response_All_Object": {
          "description": "All responses (object) in an API",
          "name": "Response_All_Object",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$.responses"
            },
            {
              "formats": [
                "oas2"
              ],
              "given": "#Operation_Responses"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$.components.responses"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "#Operation_Responses"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$..responses"
            },
            {
              "formats": [
                "oas2"
              ],
              "given": "$..responses"
            }
          ]
        },
        "API_Server_URL": {
          "description": "API host urls defined in the API specification",
          "name": "API_Server_URL",
          "targets": [
            {
              "formats": [
                "oas3"
              ],
              "given": "$.servers[*].url"
            },
            {
              "formats": [
                "oas2"
              ],
              "given": "$.host"
            }
          ]
        },
        "All_Ref": {
          "description": "All references throughout the API",
          "name": "All_Ref",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$..[?(@property === '$ref')]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$..[?(@property === '$ref')]"
            }
          ]
        },
        "All_Enum": {
          "description": "All references throughout the API",
          "name": "All_Enum",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$..[?(@ && @.enum && @.type)]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$..[?(@ && @.enum && @.type)]"
            }
          ]
        },
        "Request_Parameter_All": {
          "description": "All request parameters",
          "name": "Request_Parameter_All",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$..parameters[*]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$..parameters[*]"
            }
          ]
        },
        "Request_Parameter_Query": {
          "description": "All request query parameters",
          "name": "Request_Parameter_Query",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$..parameters[?(@.in==\"query\")]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$..parameters[?(@.in==\"query\")]"
            }
          ]
        },
        "Request_Parameter_Header": {
          "description": "All request header parameters",
          "name": "Request_Parameter_Header",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$..parameters[?(@.in==\"header\")]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$..parameters[?(@.in==\"header\")]"
            }
          ]
        },
        "Request_Parameter_Cookie": {
          "description": "All request cookie parameters",
          "name": "Request_Parameter_Cookie",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$..parameters[?(@.in==\"cookie\")]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$..parameters[?(@.in==\"cookie\")]"
            }
          ]
        },
        "Request_Parameter_Path": {
          "description": "All request path parameters",
          "name": "Request_Parameter_Path",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$..parameters[?(@.in==\"path\")]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$..parameters[?(@.in==\"path\")]"
            }
          ]
        },
        "Path_Object": {
          "description": "Path object. Usually used to target the Path key e.g. `/users/{userId}`",
          "name": "Path_Object",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$.paths"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$.paths"
            }
          ]
        },
        "All_Example_Schema": {
          "description": "All examples for schemas",
          "name": "All_Example_Schema",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$..definitions..[?(@property !== 'properties' && @ && (@.example !== void 0 || @['x-example'] !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
            },
            {
              "formats": [
                "oas2"
              ],
              "given": "$..parameters..[?(@property !== 'properties' && @ && (@.example !== void 0 || @['x-example'] !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
            },
            {
              "formats": [
                "oas2"
              ],
              "given": "$..responses..[?(@property !== 'properties' && @ && (@.example !== void 0 || @['x-example'] !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$.components.schemas..[?(@property !== 'properties' && @ && (@ && @.example !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$..content..[?(@property !== 'properties' && @ && (@ && @.example !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$..headers..[?(@property !== 'properties' && @ && (@ && @.example !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$..parameters..[?(@property !== 'properties' && @ && (@ && @.example !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
            }
          ]
        },
        "API_Document_RecursiveSearch": {
          "description": "The complete API specification document. This can be used to target any part of the OpenAPI document using **field**.\n\n*Use this if you don't find specific targets that cater to your usecase.* ",
          "name": "API_Document_RecursiveSearch",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$.."
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$.."
            }
          ]
        },
        "All_Example": {
          "description": "All examples across the API document",
          "name": "All_Example",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$..examples[*]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$.components.examples[*]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$.paths[*][*]..content[*].examples[*]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$.paths[*][*]..parameters[*].examples[*]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$.components.parameters[*].examples[*]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$.paths[*][*]..headers[*].examples[*]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$.components.headers[*].examples[*]"
            }
          ]
        },
        "All_Example_Media": {
          "description": "All examples for schemas",
          "name": "All_Example_Media",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$..responses..[?(@ && @.schema && @.examples)]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$..content..[?(@ && @.schema && (@.example !== void 0 || @.examples))]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$..headers..[?(@ && @.schema && (@.example !== void 0 || @.examples))]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$..parameters..[?(@ && @.schema && (@.example !== void 0 || @.examples))]"
            }
          ]
        },
        "API_Tags_Item": {
          "description": "Tags on an API object",
          "name": "API_Tags_Item",
          "targets": [
            {
              "formats": [
                "oas2"
              ],
              "given": "$.tags[*]"
            },
            {
              "formats": [
                "oas3"
              ],
              "given": "$.tags[*]"
            }
          ]
        }
      },
      "rules": {
        "contact-url": {
          "given": [
            "#API_Contact"
          ],
          "severity": "warn",
          "then": {
            "function": "truthy",
            "field": "url"
          },
          "name": "contact-url",
          "description": "Contact object should have \"url\"",
          "message": "Contact object should have \"url\""
        },
        "contact-email": {
          "given": [
            "#API_Contact"
          ],
          "severity": "warn",
          "then": {
            "function": "truthy",
            "field": "email"
          },
          "name": "contact-email",
          "description": "Contact object should have \"email\"",
          "message": "Contact object should have \"email\""
        },
        "info-contact": {
          "given": [
            "#API_Document"
          ],
          "severity": "warn",
          "then": {
            "function": "truthy",
            "field": "info.contact"
          },
          "name": "info-contact",
          "description": "Info object should have \"contact\" object.",
          "message": "Info object should have \"contact\" object."
        },
        "info-description": {
          "given": [
            "#API_Document"
          ],
          "severity": "warn",
          "then": {
            "function": "truthy",
            "field": "info.description"
          },
          "name": "info-description",
          "description": "Info object should have \"description\" object.",
          "message": "Info object should have \"description\" object."
        },
        "info-license": {
          "given": [
            "#API_Document"
          ],
          "severity": "warn",
          "then": {
            "function": "truthy",
            "field": "info.license"
          },
          "name": "info-license",
          "description": "Info object should have \"license\" object.",
          "message": "Info object should have \"license\" object."
        },
        "license-url": {
          "given": [
            "#API_License"
          ],
          "severity": "warn",
          "then": {
            "function": "truthy",
            "field": "url"
          },
          "name": "license-url",
          "description": "License object should include \"url\".",
          "message": "License object should include \"url\"."
        },
        "no-eval-in-markdown": {
          "given": [
            "#All_Markdown"
          ],
          "severity": "warn",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "notMatch": "eval\\("
            }
          },
          "name": "no-eval-in-markdown",
          "description": "Markdown descriptions must not have \"eval(\".",
          "message": "Markdown descriptions must not have \"eval(\"."
        },
        "no-script-tags-in-markdown": {
          "given": [
            "#All_Markdown"
          ],
          "severity": "warn",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "notMatch": "<script"
            }
          },
          "name": "no-script-tags-in-markdown",
          "description": "Markdown descriptions must not have \"eval(\".",
          "message": "Markdown descriptions must not have \"<script>\" tags."
        },
        "openapi-tags-alphabetical": {
          "given": [
            "#API_Tags"
          ],
          "severity": "warn",
          "then": {
            "function": "alphabetical",
            "functionOptions": {
              "keyedBy": "name"
            }
          },
          "name": "openapi-tags-alphabetical",
          "description": "OpenAPI object should have alphabetical \"tags\".",
          "message": "OpenAPI object should have alphabetical \"tags\"."
        },
        "openapi-tags": {
          "given": [
            "#API_Tags"
          ],
          "severity": "warn",
          "then": {
            "function": "schema",
            "functionOptions": {
              "schema": {
                "type": "array",
                "minItems": 1
              }
            }
          },
          "name": "openapi-tags",
          "description": "OpenAPI object should have non-empty \"tags\" array.",
          "message": "OpenAPI object should have non-empty \"tags\" array."
        },
        "operation-description": {
          "given": [
            "#Operation_Object"
          ],
          "severity": "warn",
          "then": {
            "function": "truthy",
            "field": "description"
          },
          "name": "operation-description",
          "description": "Operation \"description\" should be present and non-empty string.",
          "message": "Operation \"description\" should be present and non-empty string."
        },
        "operation-operationId": {
          "given": [
            "#Operation_Object"
          ],
          "severity": "warn",
          "then": {
            "function": "truthy",
            "field": "operationId"
          },
          "name": "operation-operationId",
          "description": "Operation should have \"operationId\".",
          "message": "Operation should have \"operationId\"."
        },
        "operation-operationId-valid-in-url": {
          "given": [
            "#Operation_Object"
          ],
          "severity": "error",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "match": "^[A-Za-z0-9-._~:/?#\\[\\]@!\\$&'()*+,;=]*$"
            },
            "field": "operationId"
          },
          "name": "operation-operationId-valid-in-url",
          "description": "operationId must not characters that are invalid when used in URL.",
          "message": "OperationId should not have characters that are invalid when used in URL."
        },
        "operation-singular-tag": {
          "given": [
            "#API_Tags"
          ],
          "severity": "off",
          "then": {
            "function": "length",
            "functionOptions": {
              "max": 1
            }
          },
          "name": "operation-singular-tag",
          "description": "Operation should not have more than a single tag.",
          "message": "Operation should not have more than a single tag."
        },
        "operation-tags": {
          "given": [
            "#Operation_Object"
          ],
          "severity": "warn",
          "then": {
            "function": "length",
            "functionOptions": {
              "max": 999,
              "min": 1
            },
            "field": "tags"
          },
          "name": "operation-tags",
          "description": "Operation should have non-empty \"tags\" array.",
          "message": "Operation should have non-empty \"tags\" array."
        },
        "path-declarations-must-exist": {
          "given": [
            "#Path_Item"
          ],
          "severity": "error",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "notMatch": "{}"
            },
            "field": "@key"
          },
          "name": "path-declarations-must-exist",
          "description": "Path parameter declarations must not be empty, ex.`/given/{}` is invalid.",
          "message": "Path parameter declarations must not be empty, ex.\"/given/{}\" is invalid."
        },
        "contact-name": {
          "given": [
            "#API_Contact"
          ],
          "severity": "warn",
          "then": {
            "function": "truthy",
            "field": "name"
          },
          "name": "contact-name",
          "description": "Contact object should have \"name\"",
          "message": "Contact object should have \"name\""
        },
        "path-keys-no-trailing-slash": {
          "given": [
            "#Path_Object"
          ],
          "severity": "warn",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "notMatch": ".+\\/$"
            },
            "field": "@key"
          },
          "name": "path-keys-no-trailing-slash",
          "description": "Path should not end with slash.",
          "message": "Path should not end with slash."
        },
        "path-not-include-query": {
          "given": [
            "#Path_Object"
          ],
          "severity": "warn",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "notMatch": "\\?"
            },
            "field": "@key"
          },
          "name": "path-not-include-query",
          "description": "Path should not include query string.",
          "message": "Path should not include query string."
        },
        "tag-description": {
          "given": [
            "#API_Tags_Item"
          ],
          "severity": "warn",
          "then": {
            "function": "truthy",
            "field": "description"
          },
          "name": "tag-description",
          "description": "Tag object should have `description`.",
          "message": "Tag object should have \"description\"."
        },
        "api-servers": {
          "given": [
            "#API_Server"
          ],
          "severity": "warn",
          "then": {
            "function": "schema",
            "functionOptions": {
              "schema": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "object"
                }
              },
              "dialect": "draft7"
            }
          },
          "name": "api-servers",
          "description": "OpenAPI document should have a server defined. \n\nThis can be localhost, a development or production server. \n\n**OpenAPI V3 example**\n\n```json\n{\n  \"servers\": [\n    {\n      \"url\": \"https://staging.myprodserver.com/v1\",\n      \"description\": \"Staging server\"\n    },\n    {\n      \"url\": \"https://myprodserver.com/v1\",\n      \"description\": \"Production server\"\n    }\n  ]\n}\n```\n\n**OpenAPI V2 example**\n\n```json\n{\n  \"host\": \"myprodserver.com\",\n  \"basePath\": \"/v2\",\n  \"schemes\": [\n    \"https\"\n  ]\n}\n```\n\n",
          "message": "Server should be present."
        },
        "server-trailing-slash": {
          "given": [
            "#API_Server_URL"
          ],
          "severity": "warn",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "notMatch": "/$"
            }
          },
          "name": "server-trailing-slash",
          "description": "Server URL should not have trailing slash.",
          "message": "Server URL should not have trailing slash"
        },
        "operation-success-response": {
          "given": [
            "#Operation_Object"
          ],
          "severity": "warn",
          "then": {
            "function": "oasOpSuccessResponse",
            "field": "responses"
          },
          "name": "operation-success-response",
          "description": "Operation should have at least one \"2xx\" or \"3xx\" response.",
          "message": "Operation should have at least one \"2xx\" or \"3xx\" response."
        },
        "path-params": {
          "given": [
            "#API_Document"
          ],
          "severity": "error",
          "then": {
            "function": "oasPathParam"
          },
          "name": "path-params",
          "description": "Path parameters must be defined and valid.",
          "message": "{{error}}"
        },
        "operation-parameters": {
          "given": [
            "#Operation_Object"
          ],
          "severity": "warn",
          "then": {
            "function": "oasOpParams",
            "field": "parameters"
          },
          "name": "operation-parameters",
          "description": "Operation parameters are unique and non-repeating.",
          "message": "Operation parameters are unique and non-repeating."
        },
        "typed-enum": {
          "given": [
            "#All_Enum"
          ],
          "severity": "warn",
          "then": {
            "function": "typedEnum"
          },
          "name": "typed-enum",
          "description": "Enum values should respect the specified type.",
          "message": "{{error}}"
        },
        "oas2-schema": {
          "given": [
            "#API_Document"
          ],
          "severity": "error",
          "then": {
            "function": "oasDocumentSchema"
          },
          "name": "oas2-schema",
          "description": "Validate structure of OpenAPI v2 specification.",
          "message": "{{error}}",
          "formats": [
            "oas2"
          ]
        },
        "oas3-schema": {
          "given": [
            "#API_Document"
          ],
          "severity": "error",
          "then": {
            "function": "oasDocumentSchema"
          },
          "name": "oas3-schema",
          "description": "Validate structure of OpenAPI v3 specification.",
          "message": "{{error}}",
          "formats": [
            "oas3"
          ]
        },
        "oas3-unused-component": {
          "given": [
            "#API_Document"
          ],
          "severity": "warn",
          "then": {
            "function": "oasUnusedComponent"
          },
          "name": "oas3-unused-component",
          "description": "Validate structure of OpenAPI v3 specification.",
          "message": "{{error}}",
          "formats": [
            "oas3"
          ]
        },
        "operation-operationId-unique": {
          "given": [
            "#API_Document"
          ],
          "severity": "error",
          "then": {
            "function": "oasOpIdUnique"
          },
          "name": "operation-operationId-unique",
          "description": "Every operation must have unique operationId.",
          "message": "Every operation must have unique operationId"
        },
        "oas2-operation-formData-consume-check": {
          "given": [
            "#Operation_Object"
          ],
          "severity": "error",
          "then": {
            "function": "oasOpFormDataConsumeCheck"
          },
          "name": "oas2-operation-formData-consume-check",
          "description": "Operations with \"in: formData\" parameter must include \"application/x-www-form-urlencoded\" or \"multipart/form-data\" in their \"consumes\" property.",
          "message": "Operations with \"in: formData\" parameter must include \"application/x-www-form-urlencoded\" or \"multipart/form-data\" in their \"consumes\" property.",
          "formats": [
            "oas2"
          ]
        },
        "operation-tag-defined": {
          "given": [
            "#API_Document"
          ],
          "severity": "warn",
          "then": {
            "function": "oasTagDefined"
          },
          "name": "operation-tag-defined",
          "description": "Operation tags must be defined in global tags.",
          "message": "Operation tags must be defined in global tags"
        },
        "no-$ref-siblings": {
          "given": [
            "#All_Ref"
          ],
          "severity": "error",
          "then": {
            "function": "refSiblings"
          },
          "name": "no-$ref-siblings",
          "description": "Property must not be placed among $ref",
          "message": "{{error}}",
          "formats": [
            "oas3.0",
            "oas2"
          ]
        },
        "oas2-operation-security-defined": {
          "given": [
            "#API_Document"
          ],
          "severity": "warn",
          "then": {
            "function": "oasOpSecurityDefined",
            "functionOptions": {
              "schemesPath": [
                "securityDefinitions"
              ]
            }
          },
          "name": "oas2-operation-security-defined",
          "description": "Operation \"security\" values must match a scheme defined in the \"securityDefinitions\" object.",
          "message": "{{error}}",
          "formats": [
            "oas2"
          ]
        },
        "oas3-operation-security-defined": {
          "given": [
            "#API_Document"
          ],
          "severity": "warn",
          "then": {
            "function": "oasOpSecurityDefined",
            "functionOptions": {
              "schemesPath": [
                "components",
                "securitySchemes"
              ]
            }
          },
          "name": "oas3-operation-security-defined",
          "description": "Operation `security` values must match a scheme defined in the `components.securitySchemes` object.",
          "message": "{{error}}",
          "formats": [
            "oas3"
          ]
        },
        "duplicated-entry-in-enum": {
          "given": [
            "#All_Enum"
          ],
          "severity": "warn",
          "then": {
            "function": "oasSchema",
            "functionOptions": {
              "schema": {
                "type": "array",
                "uniqueItems": true
              }
            },
            "field": "enum"
          },
          "name": "duplicated-entry-in-enum",
          "description": "Enum values should not have duplicate entry.",
          "message": "{{error}}"
        },
        "oas2-api-schemes": {
          "given": [
            "#API_Document"
          ],
          "severity": "error",
          "then": {
            "function": "schema",
            "functionOptions": {
              "schema": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "string"
                }
              },
              "dialect": "draft7"
            },
            "field": "schemes"
          },
          "name": "oas2-api-schemes",
          "description": "OpenAPI host \"schemes\" must be present and non-empty array.",
          "message": "OpenAPI host \"schemes\" must be present and non-empty array.",
          "formats": [
            "oas2"
          ]
        },
        "oas2-discriminator": {
          "given": [
            "#API_Document"
          ],
          "severity": "error",
          "then": {
            "function": "oasDiscriminator",
            "field": "definitions[?(@.discriminator)]"
          },
          "name": "oas2-discriminator",
          "description": "Discriminator property must be defined and required",
          "message": "Discriminator property must be defined and required",
          "formats": [
            "oas2"
          ]
        },
        "server-not-example": {
          "given": [
            "#API_Server_URL"
          ],
          "severity": "warn",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "notMatch": "example.com"
            }
          },
          "name": "server-not-example",
          "message": "Server URL must not point at example.com."
        },
        "parameter-description": {
          "given": [
            "#Request_Parameter_All"
          ],
          "severity": "warn",
          "then": {
            "function": "truthy",
            "field": "description"
          },
          "name": "parameter-description",
          "message": "Parameter objects must have \"description\"."
        },
        "oas2-anyOf": {
          "given": [
            "#API_Document_RecursiveSearch"
          ],
          "severity": "warn",
          "then": {
            "function": "undefined",
            "field": "anyOf"
          },
          "name": "oas2-anyOf",
          "description": "anyOf is not available in OpenAPI v2, it was added in OpenAPI v3",
          "message": "anyOf is not available in OpenAPI v2, it was added in OpenAPI v3",
          "formats": [
            "oas2"
          ]
        },
        "oas2-oneOf": {
          "given": [
            "#API_Document_RecursiveSearch"
          ],
          "severity": "warn",
          "then": {
            "function": "undefined",
            "field": "oneOf"
          },
          "name": "oas2-oneOf",
          "description": "anyOf is not available in OpenAPI v2, it was added in OpenAPI v3",
          "message": "oneOf is not available in OpenAPI v2, it was added in OpenAPI v3",
          "formats": [
            "oas2"
          ]
        },
        "oas3-examples-value-or-externalValue": {
          "given": [
            "#All_Example"
          ],
          "severity": "warn",
          "then": {
            "function": "xor",
            "functionOptions": {
              "properties": [
                "externalValue",
                "value"
              ]
            }
          },
          "name": "oas3-examples-value-or-externalValue",
          "description": "Examples must have either \"value\" or \"externalValue\" field.",
          "message": "Examples must have either \"value\" or \"externalValue\" field.",
          "formats": [
            "oas3"
          ]
        },
        "oas2-valid-schema-example": {
          "given": [
            "#All_Example_Schema"
          ],
          "severity": "error",
          "then": {
            "function": "oasExample",
            "functionOptions": {
              "oasVersion": "2",
              "schemaField": "$",
              "type": "schema"
            }
          },
          "name": "oas2-valid-schema-example",
          "description": "Examples must be valid against their defined schema.",
          "message": "{{error}}",
          "formats": [
            "oas2"
          ]
        },
        "oas3-valid-schema-example": {
          "given": [
            "#All_Example_Schema"
          ],
          "severity": "error",
          "then": {
            "function": "oasExample",
            "functionOptions": {
              "oasVersion": "3",
              "schemaField": "$",
              "type": "schema"
            }
          },
          "name": "oas3-valid-schema-example",
          "description": "Examples must be valid against their defined schema.",
          "message": "{{error}}",
          "formats": [
            "oas3"
          ]
        },
        "oas2-valid-media-example": {
          "given": [
            "#All_Example_Media"
          ],
          "severity": "error",
          "then": {
            "function": "oasExample",
            "functionOptions": {
              "oasVersion": "2",
              "schemaField": "schema",
              "type": "media"
            }
          },
          "name": "oas2-valid-media-example",
          "description": "Examples must be valid against their defined schema.",
          "message": "{{error}}",
          "formats": [
            "oas2"
          ]
        },
        "oas3-valid-media-example": {
          "given": [
            "#All_Example_Media"
          ],
          "severity": "error",
          "then": {
            "function": "oasExample",
            "functionOptions": {
              "oasVersion": "3",
              "schemaField": "schema",
              "type": "media"
            }
          },
          "name": "oas3-valid-media-example",
          "description": "Examples must be valid against their defined schema.",
          "message": "{{error}}",
          "formats": [
            "oas3"
          ]
        }
      },
      "x-embeddedFunctions": [
        {
          "id": "fdn2_djKgbPunrNtlfvWS",
          "extendedFrom": "",
          "name": "oasOpSuccessResponse",
          "content": "import { createRulesetFunction } from '@stoplight/spectral-core';\nimport { oas3 } from '@stoplight/spectral-formats';\n\nexport const oasOpSuccessResponse = createRulesetFunction(\n  {\n    input: {\n      type: 'object',\n    },\n    options: null,\n  },\n  (input, opts, context) => {\n    const isOAS3X = context.document.formats?.has(oas3) === true;\n\n    for (const response of Object.keys(input)) {\n      if (isOAS3X && (response === '2XX' || response === '3XX')) {\n        return;\n      }\n\n      if (Number(response) >= 200 && Number(response) < 400) {\n        return;\n      }\n    }\n\n    return [\n      {\n        message: 'Operation must define at least a single 2xx or 3xx response',\n      },\n    ];\n  },\n);\n\nexport default oasOpSuccessResponse;"
        },
        {
          "id": "jCgz0WuNn9w6viZiAkAqU",
          "extendedFrom": "",
          "name": "oasPathParam",
          "content": "function isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nconst pathRegex = /(\\{;?\\??[a-zA-Z0-9_-]+\\*?\\})/g;\n\nconst isNamedPathParam = p => {\n  return p.in !== void 0 && p.in === 'path' && p.name !== void 0;\n};\n\nconst isUnknownNamedPathParam = (p, path, results, seen) => {\n  if (!isNamedPathParam(p)) {\n    return false;\n  }\n\n  if (p.required !== true) {\n    results.push(generateResult(requiredMessage(p.name), path));\n  }\n\n  if (p.name in seen) {\n    results.push(generateResult(uniqueDefinitionMessage(p.name), path));\n    return false;\n  }\n\n  return true;\n};\n\nconst ensureAllDefinedPathParamsAreUsedInPath = (path, params, expected, results) => {\n  for (const p of Object.keys(params)) {\n    if (!params[p]) {\n      continue;\n    }\n\n    if (!expected.includes(p)) {\n      const resPath = params[p];\n      results.push(generateResult(`Parameter \"${p}\" must be used in path \"${path}\".`, resPath));\n    }\n  }\n};\n\nconst ensureAllExpectedParamsInPathAreDefined = (path, params, expected, operationPath, results) => {\n  for (const p of expected) {\n    if (!(p in params)) {\n      results.push(\n        generateResult(`Operation must define parameter \"{${p}}\" as expected by path \"${path}\".`, operationPath),\n      );\n    }\n  }\n};\n\nexport const oasPathParam = targetVal => {\n  /**\n   * This rule verifies:\n   *\n   * 1. for every param referenced in the path string ie /users/{userId}, var must be defined in either\n   *    path.parameters, or operation.parameters object\n   * 2. every path.parameters + operation.parameters property must be used in the path string\n   */\n\n  if (!isObject(targetVal) || !isObject(targetVal.paths)) {\n    return;\n  }\n\n  const results = [];\n\n  // keep track of normalized paths for verifying paths are unique\n  const uniquePaths = {};\n  const validOperationKeys = ['get', 'head', 'post', 'put', 'patch', 'delete', 'options', 'trace'];\n\n  for (const path of Object.keys(targetVal.paths)) {\n    const pathValue = targetVal.paths[path];\n    if (!isObject(pathValue)) continue;\n\n    // verify normalized paths are functionally unique (ie `/path/{one}` vs `/path/{two}` are\n    // different but equivalent within the context of OAS)\n    const normalized = path.replace(pathRegex, '%'); // '%' is used here since its invalid in paths\n    if (normalized in uniquePaths) {\n      results.push(\n        generateResult(`Paths \"${String(uniquePaths[normalized])}\" and \"${path}\" must not be equivalent.`, [\n          'paths',\n          path,\n        ]),\n      );\n    } else {\n      uniquePaths[normalized] = path;\n    }\n\n    // find all templated path parameters\n    const pathElements = [];\n    let match;\n\n    while ((match = pathRegex.exec(path))) {\n      const p = match[0].replace(/[{}?*;]/g, '');\n      if (pathElements.includes(p)) {\n        results.push(generateResult(`Path \"${path}\" must not use parameter \"{${p}}\" multiple times.`, ['paths', path]));\n      } else {\n        pathElements.push(p);\n      }\n    }\n\n    // find parameters set within the top-level 'parameters' object\n    const topParams = {};\n    if (Array.isArray(pathValue.parameters)) {\n      for (const [i, value] of pathValue.parameters.entries()) {\n        if (!isObject(value)) continue;\n\n        const fullParameterPath = ['paths', path, 'parameters', i];\n\n        if (isUnknownNamedPathParam(value, fullParameterPath, results, topParams)) {\n          topParams[value.name] = fullParameterPath;\n        }\n      }\n    }\n\n    if (isObject(targetVal.paths[path])) {\n      // find parameters set within the operation's 'parameters' object\n      for (const op of Object.keys(pathValue)) {\n        const operationValue = pathValue[op];\n        if (!isObject(operationValue)) continue;\n\n        if (op === 'parameters' || !validOperationKeys.includes(op)) {\n          continue;\n        }\n\n        const operationParams = {};\n        const { parameters } = operationValue;\n        const operationPath = ['paths', path, op];\n\n        if (Array.isArray(parameters)) {\n          for (const [i, p] of parameters.entries()) {\n            if (!isObject(p)) continue;\n\n            const fullParameterPath = [...operationPath, 'parameters', i];\n\n            if (isUnknownNamedPathParam(p, fullParameterPath, results, operationParams)) {\n              operationParams[p.name] = fullParameterPath;\n            }\n          }\n        }\n\n        const definedParams = { ...topParams, ...operationParams };\n        ensureAllDefinedPathParamsAreUsedInPath(path, definedParams, pathElements, results);\n        ensureAllExpectedParamsInPathAreDefined(path, definedParams, pathElements, operationPath, results);\n      }\n    }\n  }\n\n  return results;\n};\n\nfunction generateResult(message, path) {\n  return {\n    message,\n    path,\n  };\n}\n\nconst requiredMessage = name => `Path parameter \"${name}\" must have \"required\" property that is set to \"true\".`;\n\nconst uniqueDefinitionMessage = name => `Path parameter \"${name}\" must not be defined multiple times.`;\n\nexport default oasPathParam;"
        },
        {
          "id": "vTSkcieDnG1HqSoSLNer6",
          "extendedFrom": "",
          "name": "oasOpParams",
          "content": "function isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nfunction computeFingerprint(param) {\n  return `${String(param.in)}-${String(param.name)}`;\n}\n\nexport const oasOpParams = (params, _opts, { path }) => {\n  /**\n   * This function verifies:\n   *\n   * 1. Operations must have unique `name` + `in` parameters.\n   * 2. Operation cannot have both `in:body` and `in:formData` parameters\n   * 3. Operation must have only one `in:body` parameter.\n   */\n\n  if (!Array.isArray(params)) return;\n\n  if (params.length < 2) return;\n\n  const results = [];\n\n  const count = {\n    body: [],\n    formData: [],\n  };\n  const list = [];\n  const duplicates = [];\n\n  let index = -1;\n\n  for (const param of params) {\n    index++;\n\n    if (!isObject(param)) continue;\n\n    // skip params that are refs\n    if ('$ref' in param) continue;\n\n    // Operations must have unique `name` + `in` parameters.\n    const fingerprint = computeFingerprint(param);\n    if (list.includes(fingerprint)) {\n      duplicates.push(index);\n    } else {\n      list.push(fingerprint);\n    }\n\n    if (typeof param.in === 'string' && param.in in count) {\n      count[param.in].push(index);\n    }\n  }\n\n  if (duplicates.length > 0) {\n    for (const i of duplicates) {\n      results.push({\n        message: 'A parameter in this operation already exposes the same combination of \"name\" and \"in\" values.',\n        path: [...path, i],\n      });\n    }\n  }\n\n  if (count.body.length > 0 && count.formData.length > 0) {\n    results.push({\n      message: 'Operation must not have both \"in:body\" and \"in:formData\" parameters.',\n    });\n  }\n\n  if (count.body.length > 1) {\n    for (let i = 1; i < count.body.length; i++) {\n      results.push({\n        message: 'Operation must not have more than a single instance of the \"in:body\" parameter.',\n        path: [...path, count.body[i]],\n      });\n    }\n  }\n\n  return results;\n};\n\nexport default oasOpParams;"
        },
        {
          "id": "gxM_pSpIKW2jYTI_JZWpx",
          "extendedFrom": "",
          "name": "refSiblings",
          "content": "function isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nfunction getParentValue(document, path) {\n  if (path.length === 0) {\n    return null;\n  }\n\n  let piece = document;\n\n  for (let i = 0; i < path.length - 1; i += 1) {\n    if (!isObject(piece)) {\n      return null;\n    }\n\n    piece = piece[path[i]];\n  }\n\n  return piece;\n}\n\nconst refSiblings = (targetVal, opts, { document, path }) => {\n  const value = getParentValue(document.data, path);\n\n  if (!isObject(value)) {\n    return;\n  }\n\n  const keys = Object.keys(value);\n  if (keys.length === 1) {\n    return;\n  }\n\n  const results = [];\n  const actualObjPath = path.slice(0, -1);\n\n  for (const key of keys) {\n    if (key === '$ref') {\n      continue;\n    }\n    results.push({\n      message: '$ref must not be placed next to any other properties',\n      path: [...actualObjPath, key],\n    });\n  }\n\n  return results;\n};\n\nexport default refSiblings;"
        },
        {
          "id": "sPMlyWXd2vlpWSXrsIwPI",
          "extendedFrom": "",
          "name": "typedEnum",
          "content": "import { oas2, oas3_0 } from '@stoplight/spectral-formats';\nimport { printValue } from '@stoplight/spectral-runtime';\nimport { createRulesetFunction } from '@stoplight/spectral-core';\n\nfunction getDataType(input, checkForInteger) {\n  const type = typeof input;\n  switch (type) {\n    case 'string':\n    case 'boolean':\n      return type;\n    case 'number':\n      if (checkForInteger && Number.isInteger(input)) {\n        return 'integer';\n      }\n\n      return 'number';\n    case 'object':\n      if (input === null) {\n        return 'null';\n      }\n\n      return Array.isArray(input) ? 'array' : 'object';\n    default:\n      throw TypeError('Unknown input type');\n  }\n}\n\nfunction getTypes(input, formats) {\n  const { type } = input;\n\n  if (\n    (input.nullable === true && formats?.has(oas3_0) === true) ||\n    (input['x-nullable'] === true && formats?.has(oas2) === true)\n  ) {\n    return Array.isArray(type) ? [...type, 'null'] : [type, 'null'];\n  }\n\n  return type;\n}\n\nexport const typedEnum = createRulesetFunction(\n  {\n    input: {\n      type: 'object',\n      properties: {\n        enum: {\n          type: 'array',\n        },\n        type: {\n          oneOf: [\n            {\n              type: 'array',\n              items: {\n                type: 'string',\n              },\n            },\n            {\n              type: 'string',\n            },\n          ],\n        },\n      },\n      required: ['enum', 'type'],\n    },\n    options: null,\n  },\n  function (input, opts, context) {\n    const { enum: enumValues } = input;\n    const type = getTypes(input, context.document.formats);\n    const checkForInteger = type === 'integer' || (Array.isArray(type) && type.includes('integer'));\n\n    let results;\n\n    enumValues.forEach((value, i) => {\n      const valueType = getDataType(value, checkForInteger);\n\n      if (valueType === type || (Array.isArray(type) && type.includes(valueType))) {\n        return;\n      }\n\n      results ??= [];\n      results.push({\n        message: `Enum value ${printValue(enumValues[i])} must be \"${String(type)}\".`,\n        path: [...context.path, 'enum', i],\n      });\n    });\n\n    return results;\n  },\n);\n\nexport default typedEnum;"
        },
        {
          "id": "7vlMlWLJeLfv6M_PHO36r",
          "extendedFrom": "",
          "name": "oasDocumentSchema",
          "content": "import { createRulesetFunction } from '@stoplight/spectral-core';\nimport { schema as schemaFn } from '@stoplight/spectral-functions';\nimport { oas2, oas3_1 } from '@stoplight/spectral-formats';\n\nconst OAS_2 = {\n  title: 'A JSON Schema for Swagger 2.0 API.',\n  $id: 'http://swagger.io/v2/schema.json#',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  type: 'object',\n  required: ['swagger', 'info', 'paths'],\n  additionalProperties: false,\n  patternProperties: {\n    '^x-': {\n      $ref: '#/definitions/vendorExtension',\n    },\n  },\n  properties: {\n    swagger: {\n      type: 'string',\n      enum: ['2.0'],\n      description: 'The Swagger version of this document.',\n    },\n    info: {\n      $ref: '#/definitions/info',\n    },\n    host: {\n      type: 'string',\n      pattern: '^[^{}/ :\\\\\\\\]+(?::\\\\d+)?$',\n      description: \"The host (name or ip) of the API. Example: 'swagger.io'\",\n    },\n    basePath: {\n      type: 'string',\n      pattern: '^/',\n      description: \"The base path to the API. Example: '/api'.\",\n    },\n    schemes: {\n      $ref: '#/definitions/schemesList',\n    },\n    consumes: {\n      description: 'A list of MIME types accepted by the API.',\n      allOf: [\n        {\n          $ref: '#/definitions/mediaTypeList',\n        },\n      ],\n    },\n    produces: {\n      description: 'A list of MIME types the API can produce.',\n      allOf: [\n        {\n          $ref: '#/definitions/mediaTypeList',\n        },\n      ],\n    },\n    paths: {\n      $ref: '#/definitions/paths',\n    },\n    definitions: {\n      $ref: '#/definitions/definitions',\n    },\n    parameters: {\n      $ref: '#/definitions/parameterDefinitions',\n    },\n    responses: {\n      $ref: '#/definitions/responseDefinitions',\n    },\n    security: {\n      $ref: '#/definitions/security',\n    },\n    securityDefinitions: {\n      $ref: '#/definitions/securityDefinitions',\n    },\n    tags: {\n      type: 'array',\n      items: {\n        $ref: '#/definitions/tag',\n      },\n      uniqueItems: true,\n    },\n    externalDocs: {\n      $ref: '#/definitions/externalDocs',\n    },\n  },\n  definitions: {\n    info: {\n      type: 'object',\n      description: 'General information about the API.',\n      required: ['version', 'title'],\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        title: {\n          type: 'string',\n          description: 'A unique and precise title of the API.',\n        },\n        version: {\n          type: 'string',\n          description: 'A semantic version number of the API.',\n        },\n        description: {\n          type: 'string',\n          description:\n            'A longer description of the API. Should be different from the title.  GitHub Flavored Markdown is allowed.',\n        },\n        termsOfService: {\n          type: 'string',\n          description: 'The terms of service for the API.',\n        },\n        contact: {\n          $ref: '#/definitions/contact',\n        },\n        license: {\n          $ref: '#/definitions/license',\n        },\n      },\n    },\n    contact: {\n      type: 'object',\n      description: 'Contact information for the owners of the API.',\n      additionalProperties: false,\n      properties: {\n        name: {\n          type: 'string',\n          description: 'The identifying name of the contact person/organization.',\n        },\n        url: {\n          type: 'string',\n          description: 'The URL pointing to the contact information.',\n          format: 'uri',\n        },\n        email: {\n          type: 'string',\n          description: 'The email address of the contact person/organization.',\n          format: 'email',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    license: {\n      type: 'object',\n      required: ['name'],\n      additionalProperties: false,\n      properties: {\n        name: {\n          type: 'string',\n          description: \"The name of the license type. It's encouraged to use an OSI compatible license.\",\n        },\n        url: {\n          type: 'string',\n          description: 'The URL pointing to the license.',\n          format: 'uri',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    paths: {\n      type: 'object',\n      description: \"Relative paths to the individual endpoints. They must be relative to the 'basePath'.\",\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n        '^/': {\n          $ref: '#/definitions/pathItem',\n        },\n      },\n      additionalProperties: false,\n    },\n    definitions: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/definitions/schema',\n      },\n      description: 'One or more JSON objects describing the schemas being consumed and produced by the API.',\n    },\n    parameterDefinitions: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/definitions/parameter',\n      },\n      description: 'One or more JSON representations for parameters',\n    },\n    responseDefinitions: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/definitions/response',\n      },\n      description: 'One or more JSON representations for responses',\n    },\n    externalDocs: {\n      type: 'object',\n      additionalProperties: false,\n      description: 'information about external documentation',\n      required: ['url'],\n      properties: {\n        description: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n          format: 'uri',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    examples: {\n      type: 'object',\n      additionalProperties: true,\n    },\n    mimeType: {\n      type: 'string',\n      description: 'The MIME type of the HTTP message.',\n    },\n    operation: {\n      type: 'object',\n      required: ['responses'],\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        tags: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n          uniqueItems: true,\n        },\n        summary: {\n          type: 'string',\n          description: 'A brief summary of the operation.',\n        },\n        description: {\n          type: 'string',\n          description: 'A longer description of the operation, GitHub Flavored Markdown is allowed.',\n        },\n        externalDocs: {\n          $ref: '#/definitions/externalDocs',\n        },\n        operationId: {\n          type: 'string',\n          description: 'A unique identifier of the operation.',\n        },\n        produces: {\n          description: 'A list of MIME types the API can produce.',\n          allOf: [\n            {\n              $ref: '#/definitions/mediaTypeList',\n            },\n          ],\n        },\n        consumes: {\n          description: 'A list of MIME types the API can consume.',\n          allOf: [\n            {\n              $ref: '#/definitions/mediaTypeList',\n            },\n          ],\n        },\n        parameters: {\n          $ref: '#/definitions/parametersList',\n        },\n        responses: {\n          $ref: '#/definitions/responses',\n        },\n        schemes: {\n          $ref: '#/definitions/schemesList',\n        },\n        deprecated: {\n          type: 'boolean',\n          default: false,\n        },\n        security: {\n          $ref: '#/definitions/security',\n        },\n      },\n    },\n    pathItem: {\n      type: 'object',\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        $ref: {\n          type: 'string',\n        },\n        get: {\n          $ref: '#/definitions/operation',\n        },\n        put: {\n          $ref: '#/definitions/operation',\n        },\n        post: {\n          $ref: '#/definitions/operation',\n        },\n        delete: {\n          $ref: '#/definitions/operation',\n        },\n        options: {\n          $ref: '#/definitions/operation',\n        },\n        head: {\n          $ref: '#/definitions/operation',\n        },\n        patch: {\n          $ref: '#/definitions/operation',\n        },\n        parameters: {\n          $ref: '#/definitions/parametersList',\n        },\n      },\n    },\n    responses: {\n      type: 'object',\n      description: \"Response objects names can either be any valid HTTP status code or 'default'.\",\n      minProperties: 1,\n      additionalProperties: false,\n      patternProperties: {\n        '^([0-9]{3})$|^(default)$': {\n          $ref: '#/definitions/responseValue',\n        },\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      not: {\n        type: 'object',\n        additionalProperties: false,\n        patternProperties: {\n          '^x-': {\n            $ref: '#/definitions/vendorExtension',\n          },\n        },\n      },\n    },\n    responseValue: {\n      oneOf: [\n        {\n          $ref: '#/definitions/response',\n        },\n        {\n          $ref: '#/definitions/jsonReference',\n        },\n      ],\n    },\n    response: {\n      type: 'object',\n      required: ['description'],\n      properties: {\n        description: {\n          type: 'string',\n        },\n        schema: {\n          oneOf: [\n            {\n              $ref: '#/definitions/schema',\n            },\n            {\n              $ref: '#/definitions/fileSchema',\n            },\n          ],\n        },\n        headers: {\n          $ref: '#/definitions/headers',\n        },\n        examples: {\n          $ref: '#/definitions/examples',\n        },\n      },\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    headers: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/definitions/header',\n      },\n    },\n    header: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['string', 'number', 'integer', 'boolean', 'array'],\n        },\n        format: {\n          type: 'string',\n        },\n        items: {\n          $ref: '#/definitions/primitivesItems',\n        },\n        collectionFormat: {\n          $ref: '#/definitions/collectionFormat',\n        },\n        default: {\n          $ref: '#/definitions/default',\n        },\n        maximum: {\n          $ref: '#/definitions/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: '#/definitions/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: '#/definitions/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: '#/definitions/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: '#/definitions/maxLength',\n        },\n        minLength: {\n          $ref: '#/definitions/minLength',\n        },\n        pattern: {\n          $ref: '#/definitions/pattern',\n        },\n        maxItems: {\n          $ref: '#/definitions/maxItems',\n        },\n        minItems: {\n          $ref: '#/definitions/minItems',\n        },\n        uniqueItems: {\n          $ref: '#/definitions/uniqueItems',\n        },\n        enum: {\n          $ref: '#/definitions/enum',\n        },\n        multipleOf: {\n          $ref: '#/definitions/multipleOf',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    vendorExtension: {\n      description: 'Any property starting with x- is valid.',\n      additionalProperties: true,\n      additionalItems: true,\n    },\n    bodyParameter: {\n      type: 'object',\n      required: ['name', 'in', 'schema'],\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        description: {\n          type: 'string',\n          description:\n            'A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.',\n        },\n        name: {\n          type: 'string',\n          description: 'The name of the parameter.',\n        },\n        in: {\n          type: 'string',\n          description: 'Determines the location of the parameter.',\n          enum: ['body'],\n        },\n        required: {\n          type: 'boolean',\n          description: 'Determines whether or not this parameter is required or optional.',\n          default: false,\n        },\n        schema: {\n          $ref: '#/definitions/schema',\n        },\n      },\n      additionalProperties: false,\n    },\n    headerParameterSubSchema: {\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        required: {\n          type: 'boolean',\n          description: 'Determines whether or not this parameter is required or optional.',\n          default: false,\n        },\n        in: {\n          type: 'string',\n          description: 'Determines the location of the parameter.',\n          enum: ['header'],\n        },\n        description: {\n          type: 'string',\n          description:\n            'A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.',\n        },\n        name: {\n          type: 'string',\n          description: 'The name of the parameter.',\n        },\n        type: {\n          type: 'string',\n          enum: ['string', 'number', 'boolean', 'integer', 'array'],\n        },\n        format: {\n          type: 'string',\n        },\n        items: {\n          $ref: '#/definitions/primitivesItems',\n        },\n        collectionFormat: {\n          $ref: '#/definitions/collectionFormat',\n        },\n        default: {\n          $ref: '#/definitions/default',\n        },\n        maximum: {\n          $ref: '#/definitions/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: '#/definitions/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: '#/definitions/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: '#/definitions/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: '#/definitions/maxLength',\n        },\n        minLength: {\n          $ref: '#/definitions/minLength',\n        },\n        pattern: {\n          $ref: '#/definitions/pattern',\n        },\n        maxItems: {\n          $ref: '#/definitions/maxItems',\n        },\n        minItems: {\n          $ref: '#/definitions/minItems',\n        },\n        uniqueItems: {\n          $ref: '#/definitions/uniqueItems',\n        },\n        enum: {\n          $ref: '#/definitions/enum',\n        },\n        multipleOf: {\n          $ref: '#/definitions/multipleOf',\n        },\n      },\n    },\n    queryParameterSubSchema: {\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        required: {\n          type: 'boolean',\n          description: 'Determines whether or not this parameter is required or optional.',\n          default: false,\n        },\n        in: {\n          type: 'string',\n          description: 'Determines the location of the parameter.',\n          enum: ['query'],\n        },\n        description: {\n          type: 'string',\n          description:\n            'A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.',\n        },\n        name: {\n          type: 'string',\n          description: 'The name of the parameter.',\n        },\n        allowEmptyValue: {\n          type: 'boolean',\n          default: false,\n          description: 'allows sending a parameter by name only or with an empty value.',\n        },\n        type: {\n          type: 'string',\n          enum: ['string', 'number', 'boolean', 'integer', 'array'],\n        },\n        format: {\n          type: 'string',\n        },\n        items: {\n          $ref: '#/definitions/primitivesItems',\n        },\n        collectionFormat: {\n          $ref: '#/definitions/collectionFormatWithMulti',\n        },\n        default: {\n          $ref: '#/definitions/default',\n        },\n        maximum: {\n          $ref: '#/definitions/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: '#/definitions/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: '#/definitions/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: '#/definitions/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: '#/definitions/maxLength',\n        },\n        minLength: {\n          $ref: '#/definitions/minLength',\n        },\n        pattern: {\n          $ref: '#/definitions/pattern',\n        },\n        maxItems: {\n          $ref: '#/definitions/maxItems',\n        },\n        minItems: {\n          $ref: '#/definitions/minItems',\n        },\n        uniqueItems: {\n          $ref: '#/definitions/uniqueItems',\n        },\n        enum: {\n          $ref: '#/definitions/enum',\n        },\n        multipleOf: {\n          $ref: '#/definitions/multipleOf',\n        },\n      },\n    },\n    formDataParameterSubSchema: {\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        required: {\n          type: 'boolean',\n          description: 'Determines whether or not this parameter is required or optional.',\n          default: false,\n        },\n        in: {\n          type: 'string',\n          description: 'Determines the location of the parameter.',\n          enum: ['formData'],\n        },\n        description: {\n          type: 'string',\n          description:\n            'A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.',\n        },\n        name: {\n          type: 'string',\n          description: 'The name of the parameter.',\n        },\n        allowEmptyValue: {\n          type: 'boolean',\n          default: false,\n          description: 'allows sending a parameter by name only or with an empty value.',\n        },\n        type: {\n          type: 'string',\n          enum: ['string', 'number', 'boolean', 'integer', 'array', 'file'],\n        },\n        format: {\n          type: 'string',\n        },\n        items: {\n          $ref: '#/definitions/primitivesItems',\n        },\n        collectionFormat: {\n          $ref: '#/definitions/collectionFormatWithMulti',\n        },\n        default: {\n          $ref: '#/definitions/default',\n        },\n        maximum: {\n          $ref: '#/definitions/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: '#/definitions/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: '#/definitions/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: '#/definitions/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: '#/definitions/maxLength',\n        },\n        minLength: {\n          $ref: '#/definitions/minLength',\n        },\n        pattern: {\n          $ref: '#/definitions/pattern',\n        },\n        maxItems: {\n          $ref: '#/definitions/maxItems',\n        },\n        minItems: {\n          $ref: '#/definitions/minItems',\n        },\n        uniqueItems: {\n          $ref: '#/definitions/uniqueItems',\n        },\n        enum: {\n          $ref: '#/definitions/enum',\n        },\n        multipleOf: {\n          $ref: '#/definitions/multipleOf',\n        },\n      },\n    },\n    pathParameterSubSchema: {\n      additionalProperties: false,\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      required: ['required'],\n      properties: {\n        required: {\n          type: 'boolean',\n          enum: [true],\n          description: 'Determines whether or not this parameter is required or optional.',\n        },\n        in: {\n          type: 'string',\n          description: 'Determines the location of the parameter.',\n          enum: ['path'],\n        },\n        description: {\n          type: 'string',\n          description:\n            'A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.',\n        },\n        name: {\n          type: 'string',\n          description: 'The name of the parameter.',\n        },\n        type: {\n          type: 'string',\n          enum: ['string', 'number', 'boolean', 'integer', 'array'],\n        },\n        format: {\n          type: 'string',\n        },\n        items: {\n          $ref: '#/definitions/primitivesItems',\n        },\n        collectionFormat: {\n          $ref: '#/definitions/collectionFormat',\n        },\n        default: {\n          $ref: '#/definitions/default',\n        },\n        maximum: {\n          $ref: '#/definitions/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: '#/definitions/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: '#/definitions/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: '#/definitions/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: '#/definitions/maxLength',\n        },\n        minLength: {\n          $ref: '#/definitions/minLength',\n        },\n        pattern: {\n          $ref: '#/definitions/pattern',\n        },\n        maxItems: {\n          $ref: '#/definitions/maxItems',\n        },\n        minItems: {\n          $ref: '#/definitions/minItems',\n        },\n        uniqueItems: {\n          $ref: '#/definitions/uniqueItems',\n        },\n        enum: {\n          $ref: '#/definitions/enum',\n        },\n        multipleOf: {\n          $ref: '#/definitions/multipleOf',\n        },\n      },\n    },\n    nonBodyParameter: {\n      type: 'object',\n      required: ['name', 'in', 'type'],\n      oneOf: [\n        {\n          $ref: '#/definitions/headerParameterSubSchema',\n        },\n        {\n          $ref: '#/definitions/formDataParameterSubSchema',\n        },\n        {\n          $ref: '#/definitions/queryParameterSubSchema',\n        },\n        {\n          $ref: '#/definitions/pathParameterSubSchema',\n        },\n      ],\n    },\n    parameter: {\n      oneOf: [\n        {\n          $ref: '#/definitions/bodyParameter',\n        },\n        {\n          $ref: '#/definitions/nonBodyParameter',\n        },\n      ],\n    },\n    schema: {\n      type: 'object',\n      description: 'A deterministic version of a JSON Schema object.',\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      properties: {\n        $ref: {\n          type: 'string',\n        },\n        format: {\n          type: 'string',\n        },\n        title: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/title',\n        },\n        description: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/description',\n        },\n        default: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/default',\n        },\n        multipleOf: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/multipleOf',\n        },\n        maximum: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveInteger',\n        },\n        minLength: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0',\n        },\n        pattern: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/pattern',\n        },\n        maxItems: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveInteger',\n        },\n        minItems: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0',\n        },\n        uniqueItems: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/uniqueItems',\n        },\n        maxProperties: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveInteger',\n        },\n        minProperties: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0',\n        },\n        required: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/stringArray',\n        },\n        enum: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/enum',\n        },\n        additionalProperties: {\n          anyOf: [\n            {\n              $ref: '#/definitions/schema',\n            },\n            {\n              type: 'boolean',\n            },\n          ],\n          default: {},\n        },\n        type: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/type',\n        },\n        items: {\n          anyOf: [\n            {\n              $ref: '#/definitions/schema',\n            },\n            {\n              type: 'array',\n              minItems: 1,\n              items: {\n                $ref: '#/definitions/schema',\n              },\n            },\n          ],\n          default: {},\n        },\n        allOf: {\n          type: 'array',\n          minItems: 1,\n          items: {\n            $ref: '#/definitions/schema',\n          },\n        },\n        oneOf: {\n          type: 'array',\n          minItems: 1,\n          items: {\n            $ref: '#/definitions/schema',\n          },\n        },\n        anyOf: {\n          type: 'array',\n          minItems: 1,\n          items: {\n            $ref: '#/definitions/schema',\n          },\n        },\n        properties: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/schema',\n          },\n          default: {},\n        },\n        discriminator: {\n          type: 'string',\n        },\n        readOnly: {\n          type: 'boolean',\n          default: false,\n        },\n        xml: {\n          $ref: '#/definitions/xml',\n        },\n        externalDocs: {\n          $ref: '#/definitions/externalDocs',\n        },\n        example: {},\n      },\n      additionalProperties: false,\n    },\n    fileSchema: {\n      type: 'object',\n      description: 'A deterministic version of a JSON Schema object.',\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n      required: ['type'],\n      properties: {\n        format: {\n          type: 'string',\n        },\n        title: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/title',\n        },\n        description: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/description',\n        },\n        default: {\n          $ref: 'http://json-schema.org/draft-04/schema#/properties/default',\n        },\n        required: {\n          $ref: 'http://json-schema.org/draft-04/schema#/definitions/stringArray',\n        },\n        type: {\n          type: 'string',\n          enum: ['file'],\n        },\n        readOnly: {\n          type: 'boolean',\n          default: false,\n        },\n        externalDocs: {\n          $ref: '#/definitions/externalDocs',\n        },\n        example: {},\n      },\n      additionalProperties: false,\n    },\n    primitivesItems: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['string', 'number', 'integer', 'boolean', 'array'],\n        },\n        format: {\n          type: 'string',\n        },\n        items: {\n          $ref: '#/definitions/primitivesItems',\n        },\n        collectionFormat: {\n          $ref: '#/definitions/collectionFormat',\n        },\n        default: {\n          $ref: '#/definitions/default',\n        },\n        maximum: {\n          $ref: '#/definitions/maximum',\n        },\n        exclusiveMaximum: {\n          $ref: '#/definitions/exclusiveMaximum',\n        },\n        minimum: {\n          $ref: '#/definitions/minimum',\n        },\n        exclusiveMinimum: {\n          $ref: '#/definitions/exclusiveMinimum',\n        },\n        maxLength: {\n          $ref: '#/definitions/maxLength',\n        },\n        minLength: {\n          $ref: '#/definitions/minLength',\n        },\n        pattern: {\n          $ref: '#/definitions/pattern',\n        },\n        maxItems: {\n          $ref: '#/definitions/maxItems',\n        },\n        minItems: {\n          $ref: '#/definitions/minItems',\n        },\n        uniqueItems: {\n          $ref: '#/definitions/uniqueItems',\n        },\n        enum: {\n          $ref: '#/definitions/enum',\n        },\n        multipleOf: {\n          $ref: '#/definitions/multipleOf',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    security: {\n      type: 'array',\n      items: {\n        $ref: '#/definitions/securityRequirement',\n      },\n      uniqueItems: true,\n    },\n    securityRequirement: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'string',\n        },\n        uniqueItems: true,\n      },\n    },\n    xml: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        name: {\n          type: 'string',\n        },\n        namespace: {\n          type: 'string',\n        },\n        prefix: {\n          type: 'string',\n        },\n        attribute: {\n          type: 'boolean',\n          default: false,\n        },\n        wrapped: {\n          type: 'boolean',\n          default: false,\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    tag: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['name'],\n      properties: {\n        name: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        externalDocs: {\n          $ref: '#/definitions/externalDocs',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    securityDefinitions: {\n      type: 'object',\n      additionalProperties: {\n        oneOf: [\n          {\n            $ref: '#/definitions/basicAuthenticationSecurity',\n          },\n          {\n            $ref: '#/definitions/apiKeySecurity',\n          },\n          {\n            $ref: '#/definitions/oauth2ImplicitSecurity',\n          },\n          {\n            $ref: '#/definitions/oauth2PasswordSecurity',\n          },\n          {\n            $ref: '#/definitions/oauth2ApplicationSecurity',\n          },\n          {\n            $ref: '#/definitions/oauth2AccessCodeSecurity',\n          },\n        ],\n      },\n      errorMessage: {\n        properties: {\n          basic: 'Invalid basic authentication security definition',\n          apiKey: 'Invalid apiKey authentication security definition',\n          oauth2: 'Invalid oauth2 authentication security definition',\n        },\n        _: 'Invalid security securityDefinitions',\n      },\n    },\n    basicAuthenticationSecurity: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['basic'],\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    apiKeySecurity: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type', 'name', 'in'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['apiKey'],\n        },\n        name: {\n          type: 'string',\n        },\n        in: {\n          type: 'string',\n          enum: ['header', 'query'],\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    oauth2ImplicitSecurity: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type', 'flow', 'authorizationUrl', 'scopes'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['oauth2'],\n        },\n        flow: {\n          type: 'string',\n          enum: ['implicit'],\n        },\n        scopes: {\n          $ref: '#/definitions/oauth2Scopes',\n        },\n        authorizationUrl: {\n          type: 'string',\n          format: 'uri',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    oauth2PasswordSecurity: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type', 'flow', 'tokenUrl', 'scopes'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['oauth2'],\n        },\n        flow: {\n          type: 'string',\n          enum: ['password'],\n        },\n        scopes: {\n          $ref: '#/definitions/oauth2Scopes',\n        },\n        tokenUrl: {\n          type: 'string',\n          format: 'uri',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    oauth2ApplicationSecurity: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type', 'flow', 'tokenUrl', 'scopes'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['oauth2'],\n        },\n        flow: {\n          type: 'string',\n          enum: ['application'],\n        },\n        scopes: {\n          $ref: '#/definitions/oauth2Scopes',\n        },\n        tokenUrl: {\n          type: 'string',\n          format: 'uri',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    oauth2AccessCodeSecurity: {\n      type: 'object',\n      additionalProperties: false,\n      required: ['type', 'flow', 'authorizationUrl', 'tokenUrl', 'scopes'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['oauth2'],\n        },\n        flow: {\n          type: 'string',\n          enum: ['accessCode'],\n        },\n        scopes: {\n          $ref: '#/definitions/oauth2Scopes',\n        },\n        authorizationUrl: {\n          type: 'string',\n          format: 'uri',\n        },\n        tokenUrl: {\n          type: 'string',\n          format: 'uri',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {\n          $ref: '#/definitions/vendorExtension',\n        },\n      },\n    },\n    oauth2Scopes: {\n      type: 'object',\n      additionalProperties: {\n        type: 'string',\n      },\n    },\n    mediaTypeList: {\n      type: 'array',\n      items: {\n        $ref: '#/definitions/mimeType',\n      },\n      uniqueItems: true,\n    },\n    parametersList: {\n      type: 'array',\n      description: 'The parameters needed to send a valid API call.',\n      additionalItems: false,\n      items: {\n        oneOf: [\n          {\n            $ref: '#/definitions/parameter',\n          },\n          {\n            $ref: '#/definitions/jsonReference',\n          },\n        ],\n      },\n      uniqueItems: true,\n    },\n    schemesList: {\n      type: 'array',\n      description: 'The transfer protocol of the API.',\n      items: {\n        type: 'string',\n        enum: ['http', 'https', 'ws', 'wss'],\n      },\n      uniqueItems: true,\n    },\n    collectionFormat: {\n      type: 'string',\n      enum: ['csv', 'ssv', 'tsv', 'pipes'],\n      default: 'csv',\n    },\n    collectionFormatWithMulti: {\n      type: 'string',\n      enum: ['csv', 'ssv', 'tsv', 'pipes', 'multi'],\n      default: 'csv',\n    },\n    title: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/title',\n    },\n    description: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/description',\n    },\n    default: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/default',\n    },\n    multipleOf: {\n      type: 'number',\n      exclusiveMinimum: 0,\n    },\n    maximum: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/maximum',\n    },\n    exclusiveMaximum: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/exclusiveMaximum',\n    },\n    minimum: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/minimum',\n    },\n    exclusiveMinimum: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/exclusiveMinimum',\n    },\n    maxLength: {\n      $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveInteger',\n    },\n    minLength: {\n      $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0',\n    },\n    pattern: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/pattern',\n    },\n    maxItems: {\n      $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveInteger',\n    },\n    minItems: {\n      $ref: 'http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0',\n    },\n    uniqueItems: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/uniqueItems',\n    },\n    enum: {\n      $ref: 'http://json-schema.org/draft-04/schema#/properties/enum',\n    },\n    jsonReference: {\n      type: 'object',\n      required: ['$ref'],\n      additionalProperties: false,\n      properties: {\n        $ref: {\n          type: 'string',\n        },\n      },\n    },\n  },\n};\n\nconst OAS_3 = {\n  $id: 'https://spec.openapis.org/oas/3.0/schema/2019-04-02',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  description: 'Validation schema for OpenAPI Specification 3.0.X.',\n  type: 'object',\n  required: ['openapi', 'info', 'paths'],\n  properties: {\n    openapi: {\n      type: 'string',\n      pattern: '^3\\\\.0\\\\.\\\\d(-.+)?$',\n    },\n    info: {\n      $ref: '#/definitions/Info',\n    },\n    externalDocs: {\n      $ref: '#/definitions/ExternalDocumentation',\n    },\n    servers: {\n      type: 'array',\n      items: {\n        $ref: '#/definitions/Server',\n      },\n    },\n    security: {\n      type: 'array',\n      items: {\n        $ref: '#/definitions/SecurityRequirement',\n      },\n    },\n    tags: {\n      type: 'array',\n      items: {\n        $ref: '#/definitions/Tag',\n      },\n      uniqueItems: true,\n    },\n    paths: {\n      $ref: '#/definitions/Paths',\n    },\n    components: {\n      $ref: '#/definitions/Components',\n    },\n  },\n  patternProperties: {\n    '^x-': {},\n  },\n  additionalProperties: false,\n  definitions: {\n    Reference: {\n      type: 'object',\n      required: ['$ref'],\n      patternProperties: {\n        '^\\\\$ref$': {\n          type: 'string',\n          format: 'uri-reference',\n        },\n      },\n    },\n    Info: {\n      type: 'object',\n      required: ['title', 'version'],\n      properties: {\n        title: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        termsOfService: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        contact: {\n          $ref: '#/definitions/Contact',\n        },\n        license: {\n          $ref: '#/definitions/License',\n        },\n        version: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Contact: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        email: {\n          type: 'string',\n          format: 'email',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    License: {\n      type: 'object',\n      required: ['name'],\n      properties: {\n        name: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Server: {\n      type: 'object',\n      required: ['url'],\n      properties: {\n        url: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        variables: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/ServerVariable',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    ServerVariable: {\n      type: 'object',\n      required: ['default'],\n      properties: {\n        enum: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n        default: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Components: {\n      type: 'object',\n      properties: {\n        schemas: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Schema',\n                },\n                {\n                  $ref: '#/definitions/Reference',\n                },\n              ],\n            },\n          },\n        },\n        responses: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/Response',\n                },\n              ],\n            },\n          },\n        },\n        parameters: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/Parameter',\n                },\n              ],\n            },\n          },\n        },\n        examples: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/Example',\n                },\n              ],\n            },\n          },\n        },\n        requestBodies: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/RequestBody',\n                },\n              ],\n            },\n          },\n        },\n        headers: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/Header',\n                },\n              ],\n            },\n          },\n        },\n        securitySchemes: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/SecurityScheme',\n                },\n              ],\n            },\n          },\n        },\n        links: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/Link',\n                },\n              ],\n            },\n          },\n        },\n        callbacks: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z0-9\\\\.\\\\-_]+$': {\n              oneOf: [\n                {\n                  $ref: '#/definitions/Reference',\n                },\n                {\n                  $ref: '#/definitions/Callback',\n                },\n              ],\n            },\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Schema: {\n      type: 'object',\n      properties: {\n        title: {\n          type: 'string',\n        },\n        multipleOf: {\n          type: 'number',\n          exclusiveMinimum: 0,\n        },\n        maximum: {\n          type: 'number',\n        },\n        exclusiveMaximum: {\n          type: 'boolean',\n          default: false,\n        },\n        minimum: {\n          type: 'number',\n        },\n        exclusiveMinimum: {\n          type: 'boolean',\n          default: false,\n        },\n        maxLength: {\n          type: 'integer',\n          minimum: 0,\n        },\n        minLength: {\n          type: 'integer',\n          minimum: 0,\n          default: 0,\n        },\n        pattern: {\n          type: 'string',\n          format: 'regex',\n        },\n        maxItems: {\n          type: 'integer',\n          minimum: 0,\n        },\n        minItems: {\n          type: 'integer',\n          minimum: 0,\n          default: 0,\n        },\n        uniqueItems: {\n          type: 'boolean',\n          default: false,\n        },\n        maxProperties: {\n          type: 'integer',\n          minimum: 0,\n        },\n        minProperties: {\n          type: 'integer',\n          minimum: 0,\n          default: 0,\n        },\n        required: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n          minItems: 1,\n          uniqueItems: true,\n        },\n        enum: {\n          type: 'array',\n          items: {},\n          minItems: 1,\n          uniqueItems: false,\n        },\n        type: {\n          type: 'string',\n          enum: ['array', 'boolean', 'integer', 'number', 'object', 'string'],\n        },\n        not: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Schema',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        allOf: {\n          type: 'array',\n          items: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Schema',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        oneOf: {\n          type: 'array',\n          items: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Schema',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        anyOf: {\n          type: 'array',\n          items: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Schema',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        items: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Schema',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        properties: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Schema',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        additionalProperties: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Schema',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n            {\n              type: 'boolean',\n            },\n          ],\n          default: true,\n        },\n        description: {\n          type: 'string',\n        },\n        format: {\n          type: 'string',\n        },\n        default: {},\n        nullable: {\n          type: 'boolean',\n          default: false,\n        },\n        discriminator: {\n          $ref: '#/definitions/Discriminator',\n        },\n        readOnly: {\n          type: 'boolean',\n          default: false,\n        },\n        writeOnly: {\n          type: 'boolean',\n          default: false,\n        },\n        example: {},\n        externalDocs: {\n          $ref: '#/definitions/ExternalDocumentation',\n        },\n        deprecated: {\n          type: 'boolean',\n          default: false,\n        },\n        xml: {\n          $ref: '#/definitions/XML',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Discriminator: {\n      type: 'object',\n      required: ['propertyName'],\n      properties: {\n        propertyName: {\n          type: 'string',\n        },\n        mapping: {\n          type: 'object',\n          additionalProperties: {\n            type: 'string',\n          },\n        },\n      },\n    },\n    XML: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        namespace: {\n          type: 'string',\n          format: 'uri',\n        },\n        prefix: {\n          type: 'string',\n        },\n        attribute: {\n          type: 'boolean',\n          default: false,\n        },\n        wrapped: {\n          type: 'boolean',\n          default: false,\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Response: {\n      type: 'object',\n      required: ['description'],\n      properties: {\n        description: {\n          type: 'string',\n        },\n        headers: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Header',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        content: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/MediaType',\n          },\n        },\n        links: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Link',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    MediaType: {\n      type: 'object',\n      properties: {\n        schema: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Schema',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        example: {},\n        examples: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Example',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        encoding: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/Encoding',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n      allOf: [\n        {\n          $ref: '#/definitions/ExampleXORExamples',\n        },\n      ],\n    },\n    Example: {\n      type: 'object',\n      properties: {\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        value: {},\n        externalValue: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Header: {\n      type: 'object',\n      properties: {\n        description: {\n          type: 'string',\n        },\n        required: {\n          type: 'boolean',\n          default: false,\n        },\n        deprecated: {\n          type: 'boolean',\n          default: false,\n        },\n        allowEmptyValue: {\n          type: 'boolean',\n          default: false,\n        },\n        style: {\n          type: 'string',\n          enum: ['simple'],\n          default: 'simple',\n        },\n        explode: {\n          type: 'boolean',\n        },\n        allowReserved: {\n          type: 'boolean',\n          default: false,\n        },\n        schema: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Schema',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        content: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/MediaType',\n          },\n          minProperties: 1,\n          maxProperties: 1,\n        },\n        example: {},\n        examples: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Example',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n      allOf: [\n        {\n          $ref: '#/definitions/ExampleXORExamples',\n        },\n        {\n          $ref: '#/definitions/SchemaXORContent',\n        },\n      ],\n    },\n    Paths: {\n      type: 'object',\n      patternProperties: {\n        '^\\\\/': {\n          $ref: '#/definitions/PathItem',\n        },\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    PathItem: {\n      type: 'object',\n      properties: {\n        $ref: {\n          type: 'string',\n        },\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        servers: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/Server',\n          },\n        },\n        parameters: {\n          type: 'array',\n          items: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Parameter',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n          uniqueItems: true,\n        },\n      },\n      patternProperties: {\n        '^(get|put|post|delete|options|head|patch|trace)$': {\n          $ref: '#/definitions/Operation',\n        },\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Operation: {\n      type: 'object',\n      required: ['responses'],\n      properties: {\n        tags: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        externalDocs: {\n          $ref: '#/definitions/ExternalDocumentation',\n        },\n        operationId: {\n          type: 'string',\n        },\n        parameters: {\n          type: 'array',\n          items: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Parameter',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n          uniqueItems: true,\n        },\n        requestBody: {\n          oneOf: [\n            {\n              $ref: '#/definitions/RequestBody',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        responses: {\n          $ref: '#/definitions/Responses',\n        },\n        callbacks: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Callback',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n        deprecated: {\n          type: 'boolean',\n          default: false,\n        },\n        security: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/SecurityRequirement',\n          },\n        },\n        servers: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/Server',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Responses: {\n      type: 'object',\n      properties: {\n        default: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Response',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n      },\n      patternProperties: {\n        '^[1-5](?:\\\\d{2}|XX)$': {\n          oneOf: [\n            {\n              $ref: '#/definitions/Response',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        '^x-': {},\n      },\n      minProperties: 1,\n      additionalProperties: false,\n    },\n    SecurityRequirement: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'string',\n        },\n      },\n    },\n    Tag: {\n      type: 'object',\n      required: ['name'],\n      properties: {\n        name: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        externalDocs: {\n          $ref: '#/definitions/ExternalDocumentation',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    ExternalDocumentation: {\n      type: 'object',\n      required: ['url'],\n      properties: {\n        description: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    ExampleXORExamples: {\n      description: 'Example and examples are mutually exclusive',\n      not: {\n        required: ['example', 'examples'],\n      },\n    },\n    SchemaXORContent: {\n      description: 'Schema and content are mutually exclusive, at least one is required',\n      not: {\n        required: ['schema', 'content'],\n      },\n      oneOf: [\n        {\n          required: ['schema'],\n        },\n        {\n          required: ['content'],\n          description: 'Some properties are not allowed if content is present',\n          allOf: [\n            {\n              not: {\n                required: ['style'],\n              },\n            },\n            {\n              not: {\n                required: ['explode'],\n              },\n            },\n            {\n              not: {\n                required: ['allowReserved'],\n              },\n            },\n            {\n              not: {\n                required: ['example'],\n              },\n            },\n            {\n              not: {\n                required: ['examples'],\n              },\n            },\n          ],\n        },\n      ],\n    },\n    Parameter: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        in: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        required: {\n          type: 'boolean',\n          default: false,\n        },\n        deprecated: {\n          type: 'boolean',\n          default: false,\n        },\n        allowEmptyValue: {\n          type: 'boolean',\n          default: false,\n        },\n        style: {\n          type: 'string',\n        },\n        explode: {\n          type: 'boolean',\n        },\n        allowReserved: {\n          type: 'boolean',\n          default: false,\n        },\n        schema: {\n          oneOf: [\n            {\n              $ref: '#/definitions/Schema',\n            },\n            {\n              $ref: '#/definitions/Reference',\n            },\n          ],\n        },\n        content: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/MediaType',\n          },\n          minProperties: 1,\n          maxProperties: 1,\n        },\n        example: {},\n        examples: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [\n              {\n                $ref: '#/definitions/Example',\n              },\n              {\n                $ref: '#/definitions/Reference',\n              },\n            ],\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n      required: ['name', 'in'],\n      allOf: [\n        {\n          $ref: '#/definitions/ExampleXORExamples',\n        },\n        {\n          $ref: '#/definitions/SchemaXORContent',\n        },\n        {\n          $ref: '#/definitions/ParameterLocation',\n        },\n      ],\n    },\n    ParameterLocation: {\n      description: 'Parameter location',\n      oneOf: [\n        {\n          description: 'Parameter in path',\n          required: ['required'],\n          properties: {\n            in: {\n              enum: ['path'],\n            },\n            style: {\n              enum: ['matrix', 'label', 'simple'],\n              default: 'simple',\n            },\n            required: {\n              enum: [true],\n            },\n          },\n        },\n        {\n          description: 'Parameter in query',\n          properties: {\n            in: {\n              enum: ['query'],\n            },\n            style: {\n              enum: ['form', 'spaceDelimited', 'pipeDelimited', 'deepObject'],\n              default: 'form',\n            },\n          },\n        },\n        {\n          description: 'Parameter in header',\n          properties: {\n            in: {\n              enum: ['header'],\n            },\n            style: {\n              enum: ['simple'],\n              default: 'simple',\n            },\n          },\n        },\n        {\n          description: 'Parameter in cookie',\n          properties: {\n            in: {\n              enum: ['cookie'],\n            },\n            style: {\n              enum: ['form'],\n              default: 'form',\n            },\n          },\n        },\n      ],\n    },\n    RequestBody: {\n      type: 'object',\n      required: ['content'],\n      properties: {\n        description: {\n          type: 'string',\n        },\n        content: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/MediaType',\n          },\n        },\n        required: {\n          type: 'boolean',\n          default: false,\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    SecurityScheme: {\n      oneOf: [\n        {\n          $ref: '#/definitions/APIKeySecurityScheme',\n        },\n        {\n          $ref: '#/definitions/HTTPSecurityScheme',\n        },\n        {\n          $ref: '#/definitions/OAuth2SecurityScheme',\n        },\n        {\n          $ref: '#/definitions/OpenIdConnectSecurityScheme',\n        },\n      ],\n    },\n    APIKeySecurityScheme: {\n      type: 'object',\n      required: ['type', 'name', 'in'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['apiKey'],\n        },\n        name: {\n          type: 'string',\n        },\n        in: {\n          type: 'string',\n          enum: ['header', 'query', 'cookie'],\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    HTTPSecurityScheme: {\n      type: 'object',\n      required: ['scheme', 'type'],\n      properties: {\n        scheme: {\n          type: 'string',\n        },\n        bearerFormat: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        type: {\n          type: 'string',\n          enum: ['http'],\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n      oneOf: [\n        {\n          description: 'Bearer',\n          properties: {\n            scheme: {\n              enum: ['bearer'],\n            },\n          },\n        },\n        {\n          description: 'Non Bearer',\n          not: {\n            required: ['bearerFormat'],\n          },\n          properties: {\n            scheme: {\n              not: {\n                enum: ['bearer'],\n              },\n            },\n          },\n        },\n      ],\n    },\n    OAuth2SecurityScheme: {\n      type: 'object',\n      required: ['type', 'flows'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['oauth2'],\n        },\n        flows: {\n          $ref: '#/definitions/OAuthFlows',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    OpenIdConnectSecurityScheme: {\n      type: 'object',\n      required: ['type', 'openIdConnectUrl'],\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['openIdConnect'],\n        },\n        openIdConnectUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    OAuthFlows: {\n      type: 'object',\n      properties: {\n        implicit: {\n          $ref: '#/definitions/ImplicitOAuthFlow',\n        },\n        password: {\n          $ref: '#/definitions/PasswordOAuthFlow',\n        },\n        clientCredentials: {\n          $ref: '#/definitions/ClientCredentialsFlow',\n        },\n        authorizationCode: {\n          $ref: '#/definitions/AuthorizationCodeOAuthFlow',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    ImplicitOAuthFlow: {\n      type: 'object',\n      required: ['authorizationUrl', 'scopes'],\n      properties: {\n        authorizationUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        refreshUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        scopes: {\n          type: 'object',\n          additionalProperties: {\n            type: 'string',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    PasswordOAuthFlow: {\n      type: 'object',\n      required: ['tokenUrl', 'scopes'],\n      properties: {\n        tokenUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        refreshUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        scopes: {\n          type: 'object',\n          additionalProperties: {\n            type: 'string',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    ClientCredentialsFlow: {\n      type: 'object',\n      required: ['tokenUrl', 'scopes'],\n      properties: {\n        tokenUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        refreshUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        scopes: {\n          type: 'object',\n          additionalProperties: {\n            type: 'string',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    AuthorizationCodeOAuthFlow: {\n      type: 'object',\n      required: ['authorizationUrl', 'tokenUrl', 'scopes'],\n      properties: {\n        authorizationUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        tokenUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        refreshUrl: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        scopes: {\n          type: 'object',\n          additionalProperties: {\n            type: 'string',\n          },\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n    },\n    Link: {\n      type: 'object',\n      properties: {\n        operationId: {\n          type: 'string',\n        },\n        operationRef: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        parameters: {\n          type: 'object',\n          additionalProperties: {},\n        },\n        requestBody: {},\n        description: {\n          type: 'string',\n        },\n        server: {\n          $ref: '#/definitions/Server',\n        },\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n      additionalProperties: false,\n      not: {\n        description: 'Operation Id and Operation Ref are mutually exclusive',\n        required: ['operationId', 'operationRef'],\n      },\n    },\n    Callback: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/definitions/PathItem',\n      },\n      patternProperties: {\n        '^x-': {},\n      },\n    },\n    Encoding: {\n      type: 'object',\n      properties: {\n        contentType: {\n          type: 'string',\n        },\n        headers: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/definitions/Header',\n          },\n        },\n        style: {\n          type: 'string',\n          enum: ['form', 'spaceDelimited', 'pipeDelimited', 'deepObject'],\n        },\n        explode: {\n          type: 'boolean',\n        },\n        allowReserved: {\n          type: 'boolean',\n          default: false,\n        },\n      },\n      additionalProperties: false,\n    },\n  },\n};\n\nconst OAS_3_1 = {\n  $id: 'https://spec.openapis.org/oas/3.1/schema/2021-09-28',\n  $schema: 'https://json-schema.org/draft/2020-12/schema',\n  type: 'object',\n  properties: {\n    openapi: {\n      type: 'string',\n      pattern: '^3\\\\.1\\\\.\\\\d+(-.+)?$',\n    },\n    info: {\n      $ref: '#/$defs/info',\n    },\n    jsonSchemaDialect: {\n      type: 'string',\n      format: 'uri',\n      default: 'https://spec.openapis.org/oas/3.1/dialect/base',\n    },\n    servers: {\n      type: 'array',\n      items: {\n        $ref: '#/$defs/server',\n      },\n    },\n    paths: {\n      $ref: '#/$defs/paths',\n    },\n    webhooks: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/$defs/path-item-or-reference',\n      },\n    },\n    components: {\n      $ref: '#/$defs/components',\n    },\n    security: {\n      type: 'array',\n      items: {\n        $ref: '#/$defs/security-requirement',\n      },\n    },\n    tags: {\n      type: 'array',\n      items: {\n        $ref: '#/$defs/tag',\n      },\n    },\n    externalDocs: {\n      $ref: '#/$defs/external-documentation',\n    },\n  },\n  required: ['openapi', 'info'],\n  anyOf: [\n    {\n      required: ['paths'],\n      errorMessage: 'The document must have either \"paths\", \"webhooks\" or \"components\"',\n    },\n    {\n      required: ['components'],\n    },\n    {\n      required: ['webhooks'],\n    },\n  ],\n  $ref: '#/$defs/specification-extensions',\n  unevaluatedProperties: false,\n  $defs: {\n    info: {\n      type: 'object',\n      properties: {\n        title: {\n          type: 'string',\n        },\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        termsOfService: {\n          type: 'string',\n        },\n        contact: {\n          $ref: '#/$defs/contact',\n        },\n        license: {\n          $ref: '#/$defs/license',\n        },\n        version: {\n          type: 'string',\n        },\n      },\n      required: ['title', 'version'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    contact: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n        },\n        email: {\n          type: 'string',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    license: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        identifier: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n          format: 'uri',\n        },\n      },\n      required: ['name'],\n      oneOf: [\n        {\n          required: ['identifier'],\n        },\n        {\n          required: ['url'],\n        },\n      ],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    server: {\n      type: 'object',\n      properties: {\n        url: {\n          type: 'string',\n          format: 'uri-template',\n        },\n        description: {\n          type: 'string',\n        },\n        variables: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/server-variable',\n          },\n        },\n      },\n      required: ['url'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'server-variable': {\n      type: 'object',\n      properties: {\n        enum: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n          minItems: 1,\n        },\n        default: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      required: ['default'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    components: {\n      type: 'object',\n      properties: {\n        schemas: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/schema',\n          },\n        },\n        responses: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/response-or-reference',\n          },\n        },\n        parameters: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/parameter-or-reference',\n          },\n        },\n        examples: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/example-or-reference',\n          },\n        },\n        requestBodies: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/request-body-or-reference',\n          },\n        },\n        headers: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/header-or-reference',\n          },\n        },\n        securitySchemes: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/security-scheme-or-reference',\n          },\n        },\n        links: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/link-or-reference',\n          },\n        },\n        callbacks: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/callbacks-or-reference',\n          },\n        },\n        pathItems: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/path-item-or-reference',\n          },\n        },\n      },\n      patternProperties: {\n        '^(schemas|responses|parameters|examples|requestBodies|headers|securitySchemes|links|callbacks|pathItems)$': {\n          $comment:\n            'Enumerating all of the property names in the regex above is necessary for unevaluatedProperties to work as expected',\n          propertyNames: {\n            pattern: '^[a-zA-Z0-9._-]+$',\n          },\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    paths: {\n      type: 'object',\n      patternProperties: {\n        '^/': {\n          $ref: '#/$defs/path-item',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'path-item': {\n      type: 'object',\n      properties: {\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        servers: {\n          type: 'array',\n          items: {\n            $ref: '#/$defs/server',\n          },\n        },\n        parameters: {\n          type: 'array',\n          items: {\n            $ref: '#/$defs/parameter-or-reference',\n          },\n        },\n      },\n      patternProperties: {\n        '^(get|put|post|delete|options|head|patch|trace)$': {\n          $ref: '#/$defs/operation',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'path-item-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/path-item',\n      },\n    },\n    operation: {\n      type: 'object',\n      properties: {\n        tags: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        externalDocs: {\n          $ref: '#/$defs/external-documentation',\n        },\n        operationId: {\n          type: 'string',\n        },\n        parameters: {\n          type: 'array',\n          items: {\n            $ref: '#/$defs/parameter-or-reference',\n          },\n        },\n        requestBody: {\n          $ref: '#/$defs/request-body-or-reference',\n        },\n        responses: {\n          $ref: '#/$defs/responses',\n        },\n        callbacks: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/callbacks-or-reference',\n          },\n        },\n        deprecated: {\n          default: false,\n          type: 'boolean',\n        },\n        security: {\n          type: 'array',\n          items: {\n            $ref: '#/$defs/security-requirement',\n          },\n        },\n        servers: {\n          type: 'array',\n          items: {\n            $ref: '#/$defs/server',\n          },\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'external-documentation': {\n      type: 'object',\n      properties: {\n        description: {\n          type: 'string',\n        },\n        url: {\n          type: 'string',\n          format: 'uri',\n        },\n      },\n      required: ['url'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    parameter: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        in: {\n          enum: ['query', 'header', 'path', 'cookie'],\n        },\n        description: {\n          type: 'string',\n        },\n        required: {\n          default: false,\n          type: 'boolean',\n        },\n        deprecated: {\n          default: false,\n          type: 'boolean',\n        },\n        allowEmptyValue: {\n          default: false,\n          type: 'boolean',\n        },\n        schema: {\n          $ref: '#/$defs/schema',\n        },\n        content: {\n          $ref: '#/$defs/content',\n        },\n      },\n      required: ['in'],\n      oneOf: [\n        {\n          required: ['schema'],\n        },\n        {\n          required: ['content'],\n        },\n      ],\n      dependentSchemas: {\n        schema: {\n          properties: {\n            style: {\n              type: 'string',\n            },\n            explode: {\n              type: 'boolean',\n            },\n            allowReserved: {\n              default: false,\n              type: 'boolean',\n            },\n          },\n          allOf: [\n            {\n              $ref: '#/$defs/examples',\n            },\n            {\n              $ref: '#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-path',\n            },\n            {\n              $ref: '#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-header',\n            },\n            {\n              $ref: '#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-query',\n            },\n            {\n              $ref: '#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-cookie',\n            },\n            {\n              $ref: '#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-form',\n            },\n          ],\n          $defs: {\n            'styles-for-path': {\n              if: {\n                properties: {\n                  in: {\n                    const: 'path',\n                  },\n                },\n                required: ['in'],\n              },\n              then: {\n                properties: {\n                  name: {\n                    pattern: '[^/#?]+$',\n                  },\n                  style: {\n                    default: 'simple',\n                    enum: ['matrix', 'label', 'simple'],\n                  },\n                  required: {\n                    const: true,\n                  },\n                },\n                required: ['required'],\n              },\n            },\n            'styles-for-header': {\n              if: {\n                properties: {\n                  in: {\n                    const: 'header',\n                  },\n                },\n                required: ['in'],\n              },\n              then: {\n                properties: {\n                  style: {\n                    default: 'simple',\n                    const: 'simple',\n                  },\n                },\n              },\n            },\n            'styles-for-query': {\n              if: {\n                properties: {\n                  in: {\n                    const: 'query',\n                  },\n                },\n                required: ['in'],\n              },\n              then: {\n                properties: {\n                  style: {\n                    default: 'form',\n                    enum: ['form', 'spaceDelimited', 'pipeDelimited', 'deepObject'],\n                  },\n                },\n              },\n            },\n            'styles-for-cookie': {\n              if: {\n                properties: {\n                  in: {\n                    const: 'cookie',\n                  },\n                },\n                required: ['in'],\n              },\n              then: {\n                properties: {\n                  style: {\n                    default: 'form',\n                    const: 'form',\n                  },\n                },\n              },\n            },\n            'styles-for-form': {\n              if: {\n                properties: {\n                  style: {\n                    const: 'form',\n                  },\n                },\n                required: ['style'],\n              },\n              then: {\n                properties: {\n                  explode: {\n                    default: true,\n                  },\n                },\n              },\n              else: {\n                properties: {\n                  explode: {\n                    default: false,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'parameter-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/parameter',\n      },\n    },\n    'request-body': {\n      type: 'object',\n      properties: {\n        description: {\n          type: 'string',\n        },\n        content: {\n          $ref: '#/$defs/content',\n        },\n        required: {\n          default: false,\n          type: 'boolean',\n        },\n      },\n      required: ['content'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'request-body-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/request-body',\n      },\n    },\n    content: {\n      type: 'object',\n      additionalProperties: {\n        $ref: '#/$defs/media-type',\n      },\n      propertyNames: {\n        format: 'media-range',\n      },\n    },\n    'media-type': {\n      type: 'object',\n      properties: {\n        schema: {\n          $ref: '#/$defs/schema',\n        },\n        encoding: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/encoding',\n          },\n        },\n      },\n      allOf: [\n        {\n          $ref: '#/$defs/specification-extensions',\n        },\n        {\n          $ref: '#/$defs/examples',\n        },\n      ],\n      unevaluatedProperties: false,\n    },\n    encoding: {\n      type: 'object',\n      properties: {\n        contentType: {\n          type: 'string',\n          format: 'media-range',\n        },\n        headers: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/header-or-reference',\n          },\n        },\n        style: {\n          default: 'form',\n          enum: ['form', 'spaceDelimited', 'pipeDelimited', 'deepObject'],\n        },\n        explode: {\n          type: 'boolean',\n        },\n        allowReserved: {\n          default: false,\n          type: 'boolean',\n        },\n      },\n      allOf: [\n        {\n          $ref: '#/$defs/specification-extensions',\n        },\n        {\n          $ref: '#/$defs/encoding/$defs/explode-default',\n        },\n      ],\n      unevaluatedProperties: false,\n      $defs: {\n        'explode-default': {\n          if: {\n            properties: {\n              style: {\n                const: 'form',\n              },\n            },\n            required: ['style'],\n          },\n          then: {\n            properties: {\n              explode: {\n                default: true,\n              },\n            },\n          },\n          else: {\n            properties: {\n              explode: {\n                default: false,\n              },\n            },\n          },\n        },\n      },\n    },\n    responses: {\n      type: 'object',\n      properties: {\n        default: {\n          $ref: '#/$defs/response-or-reference',\n        },\n      },\n      patternProperties: {\n        '^[1-5](?:[0-9]{2}|XX)$': {\n          $ref: '#/$defs/response-or-reference',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    response: {\n      type: 'object',\n      properties: {\n        description: {\n          type: 'string',\n        },\n        headers: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/header-or-reference',\n          },\n        },\n        content: {\n          $ref: '#/$defs/content',\n        },\n        links: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/link-or-reference',\n          },\n        },\n      },\n      required: ['description'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'response-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/response',\n      },\n    },\n    callbacks: {\n      type: 'object',\n      $ref: '#/$defs/specification-extensions',\n      additionalProperties: {\n        $ref: '#/$defs/path-item-or-reference',\n      },\n    },\n    'callbacks-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/callbacks',\n      },\n    },\n    example: {\n      type: 'object',\n      properties: {\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        value: true,\n        externalValue: {\n          type: 'string',\n          format: 'uri',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'example-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/example',\n      },\n    },\n    link: {\n      type: 'object',\n      properties: {\n        operationRef: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        operationId: true,\n        parameters: {\n          $ref: '#/$defs/map-of-strings',\n        },\n        requestBody: true,\n        description: {\n          type: 'string',\n        },\n        body: {\n          $ref: '#/$defs/server',\n        },\n      },\n      oneOf: [\n        {\n          required: ['operationRef'],\n        },\n        {\n          required: ['operationId'],\n        },\n      ],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'link-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/link',\n      },\n    },\n    header: {\n      type: 'object',\n      properties: {\n        description: {\n          type: 'string',\n        },\n        required: {\n          default: false,\n          type: 'boolean',\n        },\n        deprecated: {\n          default: false,\n          type: 'boolean',\n        },\n        schema: {\n          $ref: '#/$defs/schema',\n        },\n        content: {\n          $ref: '#/$defs/content',\n        },\n      },\n      oneOf: [\n        {\n          required: ['schema'],\n        },\n        {\n          required: ['content'],\n        },\n      ],\n      dependentSchemas: {\n        schema: {\n          properties: {\n            style: {\n              default: 'simple',\n              const: 'simple',\n            },\n            explode: {\n              default: false,\n              type: 'boolean',\n            },\n          },\n          $ref: '#/$defs/examples',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    'header-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/header',\n      },\n    },\n    tag: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n        externalDocs: {\n          $ref: '#/$defs/external-documentation',\n        },\n      },\n      required: ['name'],\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n    },\n    reference: {\n      type: 'object',\n      properties: {\n        $ref: {\n          type: 'string',\n          format: 'uri-reference',\n        },\n        summary: {\n          type: 'string',\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      unevaluatedProperties: false,\n    },\n    schema: {\n      $dynamicAnchor: 'meta',\n      type: ['object', 'boolean'],\n    },\n    'security-scheme': {\n      type: 'object',\n      properties: {\n        type: {\n          enum: ['apiKey', 'http', 'mutualTLS', 'oauth2', 'openIdConnect'],\n        },\n        description: {\n          type: 'string',\n        },\n      },\n      required: ['type'],\n      allOf: [\n        {\n          $ref: '#/$defs/specification-extensions',\n        },\n        {\n          $ref: '#/$defs/security-scheme/$defs/type-apikey',\n        },\n        {\n          $ref: '#/$defs/security-scheme/$defs/type-http',\n        },\n        {\n          $ref: '#/$defs/security-scheme/$defs/type-http-bearer',\n        },\n        {\n          $ref: '#/$defs/security-scheme/$defs/type-oauth2',\n        },\n        {\n          $ref: '#/$defs/security-scheme/$defs/type-oidc',\n        },\n      ],\n      unevaluatedProperties: false,\n      $defs: {\n        'type-apikey': {\n          if: {\n            properties: {\n              type: {\n                const: 'apiKey',\n              },\n            },\n            required: ['type'],\n          },\n          then: {\n            properties: {\n              name: {\n                type: 'string',\n              },\n              in: {\n                enum: ['query', 'header', 'cookie'],\n              },\n            },\n            required: ['name', 'in'],\n          },\n        },\n        'type-http': {\n          if: {\n            properties: {\n              type: {\n                const: 'http',\n              },\n            },\n            required: ['type'],\n          },\n          then: {\n            properties: {\n              scheme: {\n                type: 'string',\n              },\n            },\n            required: ['scheme'],\n          },\n        },\n        'type-http-bearer': {\n          if: {\n            properties: {\n              type: {\n                const: 'http',\n              },\n              scheme: {\n                type: 'string',\n                pattern: '^[Bb][Ee][Aa][Rr][Ee][Rr]$',\n              },\n            },\n            required: ['type', 'scheme'],\n          },\n          then: {\n            properties: {\n              bearerFormat: {\n                type: 'string',\n              },\n            },\n          },\n        },\n        'type-oauth2': {\n          if: {\n            properties: {\n              type: {\n                const: 'oauth2',\n              },\n            },\n            required: ['type'],\n          },\n          then: {\n            properties: {\n              flows: {\n                $ref: '#/$defs/oauth-flows',\n              },\n            },\n            required: ['flows'],\n          },\n        },\n        'type-oidc': {\n          if: {\n            properties: {\n              type: {\n                const: 'openIdConnect',\n              },\n            },\n            required: ['type'],\n          },\n          then: {\n            properties: {\n              openIdConnectUrl: {\n                type: 'string',\n                format: 'uri',\n              },\n            },\n            required: ['openIdConnectUrl'],\n          },\n        },\n      },\n    },\n    'security-scheme-or-reference': {\n      if: {\n        type: 'object',\n        required: ['$ref'],\n      },\n      then: {\n        $ref: '#/$defs/reference',\n      },\n      else: {\n        $ref: '#/$defs/security-scheme',\n      },\n    },\n    'oauth-flows': {\n      type: 'object',\n      properties: {\n        implicit: {\n          $ref: '#/$defs/oauth-flows/$defs/implicit',\n        },\n        password: {\n          $ref: '#/$defs/oauth-flows/$defs/password',\n        },\n        clientCredentials: {\n          $ref: '#/$defs/oauth-flows/$defs/client-credentials',\n        },\n        authorizationCode: {\n          $ref: '#/$defs/oauth-flows/$defs/authorization-code',\n        },\n      },\n      $ref: '#/$defs/specification-extensions',\n      unevaluatedProperties: false,\n      $defs: {\n        implicit: {\n          type: 'object',\n          properties: {\n            authorizationUrl: {\n              type: 'string',\n            },\n            refreshUrl: {\n              type: 'string',\n            },\n            scopes: {\n              $ref: '#/$defs/map-of-strings',\n            },\n          },\n          required: ['authorizationUrl', 'scopes'],\n          $ref: '#/$defs/specification-extensions',\n          unevaluatedProperties: false,\n        },\n        password: {\n          type: 'object',\n          properties: {\n            tokenUrl: {\n              type: 'string',\n            },\n            refreshUrl: {\n              type: 'string',\n            },\n            scopes: {\n              $ref: '#/$defs/map-of-strings',\n            },\n          },\n          required: ['tokenUrl', 'scopes'],\n          $ref: '#/$defs/specification-extensions',\n          unevaluatedProperties: false,\n        },\n        'client-credentials': {\n          type: 'object',\n          properties: {\n            tokenUrl: {\n              type: 'string',\n            },\n            refreshUrl: {\n              type: 'string',\n            },\n            scopes: {\n              $ref: '#/$defs/map-of-strings',\n            },\n          },\n          required: ['tokenUrl', 'scopes'],\n          $ref: '#/$defs/specification-extensions',\n          unevaluatedProperties: false,\n        },\n        'authorization-code': {\n          type: 'object',\n          properties: {\n            authorizationUrl: {\n              type: 'string',\n            },\n            tokenUrl: {\n              type: 'string',\n            },\n            refreshUrl: {\n              type: 'string',\n            },\n            scopes: {\n              $ref: '#/$defs/map-of-strings',\n            },\n          },\n          required: ['authorizationUrl', 'tokenUrl', 'scopes'],\n          $ref: '#/$defs/specification-extensions',\n          unevaluatedProperties: false,\n        },\n      },\n    },\n    'security-requirement': {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'string',\n        },\n      },\n    },\n    'specification-extensions': {\n      patternProperties: {\n        '^x-': true,\n      },\n    },\n    examples: {\n      properties: {\n        example: true,\n        examples: {\n          type: 'object',\n          additionalProperties: {\n            $ref: '#/$defs/example-or-reference',\n          },\n        },\n      },\n    },\n    'map-of-strings': {\n      type: 'object',\n      additionalProperties: {\n        type: 'string',\n      },\n    },\n  },\n};\n\nconst OAS_SCHEMAS = {\n  '2.0': OAS_2,\n  '3.0': OAS_3,\n  3.1: OAS_3_1,\n};\n\nfunction shouldIgnoreError(error) {\n  return (\n    // oneOf is a fairly error as we have 2 options to choose from for most of the time.\n    error.keyword === 'oneOf' ||\n    // the required $ref is entirely useless, since oas-schema rules operate on resolved content, so there won't be any $refs in the document\n    (error.keyword === 'required' && error.params.missingProperty === '$ref')\n  );\n}\n\n// this is supposed to cover edge cases we need to cover manually, when it's impossible to detect the most appropriate error, i.e. oneOf consisting of more than 3 members, etc.\n// note,  more errors can be included if certain messages reported by AJV are not quite meaningful\nconst ERROR_MAP = [\n  {\n    path: /^components\\/securitySchemes\\/[^/]+$/,\n    message: 'Invalid security scheme',\n  },\n];\n\n// The function removes irrelevant (aka misleading, confusing, useless, whatever you call it) errors.\n// There are a few exceptions, i.e. security components I covered manually,\n// yet apart from them we usually deal with a relatively simple scenario that can be literally expressed as: \"either proper value of $ref property\".\n// The $ref part is never going to be interesting for us, because both oas-schema rules operate on resolved content, so we won't have any $refs left.\n// As you can see, what we deal here wit is actually not really oneOf anymore - it's always the first member of oneOf we match against.\n// That being said, we always strip both oneOf and $ref, since we are always interested in the first error.\nexport function prepareResults(errors) {\n  // Update additionalProperties errors to make them more precise and prevent them from being treated as duplicates\n  for (const error of errors) {\n    if (error.keyword === 'additionalProperties') {\n      error.instancePath = `${error.instancePath}/${String(error.params['additionalProperty'])}`;\n    }\n  }\n\n  for (let i = 0; i < errors.length; i++) {\n    const error = errors[i];\n\n    if (i + 1 < errors.length && errors[i + 1].instancePath === error.instancePath) {\n      errors.splice(i + 1, 1);\n      i--;\n    } else if (i > 0 && shouldIgnoreError(error) && errors[i - 1].instancePath.startsWith(error.instancePath)) {\n      errors.splice(i, 1);\n      i--;\n    }\n  }\n}\n\nfunction applyManualReplacements(errors) {\n  for (const error of errors) {\n    if (error.path === void 0) continue;\n\n    const joinedPath = error.path.join('/');\n\n    for (const mappedError of ERROR_MAP) {\n      if (mappedError.path.test(joinedPath)) {\n        error.message = mappedError.message;\n        break;\n      }\n    }\n  }\n}\n\nexport default createRulesetFunction(\n  {\n    input: null,\n    options: null,\n  },\n  function oasDocumentSchema(targetVal, opts, context) {\n    const formats = context.document.formats;\n    if (formats === null || formats === void 0) return;\n\n    const schema = formats.has(oas2)\n      ? OAS_SCHEMAS['2.0']\n      : formats.has(oas3_1)\n      ? OAS_SCHEMAS['3.1']\n      : OAS_SCHEMAS['3.0'];\n\n    const errors = schemaFn(targetVal, { allErrors: true, schema, prepareResults }, context);\n\n    if (Array.isArray(errors)) {\n      applyManualReplacements(errors);\n    }\n\n    return errors;\n  },\n);\n"
        },
        {
          "id": "UuQIJubOzprDf_imcL6S2",
          "extendedFrom": "",
          "name": "oasDiscriminator",
          "content": "function isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nexport const oasDiscriminator = (schema, _opts, { path }) => {\n  /**\n   * This function verifies:\n   *\n   * 1. The discriminator property name is defined at this schema.\n   * 2. The discriminator property is in the required property list.\n   */\n\n  if (!isObject(schema)) return;\n\n  if (typeof schema.discriminator !== 'string') return;\n\n  const discriminatorName = schema.discriminator;\n\n  const results = [];\n\n  if (!isObject(schema.properties) || !Object.keys(schema.properties).some(k => k === discriminatorName)) {\n    results.push({\n      message: `The discriminator property must be defined in this schema.`,\n      path: [...path, 'properties'],\n    });\n  }\n\n  if (!Array.isArray(schema.required) || !schema.required.some(n => n === discriminatorName)) {\n    results.push({\n      message: `The discriminator property must be in the required property list.`,\n      path: [...path, 'required'],\n    });\n  }\n\n  return results;\n};\n\nexport default oasDiscriminator;"
        },
        {
          "id": "9I7TRcTMYcF2Yx79NPqej",
          "extendedFrom": "",
          "name": "oasOpFormDataConsumeCheck",
          "content": "function isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nconst validConsumeValue = /(application\\/x-www-form-urlencoded|multipart\\/form-data)/;\n\nexport const oasOpFormDataConsumeCheck = targetVal => {\n  if (!isObject(targetVal)) return;\n\n  const parameters = targetVal.parameters;\n  const consumes = targetVal.consumes;\n\n  if (!Array.isArray(parameters) || !Array.isArray(consumes)) {\n    return;\n  }\n\n  if (parameters.some(p => isObject(p) && p.in === 'formData') && !validConsumeValue.test(consumes?.join(','))) {\n    return [\n      {\n        message: 'Consumes must include urlencoded, multipart, or form-data media type when using formData parameter.',\n      },\n    ];\n  }\n\n  return;\n};\n\nexport default oasOpFormDataConsumeCheck;"
        },
        {
          "id": "F6WV3aN64zVePGWPLyVjl",
          "extendedFrom": "",
          "name": "oasUnusedComponent",
          "content": "import { unreferencedReusableObject } from '@stoplight/spectral-functions';\nimport { createRulesetFunction } from '@stoplight/spectral-core';\n\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nexport default createRulesetFunction(\n  {\n    input: {\n      type: 'object',\n      properties: {\n        components: {\n          type: 'object',\n        },\n      },\n      required: ['components'],\n    },\n    options: null,\n  },\n  function oasUnusedComponent(targetVal, opts, context) {\n    const results = [];\n    const componentTypes = [\n      'schemas',\n      'responses',\n      'parameters',\n      'examples',\n      'requestBodies',\n      'headers',\n      'links',\n      'callbacks',\n    ];\n\n    for (const type of componentTypes) {\n      const value = targetVal.components[type];\n      if (!isObject(value)) continue;\n\n      const resultsForType = unreferencedReusableObject(\n        value,\n        { reusableObjectsLocation: `#/components/${type}` },\n        context,\n      );\n      if (resultsForType !== void 0 && Array.isArray(resultsForType)) {\n        results.push(...resultsForType);\n      }\n    }\n\n    return results;\n  },\n);"
        },
        {
          "id": "3jb5NBZPh-uGC8gGHOc-l",
          "extendedFrom": "",
          "name": "oasOpIdUnique",
          "content": "import { isPlainObject } from '@stoplight/json';\n\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nconst validOperationKeys = ['get', 'head', 'post', 'put', 'patch', 'delete', 'options', 'trace'];\n\nfunction* getAllOperations(paths) {\n  if (!isPlainObject(paths)) {\n    return;\n  }\n\n  const item = {\n    path: '',\n    operation: '',\n    value: null,\n  };\n\n  for (const path of Object.keys(paths)) {\n    const operations = paths[path];\n    if (!isPlainObject(operations)) {\n      continue;\n    }\n\n    item.path = path;\n\n    for (const operation of Object.keys(operations)) {\n      if (!isPlainObject(operations[operation]) || !validOperationKeys.includes(operation)) {\n        continue;\n      }\n\n      item.operation = operation;\n      item.value = operations[operation];\n\n      yield item;\n    }\n  }\n}\n\nexport const oasOpIdUnique = targetVal => {\n  if (!isObject(targetVal) || !isObject(targetVal.paths)) return;\n\n  const results = [];\n\n  const { paths } = targetVal;\n\n  const seenIds = [];\n\n  for (const { path, operation } of getAllOperations(paths)) {\n    const pathValue = paths[path];\n\n    if (!isObject(pathValue)) continue;\n\n    const operationValue = pathValue[operation];\n\n    if (!isObject(operationValue) || !('operationId' in operationValue)) {\n      continue;\n    }\n\n    const { operationId } = operationValue;\n\n    if (seenIds.includes(operationId)) {\n      results.push({\n        message: 'operationId must be unique.',\n        path: ['paths', path, operation, 'operationId'],\n      });\n    } else {\n      seenIds.push(operationId);\n    }\n  }\n\n  return results;\n};\n\nexport default oasOpIdUnique;"
        },
        {
          "id": "SgH4vKlbb41Z8POvR8VmA",
          "extendedFrom": "",
          "name": "oasTagDefined",
          "content": "// This function will check an API doc to verify that any tag that appears on\n// an operation is also present in the global tags array.\nimport { isPlainObject } from '@stoplight/json';\n\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nconst validOperationKeys = ['get', 'head', 'post', 'put', 'patch', 'delete', 'options', 'trace'];\n\nfunction* getAllOperations(paths) {\n  if (!isPlainObject(paths)) {\n    return;\n  }\n\n  const item = {\n    path: '',\n    operation: '',\n    value: null,\n  };\n\n  for (const path of Object.keys(paths)) {\n    const operations = paths[path];\n    if (!isPlainObject(operations)) {\n      continue;\n    }\n\n    item.path = path;\n\n    for (const operation of Object.keys(operations)) {\n      if (!isPlainObject(operations[operation]) || !validOperationKeys.includes(operation)) {\n        continue;\n      }\n\n      item.operation = operation;\n      item.value = operations[operation];\n\n      yield item;\n    }\n  }\n}\n\nexport const oasTagDefined = targetVal => {\n  if (!isObject(targetVal)) return;\n  const results = [];\n\n  const globalTags = [];\n\n  if (Array.isArray(targetVal.tags)) {\n    for (const tag of targetVal.tags) {\n      if (isObject(tag) && typeof tag.name === 'string') {\n        globalTags.push(tag.name);\n      }\n    }\n  }\n\n  const { paths } = targetVal;\n\n  for (const { path, operation, value } of getAllOperations(paths)) {\n    if (!isObject(value)) continue;\n\n    const { tags } = value;\n\n    if (!Array.isArray(tags)) {\n      continue;\n    }\n\n    for (const [i, tag] of tags.entries()) {\n      if (!globalTags.includes(tag)) {\n        results.push({\n          message: 'Operation tags must be defined in global tags.',\n          path: ['paths', path, operation, 'tags', i],\n        });\n      }\n    }\n  }\n\n  return results;\n};\n\nexport default oasTagDefined;"
        },
        {
          "id": "dvzcTQtc7BglZXXkVlvkq",
          "extendedFrom": "",
          "name": "oasOpSecurityDefined",
          "content": "import { isPlainObject } from '@stoplight/json';\nimport { createRulesetFunction } from '@stoplight/spectral-core';\n\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nconst validOperationKeys = ['get', 'head', 'post', 'put', 'patch', 'delete', 'options', 'trace'];\n\nfunction* getAllOperations(paths) {\n  if (!isPlainObject(paths)) {\n    return;\n  }\n\n  const item = {\n    path: '',\n    operation: '',\n    value: null,\n  };\n\n  for (const path of Object.keys(paths)) {\n    const operations = paths[path];\n    if (!isPlainObject(operations)) {\n      continue;\n    }\n\n    item.path = path;\n\n    for (const operation of Object.keys(operations)) {\n      if (!isPlainObject(operations[operation]) || !validOperationKeys.includes(operation)) {\n        continue;\n      }\n\n      item.operation = operation;\n      item.value = operations[operation];\n\n      yield item;\n    }\n  }\n}\n\nfunction _get(value, path) {\n  for (const segment of path) {\n    if (!isObject(value)) {\n      break;\n    }\n\n    value = value[segment];\n  }\n\n  return value;\n}\n\nexport default createRulesetFunction(\n  {\n    input: {\n      type: 'object',\n      properties: {\n        paths: {\n          type: 'object',\n        },\n        security: {\n          type: 'array',\n        },\n      },\n    },\n    options: {\n      type: 'object',\n      properties: {\n        schemesPath: {\n          type: 'array',\n          items: {\n            type: ['string', 'number'],\n          },\n        },\n      },\n    },\n  },\n  function oasOpSecurityDefined(targetVal, { schemesPath }) {\n    const { paths } = targetVal;\n\n    const results = [];\n\n    const schemes = _get(targetVal, schemesPath);\n    const allDefs = isObject(schemes) ? Object.keys(schemes) : [];\n\n    // Check global security requirements\n\n    const { security } = targetVal;\n\n    if (Array.isArray(security)) {\n      for (const [index, value] of security.entries()) {\n        if (!isObject(value)) {\n          continue;\n        }\n\n        const securityKeys = Object.keys(value);\n\n        for (const securityKey of securityKeys) {\n          if (!allDefs.includes(securityKey)) {\n            results.push({\n              message: `API \"security\" values must match a scheme defined in the \"${schemesPath.join('.')}\" object.`,\n              path: ['security', index, securityKey],\n            });\n          }\n        }\n      }\n    }\n\n    for (const { path, operation, value } of getAllOperations(paths)) {\n      if (!isObject(value)) continue;\n\n      const { security } = value;\n\n      if (!Array.isArray(security)) {\n        continue;\n      }\n\n      for (const [index, value] of security.entries()) {\n        if (!isObject(value)) {\n          continue;\n        }\n\n        const securityKeys = Object.keys(value);\n\n        for (const securityKey of securityKeys) {\n          if (!allDefs.includes(securityKey)) {\n            results.push({\n              message: `Operation \"security\" values must match a scheme defined in the \"${schemesPath.join(\n                '.',\n              )}\" object.`,\n              path: ['paths', path, operation, 'security', index, securityKey],\n            });\n          }\n        }\n      }\n    }\n\n    return results;\n  },\n);"
        },
        {
          "id": "kai696Vm99wdiaPDdJYW0",
          "extendedFrom": "",
          "name": "oasExample",
          "content": "import { isPlainObject, pointerToPath } from '@stoplight/json';\nimport { createRulesetFunction } from '@stoplight/spectral-core';\nimport { oas2, oas3_1, extractDraftVersion, oas3_0 } from '@stoplight/spectral-formats';\nimport { schema as schemaFn } from '@stoplight/spectral-functions';\nimport traverse from 'json-schema-traverse';\n\nconst MEDIA_VALIDATION_ITEMS = {\n  2: [\n    {\n      field: 'examples',\n      multiple: true,\n      keyed: false,\n    },\n  ],\n  3: [\n    {\n      field: 'example',\n      multiple: false,\n      keyed: false,\n    },\n    {\n      field: 'examples',\n      multiple: true,\n      keyed: true,\n    },\n  ],\n};\n\nconst SCHEMA_VALIDATION_ITEMS = {\n  2: ['example', 'x-example', 'default'],\n  3: ['example', 'default'],\n};\n\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nfunction rewriteNullable(schema, errors) {\n  for (const error of errors) {\n    if (error.keyword !== 'type') continue;\n    const value = getSchemaProperty(schema, error.schemaPath);\n    if (isPlainObject(value) && value.nullable === true) {\n      error.message += ',null';\n    }\n  }\n}\n\nconst visitOAS2 = schema => {\n  if (schema['x-nullable'] === true) {\n    schema.nullable = true;\n    delete schema['x-nullable'];\n  }\n};\n\nfunction getSchemaProperty(schema, schemaPath) {\n  const path = pointerToPath(schemaPath);\n  let value = schema;\n\n  for (const fragment of path.slice(0, -1)) {\n    if (!isPlainObject(value)) {\n      return;\n    }\n\n    value = value[fragment];\n  }\n\n  return value;\n}\n\nconst oasSchema = createRulesetFunction(\n  {\n    input: null,\n    options: {\n      type: 'object',\n      properties: {\n        schema: {\n          type: 'object',\n        },\n      },\n      additionalProperties: false,\n    },\n  },\n  function oasSchema(targetVal, opts, context) {\n    const formats = context.document.formats;\n\n    let { schema } = opts;\n\n    let dialect = 'draft4';\n    let prepareResults;\n\n    if (!formats) {\n      dialect = 'auto';\n    } else if (formats.has(oas3_1)) {\n      if (isPlainObject(context.document.data) && typeof context.document.data.jsonSchemaDialect === 'string') {\n        dialect = extractDraftVersion(context.document.data.jsonSchemaDialect) ?? 'draft2020-12';\n      } else {\n        dialect = 'draft2020-12';\n      }\n    } else if (formats.has(oas3_0)) {\n      prepareResults = rewriteNullable.bind(null, schema);\n    } else if (formats.has(oas2)) {\n      const clonedSchema = JSON.parse(JSON.stringify(schema));\n      traverse(clonedSchema, visitOAS2);\n      schema = clonedSchema;\n      prepareResults = rewriteNullable.bind(null, clonedSchema);\n    }\n\n    return schemaFn(\n      targetVal,\n      {\n        ...opts,\n        schema,\n        prepareResults,\n        dialect,\n      },\n      context,\n    );\n  },\n);\n\nfunction* getMediaValidationItems(items, targetVal, givenPath, oasVersion) {\n  for (const { field, keyed, multiple } of items) {\n    if (!(field in targetVal)) {\n      continue;\n    }\n\n    const value = targetVal[field];\n\n    if (multiple) {\n      if (!isObject(value)) continue;\n\n      for (const exampleKey of Object.keys(value)) {\n        const exampleValue = value[exampleKey];\n        if (oasVersion === 3 && keyed && (!isObject(exampleValue) || 'externalValue' in exampleValue)) {\n          // should be covered by oas3-examples-value-or-externalValue\n          continue;\n        }\n\n        const targetPath = [...givenPath, field, exampleKey];\n\n        if (keyed) {\n          targetPath.push('value');\n        }\n\n        yield {\n          value: keyed && isObject(exampleValue) ? exampleValue.value : exampleValue,\n          path: targetPath,\n        };\n      }\n\n      return;\n    } else {\n      return yield {\n        value,\n        path: [...givenPath, field],\n      };\n    }\n  }\n}\n\nfunction* getSchemaValidationItems(fields, targetVal, givenPath) {\n  for (const field of fields) {\n    if (!(field in targetVal)) {\n      continue;\n    }\n\n    yield {\n      value: targetVal[field],\n      path: [...givenPath, field],\n    };\n  }\n}\n\nexport default createRulesetFunction(\n  {\n    input: {\n      type: 'object',\n    },\n    options: {\n      type: 'object',\n      properties: {\n        oasVersion: {\n          enum: ['2', '3'],\n        },\n        schemaField: {\n          type: 'string',\n        },\n        type: {\n          enum: ['media', 'schema'],\n        },\n      },\n      additionalProperties: false,\n    },\n  },\n  function oasExample(targetVal, opts, context) {\n    const formats = context.document.formats;\n    const schemaOpts = {\n      schema: opts.schemaField === '$' ? targetVal : targetVal[opts.schemaField],\n    };\n\n    let results = void 0;\n    let oasVersion = parseInt(opts.oasVersion);\n\n    const validationItems =\n      opts.type === 'schema'\n        ? getSchemaValidationItems(SCHEMA_VALIDATION_ITEMS[oasVersion], targetVal, context.path)\n        : getMediaValidationItems(MEDIA_VALIDATION_ITEMS[oasVersion], targetVal, context.path, oasVersion);\n\n    if (formats?.has(oas2) && 'required' in schemaOpts.schema && typeof schemaOpts.schema.required === 'boolean') {\n      schemaOpts.schema = { ...schemaOpts.schema };\n      delete schemaOpts.schema.required;\n    }\n\n    for (const validationItem of validationItems) {\n      const result = oasSchema(validationItem.value, schemaOpts, {\n        ...context,\n        path: validationItem.path,\n      });\n\n      if (Array.isArray(result)) {\n        if (results === void 0) results = [];\n        results.push(...result);\n      }\n    }\n\n    return results;\n  },\n);"
        },
        {
          "id": "7T92QMeNa1trGWYymAT2u",
          "extendedFrom": "",
          "name": "oasSchema",
          "content": "import traverse from 'json-schema-traverse';\nimport { schema as schemaFn } from '@stoplight/spectral-functions';\nimport { createRulesetFunction } from '@stoplight/spectral-core';\nimport { oas2, oas3_1, extractDraftVersion, oas3_0 } from '@stoplight/spectral-formats';\nimport { isPlainObject, pointerToPath } from '@stoplight/json';\n\nfunction rewriteNullable(schema, errors) {\n  for (const error of errors) {\n    if (error.keyword !== 'type') continue;\n    const value = getSchemaProperty(schema, error.schemaPath);\n    if (isPlainObject(value) && value.nullable === true) {\n      error.message += ',null';\n    }\n  }\n}\n\nexport default createRulesetFunction(\n  {\n    input: null,\n    options: {\n      type: 'object',\n      properties: {\n        schema: {\n          type: 'object',\n        },\n      },\n      additionalProperties: false,\n    },\n  },\n  function oasSchema(targetVal, opts, context) {\n    const formats = context.document.formats;\n\n    let { schema } = opts;\n\n    let dialect = 'draft4';\n    let prepareResults;\n\n    if (!formats) {\n      dialect = 'auto';\n    } else if (formats.has(oas3_1)) {\n      if (isPlainObject(context.document.data) && typeof context.document.data.jsonSchemaDialect === 'string') {\n        dialect = extractDraftVersion(context.document.data.jsonSchemaDialect) ?? 'draft2020-12';\n      } else {\n        dialect = 'draft2020-12';\n      }\n    } else if (formats.has(oas3_0)) {\n      prepareResults = rewriteNullable.bind(null, schema);\n    } else if (formats.has(oas2)) {\n      const clonedSchema = JSON.parse(JSON.stringify(schema));\n      traverse(clonedSchema, visitOAS2);\n      schema = clonedSchema;\n      prepareResults = rewriteNullable.bind(null, clonedSchema);\n    }\n\n    return schemaFn(\n      targetVal,\n      {\n        ...opts,\n        schema,\n        prepareResults,\n        dialect,\n      },\n      context,\n    );\n  },\n);\n\nconst visitOAS2 = schema => {\n  if (schema['x-nullable'] === true) {\n    schema.nullable = true;\n    delete schema['x-nullable'];\n  }\n};\n\nfunction getSchemaProperty(schema, schemaPath) {\n  const path = pointerToPath(schemaPath);\n  let value = schema;\n\n  for (const fragment of path.slice(0, -1)) {\n    if (!isPlainObject(value)) {\n      return;\n    }\n\n    value = value[fragment];\n  }\n\n  return value;\n}"
        }
      ],
      "extendedDefault": false
    }
  },
  "extendedDefault": true
}